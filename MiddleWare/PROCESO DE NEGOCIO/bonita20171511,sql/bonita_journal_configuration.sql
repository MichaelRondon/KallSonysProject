CREATE DATABASE  IF NOT EXISTS `bonita_journal` /*!40100 DEFAULT CHARACTER SET latin1 */;
USE `bonita_journal`;
-- MySQL dump 10.13  Distrib 5.7.17, for Win64 (x86_64)
--
-- Host: 192.168.99.100    Database: bonita_journal
-- ------------------------------------------------------
-- Server version	5.7.20

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `configuration`
--

DROP TABLE IF EXISTS `configuration`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `configuration` (
  `tenant_id` bigint(20) NOT NULL,
  `content_type` varchar(50) NOT NULL,
  `resource_name` varchar(120) NOT NULL,
  `resource_content` blob,
  PRIMARY KEY (`tenant_id`,`content_type`,`resource_name`),
  KEY `idx_configuration` (`tenant_id`,`content_type`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `configuration`
--

LOCK TABLES `configuration` WRITE;
/*!40000 ALTER TABLE `configuration` DISABLE KEYS */;
INSERT INTO `configuration` VALUES (0,'PLATFORM_ENGINE','bonita-platform-community-custom.properties','##Bonita platform core configuration\n#\n## Platform administrator\n#platformAdminUsername=platformAdmin\n#platformAdminPassword=platform\n#\n## this datasource name is used by the engine to get connected to the database\n#database.journal.datasource.name=${sysprop.bonita.database.journal.datasource.name:java:comp/env/bonitaDS}\n#database.sequence.manager.datasource.name=${sysprop.bonita.database.sequence.manager.datasource.name:java:comp/env/bonitaSequenceManagerDS}\n#\n## By default, get DB vendor type from JVM System Property. If not set, fallback on value after semi-colon (e.g. h2)\n#db.vendor=${sysprop.bonita.db.vendor:h2}\n#\n## Hibernate specific configurations\n#hibernate.journal.show_sql=false\n#hibernate.journal.format_sql=false\n#hibernate.journal.use_sql_comments=false\n#hibernate.transaction.jta_platform=${sysprop.bonita.hibernate.transaction.jta_platform:org.bonitasoft.engine.persistence.JNDIBitronixJtaPlatform}\n#\n## Transaction Service properties\n#transaction.manager=${sysprop.bonita.transaction.manager:java:comp/UserTransaction}\n#userTransaction=${sysprop.bonita.userTransaction:java:comp/UserTransaction}\n#\n## Synchro service\n## Initial capacity of the waiters map\n#bonita.platform.synchro.initialcapacity=50\n#\n## Scheduler\n## Number of threads in Quartz scheduler Thread Pool\n#bonita.platform.scheduler.quartz.threadpool.size=5\n## Number of couples to retrieve per request to persistence service\n#bonita.platform.scheduler.batchsize=1000\n#\n## Lock Service\n## Number of seconds to wait for a lock\n#bonita.platform.lock.memory.timeout=60\n## Number of mutex objects to create to shard the ids for locking (Memory implementation only)\n#bonita.platform.lock.memory.poolsize=100\n#\n## Default platform cache: used if not specific cache is defined\n#bonita.platform.cache.default.maxElementsInMemory=1000\n#bonita.platform.cache.default.inMemoryOnly=true\n#bonita.platform.cache.default.eternal=true\n#bonita.platform.cache.default.evictionPolicy=LRU\n#bonita.platform.cache.default.timeToLiveSeconds=3600\n#bonita.platform.cache.default.maxElementsOnDisk=20000\n#bonita.platform.cache.default.copyOnRead=false\n#bonita.platform.cache.default.copyOnWrite=false\n#bonita.platform.cache.default.readIntensive=false\n#\n## Synchro service cache configuration\n#bonita.platform.cache.synchro.maxElementsInMemory=10000\n#bonita.platform.cache.synchro.inMemoryOnly=true\n#bonita.platform.cache.synchro.eternal=false\n#bonita.platform.cache.synchro.evictionPolicy=LRU\n#bonita.platform.cache.synchro.timeToLiveSeconds=120\n#bonita.platform.cache.synchro.maxElementsOnDisk=20000\n#bonita.platform.cache.synchro.copyOnRead=false\n#bonita.platform.cache.synchro.copyOnWrite=false\n#bonita.platform.cache.synchro.readIntensive=false\n#\n## Platform service cache configuration\n#bonita.platform.cache.platform.maxElementsInMemory=100\n#bonita.platform.cache.platform.inMemoryOnly=true\n#bonita.platform.cache.platform.eternal=true\n#bonita.platform.cache.platform.evictionPolicy=LRU\n#bonita.platform.cache.platform.timeToLiveSeconds=3600\n#bonita.platform.cache.platform.maxElementsOnDisk=20000\n#bonita.platform.cache.platform.copyOnRead=false\n#bonita.platform.cache.platform.copyOnWrite=false\n#bonita.platform.cache.platform.readIntensive=false\n#\n## Sequence manager configuration\n#bonita.platform.sequence.retries=9\n#bonita.platform.sequence.delay=10\n#bonita.platform.sequence.delayFactor=3\n## if the sequence range size is not overrided, this value will be taken\n#bonita.platform.sequence.defaultRangeSize=100\n## you can override the range size of any sequenceId following the pattern bonita.platform.sequence.<sequenceId>=<new range size>\n## Most used objects: range size depends on process design\n#bonita.platform.sequence.70=2000\n## Job description\n#bonita.platform.sequence.30=10000\n## queriable log\n#bonita.platform.sequence.31=200000\n## queriable log parameter\n#bonita.platform.sequence.10010=1000\n## ProcessInstance\n#bonita.platform.sequence.10011=20000\n## ActivityInstance<!-- 20 step by process average\n#bonita.platform.sequence.10013=20000\n## TransitoinInstance<!-- same as activity instance\n#bonita.platform.sequence.10014=20000\n## ConnectorInstance<!-- same as activity instance\n#bonita.platform.sequence.20010=3000\n## archived ProcessInstance<!-- Process instance * nb state\n#bonita.platform.sequence.20011=80000\n## EventTriggerInstance<!-- 1/5 of activity\n#bonita.platform.sequence.10016=4000\n## WaitingEvent<!-- 1/5 of activity\n#bonita.platform.sequence.10017=4000\n## MessageInstance<!-- 1/5 of activity\n#bonita.platform.sequence.10018=4000\n## PendingActivityMapping<!-- 1/5 of activity\n#bonita.platform.sequence.10020=5000\n## data\n#bonita.platform.sequence.20050=25000\n## archived data<!-- 5 change by data\n#bonita.platform.sequence.10060=20000\n## comment\n#bonita.platform.sequence.10080=20000\n#\n#\n## Platform persistence service\n#bonita.platform.persistence.platform.likeEscapeCharacter=#\n#bonita.platform.persistence.platform.enableWordSearch=false\n#\n## Tenant persistence service\n#bonita.platform.persistence.tenant.likeEscapeCharacter=#\n#bonita.platform.persistence.tenant.enableWordSearch=false\n#\n## Persistence service hibernate configuration\n#bonita.platform.persistence.generate_statistics=false\n#bonita.platform.persistence.connection.shutdown=true\n#bonita.platform.persistence.validator.autoregister_listeners=false\n#bonita.platform.persistence.validator.apply_to_ddl=false\n#bonita.platform.persistence.javax.persistence.validation.mode=NONE\n#\n#\n## quartz non managed connections transaction isolation level\n## database default if false, read committed if true\n##org.quartz.jobStore.txIsolationLevelReadCommitted=true'),(0,'PLATFORM_ENGINE','bonita-platform-custom.xml','<beans xmlns=\"http://www.springframework.org/schema/beans\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:p=\"http://www.springframework.org/schema/p\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd\">\n\n    <!-- ADD ANY BEAN DEFINITION YOU WANT TO BE AVAILABLE TO THE PLATFORM ACCESSOR -->\n\n    <!--\n    <bean id=\"platformWordSearchExclusionMappings\" parent=\"defaultPlatformWordSearchExclusionMappings\" class=\"org.springframework.beans.factory.config.SetFactoryBean\">\n        <property name=\"targetSetClass\">\n            <value>java.util.HashSet</value>\n        </property>\n        <property name=\"sourceSet\">\n            <list merge=\"true\">\n                <value>org.bonitasoft.engine.identity.model.SUser</value>\n            </list>\n        </property>\n    </bean>\n    -->\n\n    <!--\n    <bean id=\"tenantWordSearchExclusionMappings\" parent=\"defaultTenantWordSearchExclusionMappings\" class=\"org.springframework.beans.factory.config.SetFactoryBean\">\n        <property name=\"targetSetClass\">\n            <value>java.util.HashSet</value>\n        </property>\n        <property name=\"sourceSet\">\n            <list merge=\"true\">\n                <value>org.bonitasoft.engine.identity.model.SUser</value>\n            </list>\n        </property>\n    </bean>\n    -->\n</beans>\n'),(0,'PLATFORM_INIT_ENGINE','bonita-platform-init-community-custom.properties','#activeProfiles=community'),(0,'PLATFORM_INIT_ENGINE','bonita-platform-init-custom.xml','<beans xmlns=\"http://www.springframework.org/schema/beans\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:p=\"http://www.springframework.org/schema/p\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd\">\n\n    <!-- ADD ANY BEAN DEFINITION YOU WANT TO BE AVAILABLE TO THE PRE-INIT ACCESSOR -->\n\n</beans>\n'),(0,'PLATFORM_PORTAL','cache-config.xml','<ehcache>\n\n	<defaultCache \n			maxElementsInMemory=\"10000\"\n			eternal=\"true\"\n			overflowToDisk=\"true\"\n			diskSpoolBufferSizeMB=\"30\"\n			maxElementsOnDisk=\"10000000\"\n			diskPersistent=\"false\"\n			diskExpiryThreadIntervalSeconds=\"120\"\n			memoryStoreEvictionPolicy=\"LRU\"\n			statistics=\"false\"\n			copyOnRead=\"true\"\n			copyOnWrite=\"true\"\n			/>\n\n</ehcache>'),(0,'PLATFORM_PORTAL','jaas-standard.cfg','/**\n* Below are example values of configuring JAAS authentication. Please refer to Bonitasoft documentation for\n* further information http://documentation.bonitasoft.com/active-directoryldap-authentication-0\n*/\nBonitaAuth-1 {\n  org.bonitasoft.console.server.auth.impl.jaas.ConsoleIdentityLoginModule required;\n};\nBonitaAuthentication-1 {\n  org.jasig.cas.client.jaas.CasLoginModule required\n    ticketValidatorClass=\"org.jasig.cas.client.validation.Cas20ServiceTicketValidator\"\n    casServerUrlPrefix=\"http://127.0.1.1:8180/cas\"\n    tolerance=\"20000\"                   \n    service=\"http://127.0.1.1:8080/bonita/loginservice \n    defaultRoles=\"admin,operator\"               \n    roleAttributeNames=\"memberOf,eduPersonAffiliation\"\n    principalGroupName=\"CallerPrincipal\"\n    roleGroupName=\"Roles\"       \n    cacheAssertions=\"true\"              \n    cacheTimeout=\"480\";                         \n};\n'),(0,'PLATFORM_PORTAL','platform-tenant-config.properties','#For tenant\nplatform.tenant.default.username=install\nplatform.tenant.default.password=install'),(0,'PLATFORM_PORTAL','security-config.properties','#Enable/disable CSRF security filter\nsecurity.csrf.enabled true\n#Add  or not the secure flag to the CSRF token cookie (HTTPS only)\nsecurity.csrf.cookie.secure false'),(0,'TENANT_TEMPLATE_ENGINE','bonita-tenant-community-custom.properties','## Bonita Tenant server core configuration\n#userName=install\n#userPassword=install\n#\n## Business data configuration\n#bdm.db.vendor=${sysprop.bonita.bdm.db.vendor:h2}\n#bdm.datasource.jndi.path=${sysprop.bonita.businessdata.datasource.jndi:java:comp/env/BusinessDataDS}\n#bdm.notmanageddatasource.jndi.path=${sysprop.bonita.businessdata.notmanageddatasource.jndi:java:comp/env/NotManagedBizDataDS}\n#bdm.hibernate.transaction.jta_platform=${sysprop.bonita.hibernate.transaction.jta_platform:org.bonitasoft.engine.persistence.JNDIBitronixJtaPlatform}\n#\n##Cron jobs configuration\n##Seconds Minutes Hours Day-of-Month Month Day-of-Week Year (optional field)\n#org.bonitasoft.engine.clean.invalid.sessions.cron=0 0 */2 * * ?\n#\n## name of the servlet used to download content of document\n#document.servlet.url=documentDownload\n#\n## Session service\n## session duration in ms\n#bonita.tenant.session.duration=3600000\n#\n## Connector executor\n#bonita.tenant.connector.queueCapacity=10000\n#bonita.tenant.connector.corePoolSize=10\n#bonita.tenant.connector.maximumPoolSize=10\n#bonita.tenant.connector.keepAliveTimeSeconds=100\n#\n## Work service\n## Time to wait in seconds for all work to terminate when the service is paused or stopped\n#bonita.tenant.work.terminationTimeout=30\n#bonita.tenant.work.corePoolSize=10\n#bonita.tenant.work.maximumPoolSize=10\n#bonita.tenant.work.keepAliveTimeSeconds=60\n#bonita.tenant.work.queueCapacity=500000\n#\n## Time tracker\n#bonita.tenant.timetracker.startTracking=false\n#bonita.tenant.timetracker.maxSize=1000\n#bonita.tenant.timetracker.flushIntervalInSeconds=30\n#bonita.tenant.timetracker.csv.activateAtStart=true\n#bonita.tenant.timetracker.csv.folder=${java.io.tmpdir}\n#bonita.tenant.timetracker.csv.separator=;\n#bonita.tenant.timetracker.memory.activateAtStart=false\n#bonita.tenant.timetracker.memory.maxSize=1000000\n#\n## Default tenant cache: used if not specific cache is defined\n#bonita.tenant.cache.default.maxElementsInMemory=1000\n#bonita.tenant.cache.default.inMemoryOnly=true\n#bonita.tenant.cache.default.eternal=true\n#bonita.tenant.cache.default.evictionPolicy=LRU\n#bonita.tenant.cache.default.timeToLiveSeconds=3600\n#bonita.tenant.cache.default.maxElementsOnDisk=20000\n#bonita.tenant.cache.default.copyOnRead=false\n#bonita.tenant.cache.default.copyOnWrite=false\n#bonita.tenant.cache.default.readIntensive=false\n#\n## Connector service cache configuration\n#bonita.tenant.cache.connector.maxElementsInMemory=10000\n#bonita.tenant.cache.connector.inMemoryOnly=false\n#bonita.tenant.cache.connector.eternal=false\n#bonita.tenant.cache.connector.evictionPolicy=LRU\n#bonita.tenant.cache.connector.timeToLiveSeconds=3600\n#bonita.tenant.cache.connector.maxElementsOnDisk=20000\n#bonita.tenant.cache.connector.copyOnRead=false\n#bonita.tenant.cache.connector.copyOnWrite=false\n#bonita.tenant.cache.connector.readIntensive=true\n#\n## Parameter service cache configuration\n#bonita.tenant.cache.parameter.maxElementsInMemory=10000\n#bonita.tenant.cache.parameter.inMemoryOnly=false\n#bonita.tenant.cache.parameter.eternal=false\n#bonita.tenant.cache.parameter.evictionPolicy=LRU\n#bonita.tenant.cache.parameter.timeToLiveSeconds=3600\n#bonita.tenant.cache.parameter.maxElementsOnDisk=20000\n#bonita.tenant.cache.parameter.copyOnRead=false\n#bonita.tenant.cache.parameter.copyOnWrite=false\n#bonita.tenant.cache.parameter.readIntensive=false\n#\n## Process Definition service cache configuration\n#bonita.tenant.cache.processdef.maxElementsInMemory=10000\n#bonita.tenant.cache.processdef.inMemoryOnly=true\n#bonita.tenant.cache.processdef.eternal=false\n#bonita.tenant.cache.processdef.evictionPolicy=LRU\n#bonita.tenant.cache.processdef.timeToLiveSeconds=3600\n#bonita.tenant.cache.processdef.maxElementsOnDisk=20000\n#bonita.tenant.cache.processdef.copyOnRead=false\n#bonita.tenant.cache.processdef.copyOnWrite=false\n#bonita.tenant.cache.processdef.readIntensive=false\n#\n## User FIlter service cache configuration\n#bonita.tenant.cache.userfilter.maxElementsInMemory=10000\n#bonita.tenant.cache.userfilter.inMemoryOnly=false\n#bonita.tenant.cache.userfilter.eternal=false\n#bonita.tenant.cache.userfilter.evictionPolicy=LRU\n#bonita.tenant.cache.userfilter.timeToLiveSeconds=3600\n#bonita.tenant.cache.userfilter.maxElementsOnDisk=20000\n#bonita.tenant.cache.userfilter.copyOnRead=false\n#bonita.tenant.cache.userfilter.copyOnWrite=false\n#bonita.tenant.cache.userfilter.readIntensive=false\n#\n## Groovy script service cache configuration\n#bonita.tenant.cache.groovy.maxElementsInMemory=10000\n#bonita.tenant.cache.groovy.inMemoryOnly=true\n#bonita.tenant.cache.groovy.eternal=true\n#bonita.tenant.cache.groovy.evictionPolicy=LRU\n#bonita.tenant.cache.groovy.timeToLiveSeconds=3600\n#bonita.tenant.cache.groovy.maxElementsOnDisk=20000\n#bonita.tenant.cache.groovy.copyOnRead=false\n#bonita.tenant.cache.groovy.copyOnWrite=false\n#bonita.tenant.cache.groovy.readIntensive=false\\\n#\n## Transient Data service cache configuration\n#bonita.tenant.cache.transientdata.maxElementsInMemory=10000\n#bonita.tenant.cache.transientdata.inMemoryOnly=true\n#bonita.tenant.cache.transientdata.eternal=true\n#bonita.tenant.cache.transientdata.evictionPolicy=LRU\n#bonita.tenant.cache.transientdata.timeToLiveSeconds=3600\n#bonita.tenant.cache.transientdata.maxElementsOnDisk=20000\n#bonita.tenant.cache.transientdata.copyOnRead=false\n#bonita.tenant.cache.transientdata.copyOnWrite=false\n#bonita.tenant.cache.transientdata.readIntensive=false\\\n#\n## Business Data Repository hibernate configuration\n#bonita.tenant.bdm.repository.show_sql=false\n#bonita.tenant.bdm.repository.format_sql=false\n#bonita.tenant.bdm.repository.validator.autoregister_listeners=false\n#bonita.tenant.bdm.repository.validator.apply_to_ddl=false\n#bonita.tenant.bdm.repository.javax.persistence.validation.mode=NONE\n#\n## Business Data Schema manager\n#bonita.tenant.bdm.schemamanager.show_sql=true\n#bonita.tenant.bdm.schemamanager.format_sql=true\n#bonita.tenant.bdm.schemamanager.validator.autoregister_listeners=false\n#bonita.tenant.bdm.schemamanager.validator.apply_to_ddl=false\n#bonita.tenant.bdm.schemamanager.javax.persistence.validation.mode=NONE\n#\n## Page and form mapping authorization rules\n## you can customize this mapping by defining your own bean\n## that implement org.bonitasoft.engine.core.form.AuthorizationRuleMapping\n## and a set of org.bonitasoft.engine.page.AuthorizationRule\n## to be declared in bonita-tenant-custom.xml\n##bonita.tenant.authorization.rule.mapping=customAuthorizationRuleMapping\n#bonita.tenant.authorization.rule.mapping=defaultAuthorizationRuleMapping\n## to restore pre-7.3.0 behavior (where manager of user involved in process instance could access Case Overview), use this implementation below instead:\n##bonita.tenant.authorization.rule.mapping=managerInvolvedAuthorizationRuleMappingImpl\n#\n'),(0,'TENANT_TEMPLATE_ENGINE','bonita-tenants-custom.xml','<beans xmlns=\"http://www.springframework.org/schema/beans\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd\">\n\n    <!-- ADD ANY BEAN DEFINITION YOU WANT TO BE AVAILABLE TO THE TENANT ACCESSOR -->\n\n    <!--\n    <bean id=\"flushEventListeners\" parent=\"defaultFlushEventListeners\" class=\"org.springframework.beans.factory.config.ListFactoryBean\">\n        <property name=\"sourceList\">\n            <list merge=\"true\">\n            </list>\n        </property>\n    </bean>\n    -->\n\n    <!--\n    <bean id=\"activatedRecords\" parent=\"defaultActivatedRecords\" class=\"org.springframework.beans.factory.config.ListFactoryBean\">\n        <property name=\"sourceList\">\n            <list merge=\"true\">\n            </list>\n        </property>\n    </bean>\n    -->\n\n\n    <!-- custom authorization rule mapping must implement org.bonitasoft.engine.core.form.AuthorizationRuleMapping -->\n    <!--\n    <bean id=\"customAuthorizationRuleMapping\"\n          class=\"org.bonitasoft.engine.core.form.impl.custom.CustomAuthorizationRuleMappingImpl\"/>\n    -->\n\n    <!-- custom authorization rules must implements org.bonitasoft.engine.page.AuthorizationRule -->\n    <!--\n    <bean id=\"customIsProcessInitiatorRule\" class=\"org.bonitasoft.engine.core.form.impl.custom.CustomIsProcessInitiatorRule\">\n        <constructor-arg name=\"processInstanceService\" ref=\"processInstanceService\"/>\n        <constructor-arg name=\"sessionService\" ref=\"sessionService\"/>\n        <constructor-arg name=\"sessionAccessor\" ref=\"sessionAccessor\"/>\n    </bean>\n    -->\n\n\n    <!-- Authorization rule that also grants access to case overview page for a manager of a user involved in the case -->\n    <!--\n    <bean id=\"managerInvolvedAuthorizationRuleMappingImpl\"\n          class=\"org.bonitasoft.engine.core.form.impl.ManagerInvolvedAuthorizationRuleMappingImpl\"/>\n\n    <bean id=\"isManagerOfUserInvolvedInProcessInstanceRule\" class=\"org.bonitasoft.engine.page.IsManagerOfUserInvolvedInProcessInstanceRule\">\n        <constructor-arg name=\"sessionAccessor\" ref=\"sessionAccessor\"/>\n        <constructor-arg name=\"sessionService\" ref=\"sessionService\"/>\n        <constructor-arg name=\"processInvolvementDelegate\" ref=\"processInvolvementDelegate\"/>\n    </bean>\n    -->\n\n</beans>\n'),(0,'TENANT_TEMPLATE_PORTAL','authenticationManager-config.properties','auth.AuthenticationManager=org.bonitasoft.console.common.server.auth.impl.standard.StandardAuthenticationManagerImpl\n#auth.AuthenticationManager = org.bonitasoft.console.common.server.auth.impl.oauth.OAuthAuthenticationManagerImpl\n# OAuth.serviceProvider = LinkedIn\n# OAuth.consumerKey = ove2vcdjptar\n# OAuth.consumerSecret = vdaBrCmHvkgJoYz1\n# OAuth.callbackURL = http://127.0.0.1:8888/loginservice\n#auth.AuthenticationManager = org.bonitasoft.console.common.server.auth.impl.jaas.JAASAuthenticationManagerImpl\n'),(0,'TENANT_TEMPLATE_PORTAL','autologin-v6.json','[]'),(0,'TENANT_TEMPLATE_PORTAL','compound-permissions-mapping.properties','##\n# List of permissions used for each pages.\n# The content of this file is handled by the portal, it should not be modified\n##\ncustompage_htmlexample=[tenant_platform_visualization, profile_visualization, organization_visualization, profile_member_visualization, avatars]\npagelisting=[profile_visualization, profile_management, organization_visualization, tenant_platform_visualization, download_document, profile_member_visualization, profile_member_management, avatars]\nimportexportorganization=[tenant_platform_visualization, organization_management, organization_visualization, profile_visualization, download_document, profile_member_visualization, avatars]\ntenantMaintenance=[tenant_platform_management, tenant_platform_visualization, download_document, avatars]\nprocesslistinguser=[profile_visualization, process_visualization, process_comment, process_categories, license, process_actor_mapping_visualization, organization_visualization, case_visualization, task_management, connector_visualization, tenant_platform_visualization, task_visualization, flownode_management, case_start, download_document, profile_member_visualization, form_visualization, bdm_visualization, form_file_upload, avatars]\nprocesslistingpm=[process_visualization, process_management, process_manager_management, flownode_management, tenant_platform_visualization, flownode_visualization, task_visualization, process_manager_visualization, process_comment, process_categories, document_visualization, license, process_actor_mapping_visualization, organization_visualization, activity_visualization, case_visualization, task_management, connector_visualization, download_document, form_visualization, form_management, bdm_visualization, form_file_upload, avatars]\ntasklistingadmin=[process_visualization, connector_management, flownode_management, tenant_platform_visualization, flownode_visualization, task_visualization, profile_visualization, process_categories, process_comment, license, process_actor_mapping_visualization, organization_visualization, case_visualization, task_management, connector_visualization, download_document, profile_member_visualization, form_visualization, bdm_visualization, form_file_upload, avatars]\nuserlistingadmin=[profile_visualization, process_comment, organization_visualization, tenant_platform_visualization, organization_management, download_document, profile_member_visualization, avatars]\nrolelistingadmin=[profile_visualization, process_comment, organization_visualization, tenant_platform_visualization, organization_management, download_document, profile_member_visualization, avatars]\ntasklistinguser=[profile_visualization, process_visualization, process_comment, process_categories, license, process_actor_mapping_visualization, organization_visualization, case_visualization, task_management, connector_visualization, tenant_platform_visualization, task_visualization, flownode_management, download_document, profile_member_visualization, form_visualization, form_file_upload, avatars]\nprofilelisting=[profile_visualization, process_comment, profile_management, organization_visualization, tenant_platform_visualization, organization_management, download_document, profile_member_visualization, profile_member_management, avatars]\ncaselistingadmin=[case_delete, process_visualization, connector_management, flownode_management, tenant_platform_visualization, flownode_visualization, task_visualization, case_management, profile_visualization, process_categories, process_comment, document_visualization, license, process_actor_mapping_visualization, organization_visualization, case_visualization, task_management, connector_visualization, download_document, profile_member_visualization, form_visualization, bdm_visualization, avatars]\nthememoredetailsadminext=[profile_visualization, look_and_feel, organization_visualization, tenant_platform_visualization, download_document, profile_member_visualization, avatars]\nprocesslistingadmin=[process_Enable, connector_management, process_management, tenant_platform_visualization, flownode_visualization, task_visualization, process_manager_visualization, process_disable, process_comment, document_visualization, process_actor_mapping_visualization, organization_visualization, case_visualization, process_actor_mapping_management, case_start_for, process_visualization, process_manager_management, flownode_management, process_deploy, profile_visualization, case_management, process_categories, license, activity_visualization, task_management, connector_visualization, download_document, profile_member_visualization, form_visualization, form_management, bdm_visualization, form_file_upload, avatars]\ntasklistingpm=[profile_visualization, process_visualization, process_comment, process_categories, process_actor_mapping_visualization, organization_visualization, case_visualization, task_management, flownode_management, connector_visualization, tenant_platform_visualization, flownode_visualization, task_visualization, download_document, profile_member_visualization, form_visualization, bdm_visualization, form_file_upload, avatars]\ncaselistingpm=[case_delete, process_visualization, process_categories, process_comment, document_visualization, process_actor_mapping_visualization, organization_visualization, case_visualization, task_management, flownode_management, connector_visualization, tenant_platform_visualization, flownode_visualization, task_visualization, download_document, form_visualization, bdm_visualization, avatars]\napplicationslistingadmin=[tenant_platform_visualization, application_management, application_visualization, organization_visualization, profile_visualization, download_document, profile_member_visualization, avatars]\nbusinessdatamodelimport=[bdm_management, tenant_platform_visualization, bdm_visualization, download_document, avatars]\ngrouplistingadmin=[profile_visualization, process_comment, organization_visualization, tenant_platform_visualization, organization_management, download_document, profile_member_visualization, avatars]\ncaselistinguser=[profile_visualization, process_visualization, process_comment, process_categories, license, process_actor_mapping_visualization, organization_visualization, case_visualization, task_management, connector_visualization, tenant_platform_visualization, task_visualization, flownode_management, download_document, profile_member_visualization, form_visualization, bdm_visualization, avatars]\nreportlistingadminext=[bpm_monitoring_management, process_Enable, connector_management, process_management, tenant_platform_visualization, flownode_visualization, task_visualization, process_manager_visualization, process_disable, process_comment, document_visualization, process_actor_mapping_visualization, organization_visualization, case_visualization, process_actor_mapping_management, case_start_for, process_visualization, bpm_monitoring_visualization, process_manager_management, flownode_management, process_deploy, profile_visualization, case_management, process_categories, license, activity_visualization, task_management, connector_visualization, download_document, profile_member_visualization, avatars]\ncustompage_groovyexample=[tenant_platform_visualization, profile_visualization, organization_visualization, avatars]\ncustompage_home=[tenant_platform_visualization, profile_visualization, organization_visualization, avatars]\ncustompage_defaultlayout=[tenant_platform_visualization, profile_visualization, organization_visualization, application_visualization, avatars]\ncustompage_apiExtensionViewer=[demo_permission, profile_visualization, tenant_platform_visualization, organization_visualization, avatars]\ncustompage_tasklist=[tenant_platform_visualization, task_visualization, task_management, process_visualization, case_visualization, form_visualization, process_comment, avatars]\n'),(0,'TENANT_TEMPLATE_PORTAL','console-config.properties','#This value represents MB, e.g 25 means 25MB.\nform.attachment.max.size                25\n#Set this value to true to reload the Index.groovy class every time a custom page is displayed\ncustom.page.debug                       false'),(0,'TENANT_TEMPLATE_PORTAL','custom-permissions-mapping.properties','##\n# Custom permissions file\n#\n# custom permissions can be defined like this\n# <type>|<identifier>=[<permission list>]\n#\n# type can be \'profile\' or \'user\'\n# identifier is the username or the profile name. Special characters like white space must be replaced with their unicode value (For example \\u0020 for the white space)\n# possible values for permissions can be found in the resources-permissions-mapping.properties file\n#\n##\n# example: the profile User have now the permission Organization management\n#profile|User=[organization_visualization]\n#profile|Process\\u0020manager=[organization_visualization]\n#\n# example: the user having username john have now the permission Organization management and Organization visualization\n#user|john=[organization_management, organization_visualization]'),(0,'TENANT_TEMPLATE_PORTAL','dynamic-permissions-checks.properties','##\n# Define dynamic check on resources\n#\n# If a dynamic check is defined on a resource it override the static check behavior\n# You can define dynamic rules like this:\n# <method>|<resource>=[<exclusions>, check <class name of the rule>]\n# exclusions is a list of elements like this: <type>|<identifier> where type is user or profile and identifier is the username or the profile name.\n# Special characters like white space must be replaced with their unicode value (For example \\u0020 for the white space)\n#\n# example: to protect a case to only users that can start the process and to william.jobs, walter.bates and all users having the Administrator or User profile\n# POST|bpm/case=[user|william.jobs, user|walter.bates, profile|Administrator, profile|Process\\u0020Manager, check|CasePermissionRule]\n#\n##\n# rules bellow are included by default in bonita and can be activated by uncommenting these lines\n## CasePermissionRule\n## Let a user access only cases that he is involved in and start cases that he can start\n#GET|bpm/case=[profile|Administrator, check|CasePermissionRule]\n#POST|bpm/case=[profile|Administrator, check|CasePermissionRule]\n#DELETE|bpm/case=[profile|Administrator, check|CasePermissionRule]\n#GET|bpm/archivedCase=[profile|Administrator, check|CasePermissionRule]\n#GET|bpm/case/*/context=[profile|Administrator, check|CaseContextPermissionRule]\n#GET|bpm/archivedCase/*/context=[profile|Administrator, check|CaseContextPermissionRule]\n#\n#\n## CaseVariablePermissionRule\n## Let a user get and update a variable of a case only if he is the process owner\n#GET|bpm/caseVariable=[profile|Administrator, check|CaseVariablePermissionRule]\n#PUT|bpm/caseVariable=[profile|Administrator, check|CaseVariablePermissionRule]\n#\n#\n## CommentPermissionRule\n## Let a user access only comments on cases that he is involved in\n#GET|bpm/comment=[profile|Administrator, check|CommentPermissionRule]\n#POST|bpm/comment=[profile|Administrator, check|CommentPermissionRule]\n#GET|bpm/archivedComment=[profile|Administrator, check|CommentPermissionRule]\n#\n#\n## DocumentPermissionRule\n## Let a user access only document on cases that he is involved in\n#GET|bpm/document=[profile|Administrator, check|DocumentPermissionRule]\n#POST|bpm/document=[profile|Administrator, check|DocumentPermissionRule]\n#PUT|bpm/document=[profile|Administrator, check|DocumentPermissionRule]\n#DELETE|bpm/document=[profile|Administrator, check|DocumentPermissionRule]\n#GET|bpm/archiveddocument=[profile|Administrator, check|DocumentPermissionRule]\n#GET|bpm/archivedCaseDocument=[profile|Administrator, check|DocumentPermissionRule]\n#GET|bpm/caseDocument=[profile|Administrator, check|DocumentPermissionRule]\n#POST|bpm/caseDocument=[profile|Administrator, check|DocumentPermissionRule]\n#PUT|bpm/caseDocument=[profile|Administrator, check|DocumentPermissionRule]\n#DELETE|bpm/caseDocument=[profile|Administrator, check|DocumentPermissionRule]\n#\n#\n## ProcessPermissionRule\n## Let the user do get only on processes he deployed or that he supervised\n#GET|bpm/process=[profile|Administrator, check|ProcessPermissionRule]\n#POST|bpm/process=[profile|Administrator, check|ProcessPermissionRule]\n#PUT|bpm/process=[profile|Administrator, check|ProcessPermissionRule]\n#DELETE|bpm/process=[profile|Administrator, check|ProcessPermissionRule]\n#GET|bpm/process/*/instantiation=[profile|Administrator, check|ProcessInstantiationPermissionRule]\n#POST|bpm/process/*/instantiation=[profile|Administrator, check|ProcessInstantiationPermissionRule]\n#\n#\n## ProcessResolutionProblemPermissionRule\n## Let a user see process resolution problem only if he is process owner\n#GET|bpm/processResolutionProblem=[profile|Administrator, check|ProcessResolutionProblemPermissionRule]\n#\n#\n## ProcessConfigurationPermissionRule\n## Let a user manage process connectors and parameters only if he is process owner\n#GET|bpm/processParameter=[profile|Administrator, check|ProcessConfigurationPermissionRule]\n#GET|bpm/processConnector=[profile|Administrator, check|ProcessConfigurationPermissionRule]\n#PUT|bpm/processConnector=[profile|Administrator, check|ProcessConfigurationPermissionRule]\n#\n#\n## ProcessConnectorDependencyPermissionRule\n## Let a user see process connector dependency problem only if he is process owner\n#GET|bpm/processConnectorDependency=[profile|Administrator, check|ProcessConnectorDependencyPermissionRule]\n#\n#\n## ActorPermissionRule\n## Let a user manage actors only if he is process owner\n#GET|bpm/actor=[profile|Administrator, check|ActorPermissionRule]\n#PUT|bpm/actor=[profile|Administrator, check|ActorPermissionRule]\n#\n#\n## ActorMemberPermissionRule\n## Let a user add an actorMember only if he is process owner\n#GET|bpm/actorMember=[profile|Administrator, check|ActorMemberPermissionRule]\n#POST|bpm/actorMember=[profile|Administrator, check|ActorMemberPermissionRule]\n#DELETE|bpm/actorMember=[profile|Administrator, profile|Process manager, check|ActorMemberPermissionRule]\n#\n#\n## ProcessSupervisorPermissionRule\n## Let a user view and add process only if he is process owner\n#GET|bpm/processSupervisor=[profile|Administrator, check|ProcessSupervisorPermissionRule]\n#POST|bpm/processSupervisor=[profile|Administrator, check|ProcessSupervisorPermissionRule]\n#DELETE|bpm/processSupervisor=[profile|Administrator, check|ProcessSupervisorPermissionRule]\n#\n#\n## TaskPermissionRule\n## Let a user access only tasks that are assigned or pending to him\n#GET|bpm/flowNode=[profile|Administrator, check|TaskPermissionRule]\n#PUT|bpm/flowNode=[profile|Administrator, check|TaskPermissionRule]\n#GET|bpm/activity=[profile|Administrator, check|TaskPermissionRule]\n#PUT|bpm/activity=[profile|Administrator, check|TaskPermissionRule]\n#GET|bpm/task=[profile|Administrator, check|TaskPermissionRule]\n#PUT|bpm/task=[profile|Administrator, check|TaskPermissionRule]\n#GET|bpm/humanTask=[profile|Administrator, check|TaskPermissionRule]\n#PUT|bpm/humanTask=[profile|Administrator, check|TaskPermissionRule]\n#GET|bpm/userTask=[profile|Administrator, check|TaskPermissionRule]\n#PUT|bpm/userTask=[profile|Administrator, check|TaskPermissionRule]\n#GET|bpm/hiddenUserTask=[profile|Administrator, check|TaskPermissionRule]\n#POST|bpm/hiddenUserTask=[profile|Administrator, check|TaskPermissionRule]\n#DELETE|bpm/hiddenUserTask=[profile|Administrator, check|TaskPermissionRule]\n#GET|bpm/manualTask=[profile|Administrator, check|TaskPermissionRule]\n#POST|bpm/manualTask=[profile|Administrator, check|TaskPermissionRule]\n#PUT|bpm/manualTask=[profile|Administrator, check|TaskPermissionRule]\n#GET|bpm/archivedFlowNode=[profile|Administrator, check|TaskPermissionRule]\n#GET|bpm/archivedActivity=[profile|Administrator, check|TaskPermissionRule]\n#GET|bpm/archivedTask=[profile|Administrator, check|TaskPermissionRule]\n#GET|bpm/archivedHumanTask=[profile|Administrator, check|TaskPermissionRule]\n#GET|bpm/archivedUserTask=[profile|Administrator, check|TaskPermissionRule]\n#GET|bpm/archivedManualTask=[profile|Administrator, check|TaskPermissionRule]\n#GET|bpm/archivedUserTask/*/context=[profile|Administrator, check|TaskExecutionPermissionRule]\n#GET|bpm/userTask/*/context=[profile|Administrator, check|TaskExecutionPermissionRule]\n#GET|bpm/userTask/*/contract=[profile|Administrator, check|TaskExecutionPermissionRule]\n#POST|bpm/userTask/*/execution=[profile|Administrator, check|TaskExecutionPermissionRule]\n#\n## ConnectorInstancePermissionRule\n## Let a user see process configuration only if he is process owner\n#GET|bpm/connectorInstance=[profile|Administrator, check|ConnectorInstancePermissionRule]\n#PUT|bpm/connectorInstance=[profile|Administrator, profile|Process manager, check|ConnectorInstancePermissionRule]\n#GET|bpm/archivedConnectorInstance=[profile|Administrator, check|ConnectorInstancePermissionRule]\n#GET|bpm/connectorFailure=[profile|Administrator, profile|Process manager]\n#\n#\n## UserPermissionRule\n## Let the user access and modify only himself\n#GET|identity/user=[profile|Administrator, profile|Process manager, check|UserPermissionRule]\n#POST|identity/user=[profile|Administrator, check|UserPermissionRule]\n#PUT|identity/user=[profile|Administrator, check|UserPermissionRule]\n#GET|identity/personalcontactdata=[profile|Administrator, check|UserPermissionRule]\n#POST|identity/personalcontactdata=[profile|Administrator, check|UserPermissionRule]\n#PUT|identity/personalcontactdata=[profile|Administrator, check|UserPermissionRule]\n#GET|identity/professionalcontactdata=[profile|Administrator, check|UserPermissionRule]\n#POST|identity/professionalcontactdata=[profile|Administrator, check|UserPermissionRule]\n#PUT|identity/professionalcontactdata=[profile|Administrator, check|UserPermissionRule]\n#\n#\n##ProfilePermissionRule\n## Secure profile related resources\n#GET|portal/profile=[profile|Administrator, check|ProfilePermissionRule]\n#POST|portal/profile=[profile|Administrator, check|ProfilePermissionRule]\n#PUT|portal/profile=[profile|Administrator, check|ProfilePermissionRule]\n#DELETE|portal/profile=[profile|Administrator, check|ProfilePermissionRule]\n#\n#\n##ProfileEntryPermissionRule\n## Secure profile related resources\n#GET|portal/profileEntry=[profile|Administrator, check|ProfileEntryPermissionRule]\n#POST|portal/profileEntry=[profile|Administrator, check|ProfileEntryPermissionRule]\n#PUT|portal/profileEntry=[profile|Administrator, check|ProfileEntryPermissionRule]\n#DELETE|portal/profileEntry=[profile|Administrator, check|ProfileEntryPermissionRule]\n#\n#\n##Servlets\n#GET|portal/documentDownload=[profile|Administrator, check|DocumentPermissionRule]\n#GET|portal/formsDocumentDownload=[profile|Administrator, check|DocumentPermissionRule]\n#GET|portal/downloadDocument=[profile|Administrator, check|DocumentPermissionRule]\n'),(0,'TENANT_TEMPLATE_PORTAL','forms-config.properties','forms.user-xp.url                       /bonita\nforms.default.application.layout        html/bonita_process_default.html\nforms.default.page.template             html/bonita_page_default.html\nforms.default.page.template.error       html/bonita_default_error.html\nforms.default.page.template.confirm     html/bonita_default_confirm.html\nforms.default.page.maxwidget            5\nforms.default.date.format               MMMM dd, yyyy\nforms.cache.processes.size              15\nforms.cache.process.ttl                 300000\nforms.cache.languages.size              5\nform.service.provider                   org.bonitasoft.forms.server.provider.impl.FormServiceProviderImpl\n#This value represents MB, e.g 15 means 15MB.\nform.attachment.max.size                15\nform.generation.auto                    true\nform.action.condition.enabled           true\nform.authorizations.manager.allowed     false\n'),(0,'TENANT_TEMPLATE_PORTAL','resources-permissions-mapping.properties','##\n# Define which permissions are needed to access resources using the REST API\n# Resource permissions can be defined like this\n# <verb>|<api name>/<resource name>/<id>=[<resource permission list>]\n#\n# verb can be \'GET\', \'POST\', \'PUT\' or \'DELETE\'\n#\n##\n# example of a default resource permission:\n# GET|identity/user=[organization_visualization]\n# It means that in order to GET user information, the logged user needs to have the organization_visualization permission.\n#\n# example of a custom resource permission:\n# GET|identity/user/3=[my_custom_permission]\n# It means that in order to GET the information of the user with id 3, the logged user needs to have my_custom_permission.\n##\n\n# Identity resources\nGET|identity/user=[organization_visualization]\nPOST|identity/user=[organization_management]\nPUT|identity/user=[organization_management]\nDELETE|identity/user=[organization_management]\nGET|identity/personalcontactdata=[organization_visualization]\nPOST|identity/personalcontactdata=[organization_management]\nPUT|identity/personalcontactdata=[organization_management]\nGET|identity/professionalcontactdata=[organization_visualization]\nPOST|identity/professionalcontactdata=[organization_management]\nPUT|identity/professionalcontactdata=[organization_management]\nGET|identity/role=[organization_visualization]\nPOST|identity/role=[organization_management]\nPUT|identity/role=[organization_management]\nDELETE|identity/role=[organization_management]\nGET|identity/group=[organization_visualization]\nPOST|identity/group=[organization_management]\nPUT|identity/group=[organization_management]\nDELETE|identity/group=[organization_management]\nGET|identity/membership=[organization_visualization]\nPOST|identity/membership=[organization_management]\nPUT|identity/membership=[organization_management]\nDELETE|identity/membership=[organization_management]\nGET|customuserinfo/user=[organization_visualization]\nGET|customuserinfo/definition=[organization_visualization]\nPOST|customuserinfo/definition=[organization_management]\nDELETE|customuserinfo/definition=[organization_management]\nGET|customuserinfo/value=[organization_visualization]\nPUT|customuserinfo/value=[organization_management]\n\n# BPM resources\nGET|bpm/process=[process_visualization, process_categories, process_actor_mapping_visualization, connector_visualization]\nPOST|bpm/process=[process_deploy]\nPUT|bpm/process=[case_start_for, process_actor_mapping_management, process_Enable, process_disable, process_management, process_categories, connector_management]\nDELETE|bpm/process=[process_deploy]\nGET|bpm/process/*/contract=[process_visualization]\nPOST|bpm/process/*/instantiation=[case_start, case_management]\nGET|bpm/processConnector=[connector_visualization, process_management]\nPUT|bpm/processConnector=[connector_management, process_management]\nGET|bpm/processConnectorDependency=[connector_visualization, process_management]\nPOST|bpm/processCategory=[process_management, process_categories]\nDELETE|bpm/processCategory=[process_management, process_categories]\nGET|bpm/processParameter=[process_management]\nPUT|bpm/processParameter=[process_management]\nGET|bpm/processSupervisor=[process_manager_visualization]\nPOST|bpm/processSupervisor=[process_manager_management]\nDELETE|bpm/processSupervisor=[process_manager_management]\nGET|bpm/actor=[process_visualization]\nGET|bpm/actorMember=[process_visualization, process_manager_visualization]\nPOST|bpm/actorMember=[process_management, process_manager_management]\nPUT|bpm/actorMember=[process_management, process_manager_management]\nDELETE|bpm/actorMember=[process_management, process_manager_management]\nGET|bpm/category=[process_categories]\nPOST|bpm/category=[process_categories]\nPUT|bpm/category=[process_categories]\nDELETE|bpm/category=[process_categories]\nGET|bpm/processResolutionProblem=[activity_visualization, flownode_visualization]\nGET|bpm/case=[case_visualization]\nPOST|bpm/case=[case_start, case_management]\nDELETE|bpm/case=[case_delete]\nGET|bpm/case/*/context=[case_visualization]\nGET|bpm/caseInfo=[case_visualization]\nGET|bpm/comment=[process_comment]\nPOST|bpm/comment=[process_comment]\nGET|bpm/archivedComment=[process_comment]\nGET|bpm/archivedCase=[case_visualization]\nDELETE|bpm/archivedCase=[case_delete]\nGET|bpm/archivedCase/*/context=[case_visualization]\nGET|bpm/caseVariable=[case_visualization]\nPUT|bpm/caseVariable=[case_management]\nGET|bpm/caseDocument=[document_visualization, case_visualization]\nPOST|bpm/caseDocument=[document_management, case_management]\nDELETE|bpm/caseDocument=[document_management, case_management]\nPUT|bpm/caseDocument=[document_management, case_management]\nGET|bpm/flowNode=[flownode_visualization]\nPUT|bpm/flowNode=[flownode_management]\nGET|bpm/activity=[flownode_visualization]\nPUT|bpm/activity=[flownode_management]\nGET|bpm/task=[flownode_visualization]\nPUT|bpm/task=[flownode_management]\nGET|bpm/humanTask=[task_visualization]\nPUT|bpm/humanTask=[task_management]\nGET|bpm/userTask=[task_visualization]\nPUT|bpm/userTask=[task_management]\nPOST|bpm/userTask=[task_management]\nGET|bpm/userTask/*/contract=[task_visualization]\nGET|bpm/userTask/*/context=[task_visualization]\nPOST|bpm/userTask/*/execution=[task_management]\nGET|bpm/manualTask=[task_visualization]\nPOST|bpm/manualTask=[task_management]\nPUT|bpm/manualTask=[task_management]\nGET|bpm/activityVariable=[flownode_visualization]\nGET|bpm/connectorInstance=[connector_visualization]\nPUT|bpm/connectorInstance=[connector_management]\nGET|bpm/archivedFlowNode=[flownode_visualization]\nGET|bpm/archivedActivity=[flownode_visualization]\nGET|bpm/archivedTask=[flownode_visualization]\nGET|bpm/archivedHumanTask=[task_visualization]\nGET|bpm/archivedUserTask=[task_visualization]\nGET|bpm/archivedUserTask/*/context=[task_visualization]\nGET|bpm/archivedManualTask=[task_visualization]\nGET|bpm/archivedConnectorInstance=[connector_visualization]\nGET|bpm/document=[document_visualization, case_visualization]\nPOST|bpm/document=[document_management, case_management]\nPUT|bpm/document=[document_management, case_management]\nDELETE|bpm/document=[document_management, case_management]\nGET|bpm/archiveddocument=[document_visualization, case_visualization]\nGET|bpm/archivedCaseDocument=[document_visualization, case_visualization]\nDELETE|bpm/archivedCaseDocument=[document_management, case_management]\nGET|bpm/command=[command_visualization]\nPOST|bpm/command=[command_management]\nPUT|bpm/command=[command_management]\nDELETE|bpm/command=[command_management]\nGET|bpm/connectorFailure=[connector_visualization]\nGET|bpm/timerEventTrigger=[flownode_visualization]\nPUT|bpm/timerEventTrigger=[flownode_management]\nGET|bpm/diagram=[process_visualization]\n\n# Portal resources\nGET|portal/profile=[profile_visualization]\nPOST|portal/profile=[profile_management]\nPUT|portal/profile=[profile_management]\nDELETE|portal/profile=[profile_management]\nGET|portal/bonitaPage=[profile_visualization]\nGET|portal/page=[profile_visualization]\nPOST|portal/page=[profile_management]\nPUT|portal/page=[profile_management]\nDELETE|portal/page=[profile_management]\nGET|portal/profileEntry=[profile_visualization]\nPOST|portal/profileEntry=[profile_management]\nPUT|portal/profileEntry=[profile_management]\nDELETE|portal/profileEntry=[profile_management]\nGET|portal/profileMember=[profile_member_visualization]\nPOST|portal/profileMember=[profile_member_management]\nDELETE|portal/profileMember=[profile_member_management]\nPOST|portal/theme=[look_and_feel]\nPUT|portal/theme=[look_and_feel]\n# Deprecated APIs\nGET|userXP/profile=[profile_visualization]\nPOST|userXP/profile=[profile_management]\nPUT|userXP/profile=[profile_management]\nDELETE|userXP/profile=[profile_management]\nGET|userXP/profileEntry=[profile_visualization]\nPOST|userXP/profileEntry=[profile_management]\nPUT|userXP/profileEntry=[profile_management]\nDELETE|userXP/profileEntry=[profile_management]\nGET|userXP/profileMember=[profile_member_visualization]\nPOST|userXP/profileMember=[profile_member_management]\nDELETE|userXP/profileMember=[profile_member_management]\nGET|userXP/bonitaPage=[profile_visualization]\nPOST|userXP/theme=[look_and_feel]\nPUT|userXP/theme=[look_and_feel]\n\n\n# Platform resources\nGET|system/session=[tenant_platform_visualization]\nGET|system/log=[tenant_platform_visualization]\nGET|system/tenant=[tenant_platform_visualization]\nPUT|system/tenant=[tenant_platform_management]\nGET|system/feature=[tenant_platform_visualization]\nGET|system/license=[license]\nGET|system/monitoring=[tenant_platform_visualization]\nGET|system/i18nlocale=[tenant_platform_visualization]\nGET|system/i18ntranslation=[tenant_platform_visualization]\nGET|monitoring/report=[bpm_monitoring_visualization]\nPOST|monitoring/report=[bpm_monitoring_management]\nDELETE|monitoring/report=[bpm_monitoring_management]\nGET|platform/platform=[tenant_platform_visualization]\nPOST|platform/platform=[tenant_platform_management]\nPUT|platform/platform=[tenant_platform_management]\nDELETE|platform/platform=[tenant_platform_management]\nGET|platform/jvmDynamic=[tenant_platform_visualization]\nGET|platform/jvmStatic=[tenant_platform_visualization]\nGET|platform/systemProperty=[tenant_platform_visualization]\nGET|platform/tenant=[tenant_platform_visualization]\nPOST|platform/tenant=[tenant_platform_management]\nPUT|platform/tenant=[tenant_platform_management]\nDELETE|platform/tenant=[tenant_platform_management]\nGET|platform/license=[platform_management]\nPOST|tenant/bdm=[bdm_management]\n\n# Living apps\nGET|living/application=[application_visualization]\nPOST|living/application=[application_management]\nPUT|living/application=[application_management]\nDELETE|living/application=[application_management]\nGET|living/application-page=[application_visualization]\nPOST|living/application-page=[application_management]\nPUT|living/application-page=[application_management]\nDELETE|living/application-page=[application_management]\nGET|living/application-menu=[application_visualization]\nPOST|living/application-menu=[application_management]\nPUT|living/application-menu=[application_management]\nDELETE|living/application-menu=[application_management]\n\n# BDM resources\nGET|bdm/businessData=[bdm_visualization]\nGET|bdm/businessDataReference=[bdm_visualization]\nGET|bdm/businessDataQuery=[bdm_visualization]\n\n# Form resources\nGET|form/mapping=[form_visualization]\nPUT|form/mapping=[form_management]\n\n# Servlets\nPOST|API/formFileUpload=[form_file_upload]\nPOST|portal/custom-page/API/formFileUpload=[form_file_upload]\nGET|API/avatars=[avatars]\nGET|portal/custom-page/API/avatars=[avatars]\nGET|API/documentDownload=[download_document]\nGET|portal/custom-page/API/documentDownload=[download_document]\nGET|portal/documentDownload=[download_document]\nGET|API/formsDocumentImage=[download_document]\nGET|portal/custom-page/API/formsDocumentImage=[download_document]\nGET|portal/formsDocumentImage=[download_document]\nGET|portal/custom-page/API/formsDocumentDownload=[download_document]\nGET|portal/formsDocumentDownload=[download_document]\n# Deprecated\nGET|portal/downloadDocument=[download_document]\nGET|portal/custom-page/API/downloadDocument=[download_document]\n\n# api extension examples\nGET|extension/demo/getExample=[demoPermission]\nGET|extension/demo/headerExample=[demoPermission]\nGET|extension/demo/logExample=[demoPermission]\nGET|extension/demo/soapExample=[demoPermission]\nGET|extension/demo/xmlExample=[demoPermission]\nPOST|extension/demo/postExample=[demoPermission]\n'),(0,'TENANT_TEMPLATE_PORTAL','security-config.properties','#It declares a Password Validator class, the default value can be changed according to your needs\nsecurity.password.validator org.bonitasoft.web.rest.server.api.organization.password.validator.DefaultPasswordValidator\n#Setting this value to false will deactivate the permissions checks on the REST API\nsecurity.rest.api.authorizations.check.enabled true\n#Set this value to true to reload the properties files and groovy classes every time they change (you sill need to logout and login if you add new custom permissions to a user)\nsecurity.rest.api.authorizations.check.debug   false\n'),(0,'TENANT_TEMPLATE_SECURITY_SCRIPTS','ActorMemberPermissionRule.groovy','/**\n * Copyright (C) 2014 BonitaSoft S.A.\n * BonitaSoft, 32 rue Gustave Eiffel - 38000 Grenoble\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 2.0 of the License, or\n * (at your option) any later version.\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n **/\n\n\nimport com.fasterxml.jackson.databind.ObjectMapper\nimport org.bonitasoft.engine.api.APIAccessor\nimport org.bonitasoft.engine.api.Logger\nimport org.bonitasoft.engine.api.permission.APICallContext\nimport org.bonitasoft.engine.api.permission.PermissionRule\nimport org.bonitasoft.engine.exception.NotFoundException\nimport org.bonitasoft.engine.session.APISession\n\n/**\n *\n * Let a user add an actorMember only if he is process owner\n *\n * <ul>\n *     <li>bpm/actorMember</li>\n *     <li>bpm/delegation</li>\n * </ul>\n *\n *\n *\n * @author Baptiste Mesta\n */\nclass ActorMemberPermissionRule implements PermissionRule {\n\n    public static final String ACTOR_ID = \"actor_id\"\n\n    @Override\n    public boolean isAllowed(APISession apiSession, APICallContext apiCallContext, APIAccessor apiAccessor, Logger logger) {\n        long currentUserId = apiSession.getUserId();\n        if (apiCallContext.isPOST()) {\n            return checkPostMethod(apiCallContext, apiAccessor, currentUserId, logger)\n        } else if (apiCallContext.isGET()) {\n            return checkGetMethod(apiCallContext, apiAccessor, currentUserId, logger)\n        } else if (apiCallContext.isDELETE()) {\n            //TODO unable to find an actor member with the API!\n            return false\n        }\n        //it\'s ok to read\n        return true\n    }\n\n    private boolean checkPostMethod(APICallContext apiCallContext, APIAccessor apiAccessor, long currentUserId, Logger logger) {\n\n        ObjectMapper mapper = new ObjectMapper();\n        def list = mapper.readValue(apiCallContext.getBody(), List.class)\n\n        for (int i = 0; i < list.size(); i++) {\n            def object = list.get(i)\n\n            def get = object.get(ACTOR_ID)\n            if(get == null){\n                continue\n            }\n            def actorId = Long.valueOf(get.toString())\n            if (actorId <= 0) {\n                continue\n            }\n            def processAPI = apiAccessor.getProcessAPI()\n            try {\n                def actor = processAPI.getActor(actorId)\n                def processDefinitionId = actor.getProcessDefinitionId()\n                if (!processAPI.isUserProcessSupervisor(processDefinitionId, currentUserId)) {\n                    return false\n                }\n            } catch (NotFoundException e) {\n                return true\n            }\n        }\n        return true\n    }\n\n    private boolean checkGetMethod(APICallContext apiCallContext, APIAccessor apiAccessor, long currentUserId, Logger logger) {\n        try {\n            def filters = apiCallContext.getFilters()\n            if (filters.containsKey(ACTOR_ID)) {\n                def processAPI = apiAccessor.getProcessAPI()\n                def actor = processAPI.getActor(Long.parseLong(filters.get(ACTOR_ID)))\n                def processDefinitionId = actor.getProcessDefinitionId()\n                return processAPI.isUserProcessSupervisor(processDefinitionId, currentUserId)\n            }\n            return true\n        } catch (NotFoundException e) {\n            return true\n        }\n    }\n}\n'),(0,'TENANT_TEMPLATE_SECURITY_SCRIPTS','ActorPermissionRule.groovy','/**\n * Copyright (C) 2014 BonitaSoft S.A.\n * BonitaSoft, 32 rue Gustave Eiffel - 38000 Grenoble\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 2.0 of the License, or\n * (at your option) any later version.\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n **/\n\n\nimport org.bonitasoft.engine.api.APIAccessor\nimport org.bonitasoft.engine.api.Logger\nimport org.bonitasoft.engine.api.permission.APICallContext\nimport org.bonitasoft.engine.api.permission.PermissionRule\nimport org.bonitasoft.engine.bpm.actor.ActorNotFoundException\nimport org.bonitasoft.engine.session.APISession\n\n/**\n *\n * Let a user manage actors only if he is process owner\n *\n * <ul>\n *     <li>bpm/actor</li>\n * </ul>\n *\n *\n *\n * @author Anthony Birembaut\n */\nclass ActorPermissionRule implements PermissionRule {\n\n    public static final String PROCESS_ID = \"process_id\"\n\n    @Override\n    public boolean isAllowed(APISession apiSession, APICallContext apiCallContext, APIAccessor apiAccessor, Logger logger) {\n        long currentUserId = apiSession.getUserId()\n        if (apiCallContext.isGET()) {\n            return checkGetMethod(apiCallContext, apiAccessor, currentUserId, logger)\n        } else if (apiCallContext.isPUT()) {\n            return checkPutMethod(apiCallContext, apiAccessor, currentUserId, logger)\n        }\n        return true\n    }\n\n    private boolean checkGetMethod(APICallContext apiCallContext, APIAccessor apiAccessor, long currentUserId, Logger logger) {\n        def resourceId = apiCallContext.getResourceId()\n        if (resourceId == null || resourceId.isEmpty()) {\n            def filters = apiCallContext.getFilters()\n            if(filters.containsKey(PROCESS_ID)){\n                def processAPI = apiAccessor.getProcessAPI()\n                return processAPI.isUserProcessSupervisor(Long.valueOf(filters.get(PROCESS_ID)),currentUserId)\n            }\n            return true\n        } else {\n            try {\n                return isProcessOwnerOfTheProcess(apiAccessor, resourceId, currentUserId)\n            } catch (ActorNotFoundException e) {\n                logger.debug(\"actor does not exists\")\n            }\n            return true\n        }\n    }\n\n    private boolean checkPutMethod(APICallContext apiCallContext, APIAccessor apiAccessor, long currentUserId, Logger logger) {\n        def resourceId = apiCallContext.getResourceId()\n        try {\n            return isProcessOwnerOfTheProcess(apiAccessor, resourceId, currentUserId)\n        } catch (ActorNotFoundException e) {\n            logger.debug(\"actor does not exists\")\n            return true\n        }\n    }\n\n    private isProcessOwnerOfTheProcess(APIAccessor apiAccessor, String actorId, long currentUserId) throws ActorNotFoundException {\n        def processAPI = apiAccessor.getProcessAPI()\n        def actor = processAPI.getActor(Long.valueOf(actorId))\n        return processAPI.isUserProcessSupervisor(actor.getProcessDefinitionId(), currentUserId)\n    }\n}\n'),(0,'TENANT_TEMPLATE_SECURITY_SCRIPTS','CaseContextPermissionRule.groovy','/**\n * Copyright (C) 2015 BonitaSoft S.A.\n * BonitaSoft, 32 rue Gustave Eiffel - 38000 Grenoble\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 2.0 of the License, or\n * (at your option) any later version.\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n **/\n\n\nimport com.fasterxml.jackson.databind.ObjectMapper\n\nimport org.bonitasoft.engine.api.APIAccessor\nimport org.bonitasoft.engine.api.Logger\nimport org.bonitasoft.engine.api.permission.APICallContext\nimport org.bonitasoft.engine.api.permission.PermissionRule\nimport org.bonitasoft.engine.bpm.process.ArchivedProcessInstancesSearchDescriptor\nimport org.bonitasoft.engine.exception.BonitaException;\nimport org.bonitasoft.engine.exception.NotFoundException\nimport org.bonitasoft.engine.identity.User\nimport org.bonitasoft.engine.identity.UserSearchDescriptor\nimport org.bonitasoft.engine.search.SearchOptionsBuilder\nimport org.bonitasoft.engine.search.SearchResult\nimport org.bonitasoft.engine.session.APISession\n\n/**\n *\n * Let a user access only cases that he is involved in and start cases that he can start\n *\n * <ul>\n *     <li>bpm/case/[id]/context</li>\n *     <li>bpm/archivedCase/[id]/context</li>\n * </ul>\n *\n *\n *\n * @author Anthony Birembaut\n */\nclass CaseContextPermissionRule implements PermissionRule {\n\n\n    @Override\n    public boolean isAllowed(APISession apiSession, APICallContext apiCallContext, APIAccessor apiAccessor, Logger logger) {\n        long currentUserId = apiSession.getUserId();\n        def processAPI = apiAccessor.getProcessAPI()\n        try {\n            def caseId = getCaseId(apiCallContext)\n            if (caseId <= 0) {\n                return true\n            }\n            // isInvolvedInProcessInstance() already checks the archived and non-archived involvement:\n            def isInvolved = processAPI.isInvolvedInProcessInstance(currentUserId, caseId) || processAPI.isManagerOfUserInvolvedInProcessInstance(currentUserId, caseId)\n            if (isInvolved) {\n                return true;\n            }\n            def processDefinitionId;\n            if (apiCallContext.getResourceName().startsWith(\"archived\")) {\n                processDefinitionId = processAPI.getArchivedProcessInstance(caseId).getProcessDefinitionId()\n            } else {\n                processDefinitionId = processAPI.getProcessInstance(caseId).getProcessDefinitionId()\n            }\n            return processAPI.isUserProcessSupervisor(processDefinitionId, currentUserId)\n        } catch (BonitaException e) {\n            //exception, allow user to have the 404 when the rest api will look for the resource:\n            return true\n        }\n    }\n    \n    private long getCaseId(APICallContext apiCallContext) {\n        def compoundResourceId = apiCallContext.getCompoundResourceId()\n        if (compoundResourceId == null || compoundResourceId.isEmpty()) {\n            return -1L\n        }\n        return Long.valueOf(compoundResourceId.get(0))\n    }\n}\n'),(0,'TENANT_TEMPLATE_SECURITY_SCRIPTS','CasePermissionRule.groovy','/**\n * Copyright (C) 2014 BonitaSoft S.A.\n * BonitaSoft, 32 rue Gustave Eiffel - 38000 Grenoble\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 2.0 of the License, or\n * (at your option) any later version.\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n **/\n\n\nimport com.fasterxml.jackson.databind.ObjectMapper\n\nimport org.bonitasoft.engine.api.APIAccessor\nimport org.bonitasoft.engine.api.Logger\nimport org.bonitasoft.engine.api.ProcessAPI\nimport org.bonitasoft.engine.api.permission.APICallContext\nimport org.bonitasoft.engine.api.permission.PermissionRule\nimport org.bonitasoft.engine.bpm.process.ArchivedProcessInstancesSearchDescriptor\nimport org.bonitasoft.engine.exception.BonitaException;\nimport org.bonitasoft.engine.exception.NotFoundException\nimport org.bonitasoft.engine.identity.User\nimport org.bonitasoft.engine.identity.UserSearchDescriptor\nimport org.bonitasoft.engine.search.SearchOptionsBuilder\nimport org.bonitasoft.engine.search.SearchResult\nimport org.bonitasoft.engine.session.APISession\n\n/**\n *\n * Let a user access only cases that he is involved in and start cases that he can start\n *\n * <ul>\n *     <li>bpm/case</li>\n *     <li>bpm/archivedCase</li>\n * </ul>\n *\n *\n *\n * @author Baptiste Mesta\n * @author Anthony Birembaut\n */\nclass CasePermissionRule implements PermissionRule {\n\n\n    @Override\n    public boolean isAllowed(APISession apiSession, APICallContext apiCallContext, APIAccessor apiAccessor, Logger logger) {\n        long currentUserId = apiSession.getUserId();\n        if (apiCallContext.isGET()) {\n            return checkGetMethod(apiCallContext, apiAccessor, currentUserId, logger)\n        } else if (apiCallContext.isPOST()) {\n            return checkPostMethod(apiCallContext, apiAccessor, currentUserId, logger)\n        }\n        return false\n    }\n\n    private boolean checkPostMethod(APICallContext apiCallContext, APIAccessor apiAccessor, long currentUserId, Logger logger) {\n\n        ObjectMapper mapper = new ObjectMapper();\n        def map = mapper.readValue(apiCallContext.getBody(), Map.class)\n\n        def string = map.get(\"processDefinitionId\")\n        if (string == null || string.toString().isEmpty()) {\n            return true;\n        }\n        def processDefinitionId = Long.valueOf(string.toString())\n        if (processDefinitionId <= 0) {\n            return true;\n        }\n        def processAPI = apiAccessor.getProcessAPI()\n        def identityAPI = apiAccessor.getIdentityAPI()\n        User user = identityAPI.getUser(currentUserId);\n        SearchOptionsBuilder searchOptionBuilder = new SearchOptionsBuilder(0, 10);\n        searchOptionBuilder.filter(UserSearchDescriptor.USER_NAME, user.getUserName());\n        SearchResult<User> listUsers = processAPI.searchUsersWhoCanStartProcessDefinition(processDefinitionId, searchOptionBuilder.done());\n        logger.debug(\"RuleCase : nb Result [\" + listUsers.getCount() + \"] ?\");\n        def canStart = listUsers.getCount() == 1\n        logger.debug(\"RuleCase : User allowed to start? \" + canStart)\n        return canStart\n    }\n    \n    private boolean isInvolved(ProcessAPI processAPI, long currentUserId, long processInstanceId) {\n        return processAPI.isInvolvedInProcessInstance(currentUserId, processInstanceId) || processAPI.isManagerOfUserInvolvedInProcessInstance(currentUserId, processInstanceId)\n    }\n\n    private boolean checkGetMethod(APICallContext apiCallContext, APIAccessor apiAccessor, long currentUserId, Logger logger) {\n        def processAPI = apiAccessor.getProcessAPI()\n        def filters = apiCallContext.getFilters()\n        try {\n            if (apiCallContext.getResourceId() != null) {\n                def processDefinitionId;\n                if (apiCallContext.getResourceName().startsWith(\"archived\")) {\n                    def archivedProcessInstanceId = Long.valueOf(apiCallContext.getResourceId())\n                    def archivedProcessInstance = processAPI.getArchivedProcessInstance(archivedProcessInstanceId)\n                    def processInstanceId = archivedProcessInstance.getSourceObjectId()\n                    if (isInvolved(processAPI, currentUserId, processInstanceId)) {\n                        return true;\n                    }\n                    processDefinitionId = archivedProcessInstance.getProcessDefinitionId()\n                } else {\n                    def processInstanceId = Long.valueOf(apiCallContext.getResourceId())\n                    if (isInvolved(processAPI, currentUserId, processInstanceId)) {\n                        return true;\n                    }\n                    processDefinitionId = processAPI.getProcessInstance(processInstanceId).getProcessDefinitionId()\n                }\n                logger.debug(\"RuleCase : allowed because get on process that user is involved in\")\n                return processAPI.isUserProcessSupervisor(processDefinitionId, currentUserId)\n            } else {\n                def stringUserId = String.valueOf(currentUserId)\n                if (stringUserId.equals(filters.get(\"started_by\")) || stringUserId.equals(filters.get(\"user_id\")) || stringUserId.equals(filters.get(\"supervisor_id\"))) {\n                    logger.debug(\"RuleCase : allowed because searching filters contains user id\")\n                    return true\n                }\n                if (filters.containsKey(\"processDefinitionId\")) {\n                    return processAPI.isUserProcessSupervisor(Long.valueOf(filters.get(\"processDefinitionId\")), currentUserId)\n                }\n                if (\"archivedCase\".equals(apiCallContext.getResourceName()) && filters.containsKey(\"sourceObjectId\")) {\n                    def sourceCase = Long.valueOf(filters.get(\"sourceObjectId\"))\n                    final SearchOptionsBuilder opts = new SearchOptionsBuilder(0, 1);\n                    opts.filter(ArchivedProcessInstancesSearchDescriptor.SOURCE_OBJECT_ID, sourceCase);\n                    def result = processAPI.searchArchivedProcessInstancesInvolvingUser(currentUserId, opts.done())\n                    def archivedProcessInstance = processAPI.getFinalArchivedProcessInstance(sourceCase)\n                    return result.getCount() == 1 || processAPI.isUserProcessSupervisor(archivedProcessInstance.getProcessDefinitionId(), currentUserId)\n                }\n            }\n        } catch (BonitaException e) {\n            //exception, allow user to have the 404 when the rest api will look for the resource:\n            return true\n        }\n        return false;\n    }\n}\n'),(0,'TENANT_TEMPLATE_SECURITY_SCRIPTS','CaseVariablePermissionRule.groovy','/**\n * Copyright (C) 2014 BonitaSoft S.A.\n * BonitaSoft, 32 rue Gustave Eiffel - 38000 Grenoble\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 2.0 of the License, or\n * (at your option) any later version.\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n **/\n\n\n\n\nimport org.bonitasoft.engine.api.APIAccessor\nimport org.bonitasoft.engine.api.Logger\nimport org.bonitasoft.engine.api.permission.APICallContext\nimport org.bonitasoft.engine.api.permission.PermissionRule\nimport org.bonitasoft.engine.exception.NotFoundException\nimport org.bonitasoft.engine.session.APISession\n\n/**\n *\n * Let a user get and update a variable of a case only if he is the process owner\n *\n * <ul>\n *     <li>bpm/caseVariable</li>\n * </ul>\n *\n *\n *\n * @author Baptiste Mesta\n */\nclass CaseVariablePermissionRule implements PermissionRule {\n\n\n    @Override\n    public boolean isAllowed(APISession apiSession, APICallContext apiCallContext, APIAccessor apiAccessor, Logger logger) {\n        long currentUserId = apiSession.getUserId();\n        def resourceId = apiCallContext.getResourceId()\n        def processAPI = apiAccessor.getProcessAPI()\n        try {\n            if ((apiCallContext.isPUT() || apiCallContext.isGET()) && resourceId != null) {\n                // Resource format: <processInstanceId>/<caseVariableName>\n                def caseId = Long.valueOf(resourceId.tokenize(\"/\").first())\n                def processInstance = processAPI.getProcessInstance(caseId)\n                return processAPI.isUserProcessSupervisor(processInstance.getProcessDefinitionId(), currentUserId)\n            }\n\n            def filters = apiCallContext.getFilters()\n            if (apiCallContext.isGET() && filters.containsKey(\"case_id\")) {\n                def caseId = Long.valueOf(filters.get(\"case_id\"))\n                def processInstance = processAPI.getProcessInstance(caseId)\n                return processAPI.isUserProcessSupervisor(processInstance.getProcessDefinitionId(), currentUserId)\n            }\n            return false\n        } catch (NotFoundException e) {\n            return true\n        }\n    }\n}\n'),(0,'TENANT_TEMPLATE_SECURITY_SCRIPTS','CommentPermissionRule.groovy','/**\n * Copyright (C) 2014 BonitaSoft S.A.\n * BonitaSoft, 32 rue Gustave Eiffel - 38000 Grenoble\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 2.0 of the License, or\n * (at your option) any later version.\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n **/\n\nimport com.fasterxml.jackson.databind.ObjectMapper\n\nimport org.bonitasoft.engine.api.APIAccessor\nimport org.bonitasoft.engine.api.Logger\nimport org.bonitasoft.engine.api.ProcessAPI\nimport org.bonitasoft.engine.api.permission.APICallContext\nimport org.bonitasoft.engine.api.permission.PermissionRule\nimport org.bonitasoft.engine.bpm.process.ArchivedProcessInstancesSearchDescriptor\nimport org.bonitasoft.engine.exception.BonitaException;\nimport org.bonitasoft.engine.exception.NotFoundException\nimport org.bonitasoft.engine.search.SearchOptionsBuilder\nimport org.bonitasoft.engine.session.APISession\n\n/**\n *\n * Let a user access only comments on cases that he is involved in\n *\n * <ul>\n *     <li>bpm/comment</li>\n *     <li>bpm/archivedComment</li>\n * </ul>\n *\n *\n *\n * @author Baptiste Mesta\n */\nclass CommentPermissionRule implements PermissionRule {\n\n\n    @Override\n    public boolean isAllowed(APISession apiSession, APICallContext apiCallContext, APIAccessor apiAccessor, Logger logger) {\n        long currentUserId = apiSession.getUserId();\n        if (apiCallContext.isGET()) {\n            return checkGetMethod(apiCallContext, apiAccessor, currentUserId)\n        } else if (apiCallContext.isPOST()) {\n            return checkPostMethod(apiCallContext, apiAccessor, currentUserId, logger)\n        }\n        return false\n    }\n\n    private boolean checkPostMethod(APICallContext apiCallContext, APIAccessor apiAccessor, long currentUserId, Logger logger) {\n\n        ObjectMapper mapper = new ObjectMapper();\n        def map = mapper.readValue(apiCallContext.getBody(), Map.class)\n\n        def string = map.get(\"processInstanceId\")\n        if (string == null || string.toString().isEmpty()) {\n            return true;\n        }\n        def processInstanceId = Long.valueOf(string.toString())\n        if (processInstanceId <= 0) {\n            return true;\n        }\n        def processAPI = apiAccessor.getProcessAPI()\n        return isInvolved(processAPI, currentUserId, processInstanceId) || isSupervisor(processAPI, processInstanceId, currentUserId)\n    }\n\n    private boolean checkGetMethod(APICallContext apiCallContext, APIAccessor apiAccessor, long currentUserId) {\n        def filters = apiCallContext.getFilters()\n        def stringUserId = String.valueOf(currentUserId)\n        if (stringUserId.equals(filters.get(\"team_manager_id\")) || stringUserId.equals(filters.get(\"user_id\")) || stringUserId.equals(filters.get(\"supervisor_id\"))) {\n            return true\n        }\n        if (filters.containsKey(\"processInstanceId\")) {\n            def processInstanceId = Long.valueOf(filters.get(\"processInstanceId\"))\n\n            def processAPI = apiAccessor.getProcessAPI()\n            return isInvolved(processAPI, currentUserId, processInstanceId) || isSupervisor(processAPI, processInstanceId, currentUserId)\n        }\n        return false\n    }\n\n    private boolean isInvolved(ProcessAPI processAPI, long currentUserId, long processInstanceId) {\n        try {\n            return processAPI.isInvolvedInProcessInstance(currentUserId, processInstanceId) || processAPI.isManagerOfUserInvolvedInProcessInstance(currentUserId, processInstanceId)\n        } catch (BonitaException e) {\n            return true\n        }\n    }\n\n    private boolean isSupervisor(ProcessAPI processAPI, long processInstanceId, long currentUserId) {\n        def processDefinitionId\n        try {\n            processDefinitionId = processAPI.getProcessInstance(processInstanceId).getProcessDefinitionId()\n        } catch (NotFoundException e) {\n            try {\n                processDefinitionId = processAPI.getFinalArchivedProcessInstance(processInstanceId).getProcessDefinitionId()\n            } catch (NotFoundException e1) {\n                return true\n            }\n        }\n        return processAPI.isUserProcessSupervisor(processDefinitionId, currentUserId)\n    }\n}\n'),(0,'TENANT_TEMPLATE_SECURITY_SCRIPTS','ConnectorInstancePermissionRule.groovy','/**\n * Copyright (C) 2014 BonitaSoft S.A.\n * BonitaSoft, 32 rue Gustave Eiffel - 38000 Grenoble\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 2.0 of the License, or\n * (at your option) any later version.\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n **/\n\n\nimport org.bonitasoft.engine.api.APIAccessor\nimport org.bonitasoft.engine.api.Logger\nimport org.bonitasoft.engine.api.permission.APICallContext\nimport org.bonitasoft.engine.api.permission.PermissionRule\nimport org.bonitasoft.engine.bpm.flownode.ArchivedFlowNodeInstanceSearchDescriptor\nimport org.bonitasoft.engine.bpm.flownode.FlowNodeInstanceNotFoundException\nimport org.bonitasoft.engine.exception.SearchException\nimport org.bonitasoft.engine.search.SearchOptionsBuilder\nimport org.bonitasoft.engine.session.APISession\n\n/**\n *\n * Let a user see process configuration only if he is process owner\n *\n * <ul>\n *     <li>bpm/connectorInstance</li>\n *     <li>bpm/archivedConnectorInstance</li>\n * </ul>\n *\n *\n *\n * @author Anthony Birembaut\n */\nclass ConnectorInstancePermissionRule implements PermissionRule {\n\n    public static final String CONTAINER_ID = \"containerId\"\n\n    @Override\n    public boolean isAllowed(APISession apiSession, APICallContext apiCallContext, APIAccessor apiAccessor, Logger logger) {\n        long currentUserId = apiSession.getUserId()\n        if (apiCallContext.isGET()) {\n            return checkGetMethod(apiCallContext, apiAccessor, currentUserId, logger)\n        } else if (apiCallContext.isPUT()) {\n            //TODO unable to find a connector instance with the API!\n            return false\n        }\n        return true\n    }\n\n    private boolean checkGetMethod(APICallContext apiCallContext, APIAccessor apiAccessor, long currentUserId, Logger logger) {\n        def filters = apiCallContext.getFilters()\n        if(filters.containsKey(CONTAINER_ID)){\n            def processAPI = apiAccessor.getProcessAPI()\n            def processID\n            if (apiCallContext.getResourceName().startsWith(\"archived\")) {\n                try {\n                    def searchOptions = new SearchOptionsBuilder(0, 1)\n                    searchOptions.filter(ArchivedFlowNodeInstanceSearchDescriptor.ORIGINAL_FLOW_NODE_ID, Long.valueOf(filters.get(CONTAINER_ID)))\n                    def searchResult = processAPI.searchArchivedFlowNodeInstances(searchOptions.done())\n                    def archivedFlowNodeInstances = searchResult.getResult()\n                    if (archivedFlowNodeInstances.isEmpty()) {\n                        logger.debug(\"archived flow node does not exists\")\n                        return true\n                    } else {\n                        processID = archivedFlowNodeInstances.get(0).getProcessDefinitionId()\n                    }\n                } catch(SearchException e) {\n                    logger.debug(\"error while retrieving the archived flow node\")\n                    return true\n                }\n            } else {\n                try{\n                    def flowNodeInstance = processAPI.getFlowNodeInstance(Long.valueOf(filters.get(CONTAINER_ID)))\n                    processID = flowNodeInstance.getProcessDefinitionId()\n                } catch(FlowNodeInstanceNotFoundException e) {\n                    logger.debug(\"flow node does not exists\")\n                    return true\n                }\n            }\n            return processAPI.isUserProcessSupervisor(processID,currentUserId)\n        }\n        return false\n    }\n}\n'),(0,'TENANT_TEMPLATE_SECURITY_SCRIPTS','DocumentPermissionRule.groovy','/**\n * Copyright (C) 2014 BonitaSoft S.A.\n * BonitaSoft, 32 rue Gustave Eiffel - 38000 Grenoble\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 2.0 of the License, or\n * (at your option) any later version.\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n **/\n\nimport com.fasterxml.jackson.databind.ObjectMapper\n\nimport org.bonitasoft.engine.api.APIAccessor\nimport org.bonitasoft.engine.api.Logger\nimport org.bonitasoft.engine.api.ProcessAPI;\nimport org.bonitasoft.engine.api.permission.APICallContext\nimport org.bonitasoft.engine.api.permission.PermissionRule\nimport org.bonitasoft.engine.exception.BonitaException;\nimport org.bonitasoft.engine.exception.NotFoundException\nimport org.bonitasoft.engine.session.APISession\n\n/**\n *\n * Let a user access only document on cases that he is involved in\n *\n * <ul>\n *     <li>bpm/document</li>\n *     <li>bpm/archivedDocument</li>\n *     <li>bpm/caseDocument</li>\n * </ul>\n *\n *\n *\n * @author Baptiste Mesta\n * @author Truc Nguyen\n */\nclass DocumentPermissionRule implements PermissionRule {\n\n    public static final String CASE_ID = \"caseId\"\n    public static final String ARCHIVED_CASE_ID = \"archivedCaseId\"\n\n    @Override\n    public boolean isAllowed(APISession apiSession, APICallContext apiCallContext, APIAccessor apiAccessor, Logger logger) {\n        long currentUserId = apiSession.getUserId();\n        \n        def resourceId = apiCallContext.getResourceId()\n        if (resourceId != null) {\n            return checkMethodWithResourceId(resourceId, apiAccessor, currentUserId)\n        }\n        \n        if (apiCallContext.isGET()) {\n            return checkGetMethod(apiCallContext, apiAccessor, currentUserId)\n        } else if (apiCallContext.isPOST()) {\n            return checkPostMethod(apiCallContext, apiAccessor, currentUserId)\n        }\n        \n        return false\n    }\n\n    private boolean checkMethodWithResourceId(String resourceId, APIAccessor apiAccessor, long currentUserId) {\n        def processAPI = apiAccessor.getProcessAPI()\n        try {\n            long documentId = Long.valueOf(resourceId)\n            def processInstanceId = processAPI.getDocument(documentId).getProcessInstanceId()\n            return isInvolved(processAPI, currentUserId, processInstanceId) ||\n                    isSupervisor(processAPI, currentUserId, processInstanceId)\n        }\n        catch (NumberFormatException e) {\n            return true\n        }\n    }\n    \n    private boolean checkPostMethod(APICallContext apiCallContext, APIAccessor apiAccessor, long currentUserId) {\n\n        ObjectMapper mapper = new ObjectMapper();\n        def map = mapper.readValue(apiCallContext.getBody(), Map.class)\n\n        def processInstanceIdAsString = map.get(CASE_ID)\n        if (processInstanceIdAsString == null || processInstanceIdAsString.toString().isEmpty()) {\n            return true;\n        }\n        def processInstanceId = Long.valueOf(processInstanceIdAsString.toString())\n        if (processInstanceId <= 0) {\n            return true;\n        }\n        try {\n            def processAPI = apiAccessor.getProcessAPI()\n            def processDefinitionId = processAPI.getProcessInstance(processInstanceId).getProcessDefinitionId()\n            return isInvolved(processAPI, currentUserId, processInstanceId) ||\n                    processAPI.isUserProcessSupervisor(processDefinitionId, currentUserId)\n        } catch (NotFoundException e) {\n            return true\n        }\n    }\n\n    private boolean checkGetMethod(APICallContext apiCallContext, APIAccessor apiAccessor, long currentUserId) {\n        def filters = apiCallContext.getFilters()\n        def processAPI = apiAccessor.getProcessAPI()\n        \n        long processInstanceId = -1\n        long processDefinitionId = -1\n        \n        def archivedCaseIdAsString = filters.get(ARCHIVED_CASE_ID)\n        if (archivedCaseIdAsString != null) {\n            def archivedCaseId = Long.valueOf(archivedCaseIdAsString)\n            processInstanceId = processAPI.getArchivedProcessInstance(archivedCaseId).getSourceObjectId()\n            processDefinitionId = processAPI.getFinalArchivedProcessInstance(processInstanceId).getProcessDefinitionId()\n        }\n        else {\n            def processInstanceIdAsString = filters.get(CASE_ID)\n            if (processInstanceIdAsString != null) {\n                processInstanceId = Long.valueOf(processInstanceIdAsString)\n                processDefinitionId = processAPI.getProcessInstance(processInstanceId).getProcessDefinitionId()\n            }\n        }\n        \n        if (processInstanceId > 0 && processDefinitionId > 0) {\n            return isInvolved(processAPI, currentUserId, processInstanceId) ||\n                    processAPI.isUserProcessSupervisor(processDefinitionId, currentUserId)\n        }\n        \n        return false;\n    }\n\n\n    private boolean isInvolved(ProcessAPI processAPI, long currentUserId, long processInstanceId) {\n        try {\n            return processAPI.isInvolvedInProcessInstance(currentUserId, processInstanceId) || processAPI.isManagerOfUserInvolvedInProcessInstance(currentUserId, processInstanceId)\n        } catch (BonitaException e) {\n            return true\n        }\n    }\n    \n    private boolean isSupervisor(ProcessAPI processAPI, long currentUserId, long processInstanceId) {\n        def processDefinitionId\n        try {\n            processDefinitionId = processAPI.getProcessInstance(processInstanceId).getProcessDefinitionId()\n        } catch (NotFoundException e) {\n            try {\n                processDefinitionId = processAPI.getFinalArchivedProcessInstance(processInstanceId).getProcessDefinitionId()\n            } catch (NotFoundException e1) {\n                return true\n            }\n        }\n        return processAPI.isUserProcessSupervisor(processDefinitionId, currentUserId)\n    }\n    \n}\n'),(0,'TENANT_TEMPLATE_SECURITY_SCRIPTS','ProcessConfigurationPermissionRule.groovy','/**\n * Copyright (C) 2014 BonitaSoft S.A.\n * BonitaSoft, 32 rue Gustave Eiffel - 38000 Grenoble\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 2.0 of the License, or\n * (at your option) any later version.\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n **/\n\n\nimport org.bonitasoft.engine.api.APIAccessor\nimport org.bonitasoft.engine.api.Logger\nimport org.bonitasoft.engine.api.permission.APICallContext\nimport org.bonitasoft.engine.api.permission.PermissionRule\nimport org.bonitasoft.engine.session.APISession\n\n/**\n *\n * Let a user manage process connectors and parameters only if he is process owner\n *\n * <ul>\n *     <li>bpm/processConnector</li>\n *     <li>bpm/processParameter</li>\n * </ul>\n *\n *\n *\n * @author Anthony Birembaut\n */\nclass ProcessConfigurationPermissionRule implements PermissionRule {\n\n    public static final String PROCESS_ID = \"process_id\"\n\n    @Override\n    public boolean isAllowed(APISession apiSession, APICallContext apiCallContext, APIAccessor apiAccessor, Logger logger) {\n        long currentUserId = apiSession.getUserId()\n        if (apiCallContext.isGET()) {\n            return checkGetMethod(apiCallContext, apiAccessor, currentUserId, logger)\n        } else if (apiCallContext.isPUT()) {\n            return checkPutMethod(apiCallContext, apiAccessor, currentUserId, logger)\n        }\n        return true\n    }\n\n    private boolean checkGetMethod(APICallContext apiCallContext, APIAccessor apiAccessor, long currentUserId, Logger logger) {\n        def resourceIds = apiCallContext.getCompoundResourceId()\n        if (resourceIds.isEmpty()) {\n            def filters = apiCallContext.getFilters()\n            if(filters.containsKey(PROCESS_ID)){\n                def processAPI = apiAccessor.getProcessAPI()\n                return processAPI.isUserProcessSupervisor(Long.valueOf(filters.get(PROCESS_ID)),currentUserId)\n            }\n            return false\n        } else {\n            return isProcessOwnerOfTheProcess(apiAccessor, resourceIds, currentUserId)\n        }\n    }\n\n    private boolean checkPutMethod(APICallContext apiCallContext, APIAccessor apiAccessor, long currentUserId, Logger logger) {\n        def resourceIds = apiCallContext.getCompoundResourceId()\n        return isProcessOwnerOfTheProcess(apiAccessor, resourceIds, currentUserId)\n    }\n\n    private isProcessOwnerOfTheProcess(APIAccessor apiAccessor, List<String> resourceIds, long currentUserId) {\n        def processAPI = apiAccessor.getProcessAPI()\n        def processID = Long.parseLong(resourceIds.get(0))\n        return processAPI.isUserProcessSupervisor(processID, currentUserId)\n    }\n}\n'),(0,'TENANT_TEMPLATE_SECURITY_SCRIPTS','ProcessConnectorDependencyPermissionRule.groovy','/**\n * Copyright (C) 2014 BonitaSoft S.A.\n * BonitaSoft, 32 rue Gustave Eiffel - 38000 Grenoble\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 2.0 of the License, or\n * (at your option) any later version.\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n **/\n\n\nimport org.bonitasoft.engine.api.APIAccessor\nimport org.bonitasoft.engine.api.Logger\nimport org.bonitasoft.engine.api.permission.APICallContext\nimport org.bonitasoft.engine.api.permission.PermissionRule\nimport org.bonitasoft.engine.session.APISession\n\n/**\n *\n * Let a user see process connector dependency problem only if he is process owner\n *\n * <ul>\n *     <li>bpm/processConnectorDependency</li>\n * </ul>\n *\n *\n *\n * @author Anthony Birembaut\n */\nclass ProcessConnectorDependencyPermissionRule implements PermissionRule {\n\n    public static final String PROCESS_ID = \"connector_process_id\"\n\n    @Override\n    public boolean isAllowed(APISession apiSession, APICallContext apiCallContext, APIAccessor apiAccessor, Logger logger) {\n        long currentUserId = apiSession.getUserId()\n        if (apiCallContext.isGET()) {\n            return checkGetMethod(apiCallContext, apiAccessor, currentUserId, logger)\n        }\n        return true\n    }\n\n    private boolean checkGetMethod(APICallContext apiCallContext, APIAccessor apiAccessor, long currentUserId, Logger logger) {\n        def filters = apiCallContext.getFilters()\n        if(filters.containsKey(PROCESS_ID)){\n            def processAPI = apiAccessor.getProcessAPI()\n            return processAPI.isUserProcessSupervisor(Long.valueOf(filters.get(PROCESS_ID)),currentUserId)\n        }\n        return false\n    }\n}\n'),(0,'TENANT_TEMPLATE_SECURITY_SCRIPTS','ProcessInstantiationPermissionRule.groovy','/**\n * Copyright (C) 2015 BonitaSoft S.A.\n * BonitaSoft, 32 rue Gustave Eiffel - 38000 Grenoble\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 2.0 of the License, or\n * (at your option) any later version.\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n **/\n\n\nimport com.fasterxml.jackson.databind.ObjectMapper\n\nimport org.bonitasoft.engine.api.APIAccessor\nimport org.bonitasoft.engine.api.Logger\nimport org.bonitasoft.engine.api.permission.APICallContext\nimport org.bonitasoft.engine.api.permission.PermissionRule\nimport org.bonitasoft.engine.bpm.process.ArchivedProcessInstancesSearchDescriptor\nimport org.bonitasoft.engine.exception.BonitaException;\nimport org.bonitasoft.engine.exception.NotFoundException\nimport org.bonitasoft.engine.identity.User\nimport org.bonitasoft.engine.identity.UserSearchDescriptor\nimport org.bonitasoft.engine.search.SearchOptionsBuilder\nimport org.bonitasoft.engine.search.SearchResult\nimport org.bonitasoft.engine.session.APISession\n\n/**\n *\n * Let a user access only cases that he is involved in and start cases that he can start\n *\n * <ul>\n *     <li>bpm/process/[id]/contract</li>\n *     <li>bpm/process/[id]/instantiation</li>\n * </ul>\n *\n *\n *\n * @author Anthony Birembaut\n */\nclass ProcessInstantiationPermissionRule implements PermissionRule {\n\n    @Override\n    public boolean isAllowed(APISession apiSession, APICallContext apiCallContext, APIAccessor apiAccessor, Logger logger) {\n        long currentUserId = apiSession.getUserId();\n        def processDefinitionId = getProcessDefinitionId(apiCallContext)\n        if (processDefinitionId <= 0) {\n            return true\n        }\n        try {\n            def processAPI = apiAccessor.getProcessAPI()\n            def identityAPI = apiAccessor.getIdentityAPI()\n            User user = identityAPI.getUser(currentUserId);\n            SearchOptionsBuilder searchOptionBuilder = new SearchOptionsBuilder(0, 10);\n            searchOptionBuilder.filter(UserSearchDescriptor.USER_NAME, user.getUserName());\n            SearchResult<User> listUsers = processAPI.searchUsersWhoCanStartProcessDefinition(processDefinitionId, searchOptionBuilder.done());\n            logger.debug(\"RuleCase : nb Result [\" + listUsers.getCount() + \"] ?\");\n            def canStart = listUsers.getCount() == 1\n            logger.debug(\"RuleCase : User allowed to start? \" + canStart)\n            return canStart\n        } catch (NotFoundException e) {\n            //exception, allow user to have the 404 when the rest api will look for the resource:\n            return true\n        }\n    }\n    \n    private long getProcessDefinitionId(APICallContext apiCallContext) {\n        def compoundResourceId = apiCallContext.getCompoundResourceId()\n        if (compoundResourceId == null || compoundResourceId.isEmpty()) {\n            return -1L\n        }\n        return Long.valueOf(compoundResourceId.get(0))\n    }\n}\n'),(0,'TENANT_TEMPLATE_SECURITY_SCRIPTS','ProcessPermissionRule.groovy','/**\n * Copyright (C) 2014 BonitaSoft S.A.\n * BonitaSoft, 32 rue Gustave Eiffel - 38000 Grenoble\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 2.0 of the License, or\n * (at your option) any later version.\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n **/\n\n\n\n\nimport org.bonitasoft.engine.api.APIAccessor\nimport org.bonitasoft.engine.api.Logger\nimport org.bonitasoft.engine.api.permission.APICallContext\nimport org.bonitasoft.engine.api.permission.PermissionRule\nimport org.bonitasoft.engine.bpm.process.ProcessDeploymentInfoSearchDescriptor\nimport org.bonitasoft.engine.search.SearchOptionsBuilder\nimport org.bonitasoft.engine.session.APISession\n\n/**\n *\n * Let the user do get only on processes he deployed or that he supervised\n *\n *\n * can be added to\n * <ul>\n *     <li>bpm/process</li>\n * </ul>\n *\n *\n *\n * @author Baptiste Mesta\n */\nclass ProcessPermissionRule implements PermissionRule {\n\n\n    @Override\n    public boolean isAllowed(APISession apiSession, APICallContext apiCallContext, APIAccessor apiAccessor, Logger logger) {\n        long currentUserId = apiSession.getUserId();\n        if (apiCallContext.isGET()) {\n            return checkGetMethod(apiCallContext, apiAccessor, currentUserId, logger)\n        }\n        if (apiCallContext.isPUT()) {\n            return checkPutMethod(apiCallContext, apiAccessor, currentUserId, logger)\n        }\n        return false\n    }\n\n\n    private boolean checkGetMethod(APICallContext apiCallContext, APIAccessor apiAccessor, long currentUserId, Logger logger) {\n        def processAPI = apiAccessor.getProcessAPI()\n        def filters = apiCallContext.getFilters()\n        def resourceIds = apiCallContext.getCompoundResourceId()\n        if (!resourceIds.isEmpty()) {\n            def processId = Long.parseLong(resourceIds.get(0))\n            def processDefinition = processAPI.getProcessDeploymentInfo(processId);\n            def deployedByUser = processDefinition.getDeployedBy() == currentUserId\n            if(deployedByUser){\n                logger.debug(\"deployed by the current user\")\n                return true;\n            }\n            def canStart = processAPI.searchProcessDeploymentInfosCanBeStartedBy(currentUserId, new SearchOptionsBuilder(0, 1).filter(ProcessDeploymentInfoSearchDescriptor.PROCESS_ID, processDefinition.getProcessId()).done())\n            if(canStart.getCount()==1){\n                logger.debug(\"can start process, so can get\")\n                return true\n            }\n            def isSupervisor = processAPI.isUserProcessSupervisor(processId, currentUserId)\n            if(isSupervisor){\n                logger.debug(\"is supervisor of the process\")\n                return true\n            }\n            return false\n        } else {\n            def stringUserId = String.valueOf(currentUserId)\n            if (stringUserId.equals(filters.get(\"team_manager_id\")) || stringUserId.equals(filters.get(\"supervisor_id\")) || stringUserId.equals(filters.get(\"user_id\"))) {\n                logger.debug(\"allowed because searching filters contains user id\")\n                return true\n            }\n        }\n        return false;\n    }\n    private boolean checkPutMethod(APICallContext apiCallContext, APIAccessor apiAccessor, long currentUserId, Logger logger) {\n        def resourceIds = apiCallContext.getCompoundResourceId()\n        if (!resourceIds.isEmpty()) {\n            def processId = Long.parseLong(resourceIds.get(0))\n            def processAPI = apiAccessor.getProcessAPI()\n            def isSupervisor = processAPI.isUserProcessSupervisor(processId, currentUserId)\n            if(isSupervisor){\n                logger.debug(\"is supervisor of the process\")\n                return true\n            }\n            return false\n        }\n        return true\n    }\n}\n'),(0,'TENANT_TEMPLATE_SECURITY_SCRIPTS','ProcessResolutionProblemPermissionRule.groovy','/**\n * Copyright (C) 2014 BonitaSoft S.A.\n * BonitaSoft, 32 rue Gustave Eiffel - 38000 Grenoble\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 2.0 of the License, or\n * (at your option) any later version.\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n **/\n\n\nimport org.bonitasoft.engine.api.APIAccessor\nimport org.bonitasoft.engine.api.Logger\nimport org.bonitasoft.engine.api.permission.APICallContext\nimport org.bonitasoft.engine.api.permission.PermissionRule\nimport org.bonitasoft.engine.session.APISession\n\n/**\n *\n * Let a user see process resolution problem only if he is process owner\n *\n * <ul>\n *     <li>bpm/processResolutionProblem</li>\n * </ul>\n *\n *\n *\n * @author Anthony Birembaut\n */\nclass ProcessResolutionProblemPermissionRule implements PermissionRule {\n\n    public static final String PROCESS_ID = \"process_id\"\n\n    @Override\n    public boolean isAllowed(APISession apiSession, APICallContext apiCallContext, APIAccessor apiAccessor, Logger logger) {\n        long currentUserId = apiSession.getUserId()\n        if (apiCallContext.isGET()) {\n            return checkGetMethod(apiCallContext, apiAccessor, currentUserId, logger)\n        }\n        return true\n    }\n\n    private boolean checkGetMethod(APICallContext apiCallContext, APIAccessor apiAccessor, long currentUserId, Logger logger) {\n        def filters = apiCallContext.getFilters()\n        if(filters.containsKey(PROCESS_ID)){\n            def processAPI = apiAccessor.getProcessAPI()\n            return processAPI.isUserProcessSupervisor(Long.valueOf(filters.get(PROCESS_ID)),currentUserId)\n        }\n        return false\n    }\n}\n'),(0,'TENANT_TEMPLATE_SECURITY_SCRIPTS','ProcessSupervisorPermissionRule.groovy','/**\n * Copyright (C) 2014 BonitaSoft S.A.\n * BonitaSoft, 32 rue Gustave Eiffel - 38000 Grenoble\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 2.0 of the License, or\n * (at your option) any later version.\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n **/\n\n\nimport com.fasterxml.jackson.databind.ObjectMapper\nimport org.bonitasoft.engine.api.APIAccessor\nimport org.bonitasoft.engine.api.Logger\nimport org.bonitasoft.engine.api.permission.APICallContext\nimport org.bonitasoft.engine.api.permission.PermissionRule\nimport org.bonitasoft.engine.session.APISession\n\n/**\n *\n * Let a user view and add process only if he is process owner\n *\n * <ul>\n *     <li>bpm/processSupervisor</li>\n * </ul>\n *\n *\n *\n * @author Anthony Birembaut\n */\nclass ProcessSupervisorPermissionRule implements PermissionRule {\n\n    public static final String PROCESS_ID = \"process_id\"\n\n    @Override\n    public boolean isAllowed(APISession apiSession, APICallContext apiCallContext, APIAccessor apiAccessor, Logger logger) {\n        long currentUserId = apiSession.getUserId();\n        if (apiCallContext.isPOST()) {\n            return checkPostMethod(apiCallContext, apiAccessor, currentUserId, logger)\n        } else if (apiCallContext.isGET()) {\n            return checkGetMethod(apiCallContext, apiAccessor, currentUserId, logger)\n        } else if (apiCallContext.isDELETE()) {\n            return checkDeleteMethod(apiCallContext, apiAccessor, currentUserId, logger)\n        }\n        //it\'s ok to read\n        return true\n    }\n\n    private boolean checkPostMethod(APICallContext apiCallContext, APIAccessor apiAccessor, long currentUserId, Logger logger) {\n\n        ObjectMapper mapper = new ObjectMapper();\n        def map = mapper.readValue(apiCallContext.getBody(), Map.class)\n\n        def processAPI = apiAccessor.getProcessAPI()\n\n        def processIdString = map.get(\"process_id\")\n        if (processIdString == null || processIdString.toString().isEmpty()) {\n            return false;\n        }\n        def processId = Long.valueOf(processIdString.toString())\n        if (processId <= 0) {\n            return false;\n        }\n\n        return processAPI.isUserProcessSupervisor(processId, currentUserId);\n    }\n\n    private boolean checkGetMethod(APICallContext apiCallContext, APIAccessor apiAccessor, long currentUserId, Logger logger) {\n        def filters = apiCallContext.getFilters()\n        if (filters.containsKey(PROCESS_ID)) {\n            def processAPI = apiAccessor.getProcessAPI()\n            return processAPI.isUserProcessSupervisor(Long.parseLong(filters.get(PROCESS_ID)), currentUserId)\n        }\n        return true\n    }\n\n    private boolean checkDeleteMethod(APICallContext apiCallContext, APIAccessor apiAccessor, long currentUserId, Logger logger) {\n        def resourceIds = apiCallContext.getCompoundResourceId()\n        if (!resourceIds.isEmpty()) {\n            def processAPI = apiAccessor.getProcessAPI()\n            return processAPI.isUserProcessSupervisor(Long.parseLong(resourceIds.get(0)), currentUserId)\n        }\n        return true\n    }\n}\n'),(0,'TENANT_TEMPLATE_SECURITY_SCRIPTS','ProfileEntryPermissionRule.groovy','/**\n * Copyright (C) 2014 BonitaSoft S.A.\n * BonitaSoft, 32 rue Gustave Eiffel - 38000 Grenoble\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 2.0 of the License, or\n * (at your option) any later version.\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n **/\n\n\n\n\n\nimport org.bonitasoft.engine.api.APIAccessor\nimport org.bonitasoft.engine.api.Logger\nimport org.bonitasoft.engine.api.permission.APICallContext\nimport org.bonitasoft.engine.api.permission.PermissionRule\nimport org.bonitasoft.engine.profile.ProfileCriterion\nimport org.bonitasoft.engine.session.APISession\n\n/**\n *\n * Secure profile related resources\n *\n * can be added to\n * <ul>\n *     <li>portal/profileEntry</li>\n *     <li>userXP/profileEntry</li>\n * </ul>\n * @author Baptiste Mesta\n */\nclass ProfileEntryPermissionRule implements PermissionRule {\n\n    @Override\n    boolean isAllowed(APISession apiSession, APICallContext apiCallContext, APIAccessor apiAccessor, Logger logger) {\n       if(apiCallContext.isGET()){\n            if(apiCallContext.getResourceId() != null){\n                return false\n            }else{\n                def filters = apiCallContext.getFilters()\n                if(filters.containsKey(\"profile_id\")){\n                    def profileId = Long.valueOf(filters.get(\"profile_id\"))\n                    def index = 0\n                    def profile\n                    def list = []\n                    def profileAPI = apiAccessor.getProfileAPI()\n                    while ((list = profileAPI.getProfilesForUser(apiSession.getUserId(),index,100,ProfileCriterion.ID_ASC)).size() == 100 && (profile = list.find{it.getId() == profileId}) == null){\n                        index += 100\n                    }\n                    return profile != null || list.find{it.getId() == profileId} != null\n                }\n                return apiSession.getUserId().toString().equals(apiCallContext.getFilters().get(\"user_id\"))\n            }\n        }\n        return false\n    }\n\n}\n'),(0,'TENANT_TEMPLATE_SECURITY_SCRIPTS','ProfilePermissionRule.groovy','/**\n * Copyright (C) 2014 BonitaSoft S.A.\n * BonitaSoft, 32 rue Gustave Eiffel - 38000 Grenoble\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 2.0 of the License, or\n * (at your option) any later version.\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n **/\n\n\n\nimport org.bonitasoft.engine.api.APIAccessor\nimport org.bonitasoft.engine.api.Logger\nimport org.bonitasoft.engine.api.permission.APICallContext\nimport org.bonitasoft.engine.api.permission.PermissionRule\nimport org.bonitasoft.engine.profile.ProfileCriterion\nimport org.bonitasoft.engine.session.APISession\n\n/**\n *\n * Secure profile related resources\n *\n * can be added to\n * <ul>\n *     <li>portal/profile</li>\n *     <li>userXP/profile</li>\n * </ul>\n * @author Baptiste Mesta\n */\nclass ProfilePermissionRule  implements PermissionRule {\n\n    @Override\n    boolean isAllowed(APISession apiSession, APICallContext apiCallContext, APIAccessor apiAccessor, Logger logger) {\n        if(apiCallContext.isGET()){\n            if(apiCallContext.getResourceId() != null){\n                def profileId = Long.valueOf(apiCallContext.getResourceId())\n                def processAPI = apiAccessor.getProfileAPI()\n\n                def index = 0\n                def profile\n                def list = []\n                while ((list = processAPI.getProfilesForUser(apiSession.getUserId(),index,100,ProfileCriterion.ID_ASC)).size() == 100 && (profile = list.find{it.getId() == profileId}) == null){\n                    index += 100\n                }\n                return profile != null || list.find{it.getId() == profileId} != null\n            }else{\n                return apiSession.getUserId().toString().equals(apiCallContext.getFilters().get(\"user_id\"))\n            }\n        }\n        return false\n    }\n\n}\n'),(0,'TENANT_TEMPLATE_SECURITY_SCRIPTS','TaskExecutionPermissionRule.groovy','/**\n * Copyright (C) 2015 BonitaSoft S.A.\n * BonitaSoft, 32 rue Gustave Eiffel - 38000 Grenoble\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 2.0 of the License, or\n * (at your option) any later version.\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n **/\n\n\nimport com.fasterxml.jackson.databind.ObjectMapper\n\nimport org.bonitasoft.engine.api.APIAccessor\nimport org.bonitasoft.engine.api.Logger\nimport org.bonitasoft.engine.api.ProcessAPI\nimport org.bonitasoft.engine.api.permission.APICallContext\nimport org.bonitasoft.engine.api.permission.PermissionRule\nimport org.bonitasoft.engine.bpm.flownode.ArchivedHumanTaskInstance\nimport org.bonitasoft.engine.bpm.flownode.ArchivedManualTaskInstance\nimport org.bonitasoft.engine.bpm.flownode.FlowNodeType;\nimport org.bonitasoft.engine.bpm.flownode.HumanTaskInstance\nimport org.bonitasoft.engine.bpm.flownode.ManualTaskInstance\nimport org.bonitasoft.engine.exception.NotFoundException\nimport org.bonitasoft.engine.identity.UserSearchDescriptor\nimport org.bonitasoft.engine.search.SearchOptionsBuilder\nimport org.bonitasoft.engine.session.APISession\n\n/**\n *\n * Let a user access only tasks that are assigned or pending to him\n *\n *\n * can be added to\n * <ul>\n *     <li>bpm/archivedUserTask/[id]/context</li>\n *     <li>bpm/userTask/[id]/context</li>\n *     <li>bpm/userTask/[id]/contract</li>\n *     <li>bpm/userTask/[id]/execution</li>\n * </ul>\n *\n *\n * @author Anthony Birembaut\n */\nclass TaskExecutionPermissionRule implements PermissionRule {\n\n    @Override\n    public boolean isAllowed(APISession apiSession, APICallContext apiCallContext, APIAccessor apiAccessor, Logger logger) {\n        long currentUserId = apiSession.getUserId()\n        def userName = apiSession.getUserName()\n        def processAPI = apiAccessor.getProcessAPI()\n        try {\n            return isTaskAccessibleByUser(processAPI, apiCallContext, logger, currentUserId, userName)\n        } catch (NotFoundException e) {\n            logger.debug(\"flow node not found: is allowed\")\n            return true\n        }\n    }\n\n    protected boolean isTaskAccessibleByUser(ProcessAPI processAPI, APICallContext apiCallContext, Logger logger, long currentUserId, String username) throws NotFoundException {\n        def taskInstanceId = getTaskInstanceId(apiCallContext)\n        if (taskInstanceId <= 0) {\n            return true\n        }\n        if (apiCallContext.getResourceName().startsWith(\"archived\")) {\n            return isArchivedFlowNodeAccessible(processAPI, taskInstanceId, currentUserId, username)\n        } else {\n            return isTaskAccessible(processAPI, taskInstanceId, currentUserId, username, logger)\n        }\n    }\n\n    private boolean isArchivedFlowNodeAccessible(ProcessAPI processAPI, long taskId, long currentUserId, String username) throws NotFoundException {\n        def archivedFlowNodeInstance = processAPI.getArchivedFlowNodeInstance(taskId)\n        if (FlowNodeType.MANUAL_TASK.equals(archivedFlowNodeInstance.getType()) || FlowNodeType.USER_TASK.equals(archivedFlowNodeInstance.getType())) {\n            if (currentUserId == archivedFlowNodeInstance.getExecutedBy()) {\n                return true\n            }\n            //get the last flow node in journal\n            if(archivedFlowNodeInstance.getExecutedBy() == 0){\n                try{\n                    def instance1 = processAPI.getHumanTaskInstance(archivedFlowNodeInstance.getSourceObjectId())\n                    if(currentUserId == instance1.getAssigneeId()){\n                        return true\n                    }\n                }catch(NotFoundException e){\n                    //do nothing\n                }\n            }\n        }\n        if (FlowNodeType.MANUAL_TASK.equals(archivedFlowNodeInstance.getType())) {\n            try {\n                def parentTask = processAPI.getHumanTaskInstance(archivedFlowNodeInstance.getParentContainerId())\n                if (parentTask.assigneeId > 0) {\n                    if (parentTask.assigneeId == currentUserId) {\n                        return true\n                    }\n                } else {\n                    final SearchOptionsBuilder builder = new SearchOptionsBuilder(0, 1)\n                    builder.filter(UserSearchDescriptor.USER_NAME, username)\n                    def searchResult = processAPI.searchUsersWhoCanExecutePendingHumanTask(parentTask.id, builder.done())\n                    if (searchResult.getCount() == 1l) {\n                        logger.debug(\"The parent task is pending for user\")\n                        return true\n                    }\n                }\n            } catch (NotFoundException e) {\n                try {\n                    def instance = processAPI.getArchivedActivityInstance(archivedFlowNodeInstance.getParentContainerId())\n                    //return false because it means the parent is not found, not the element itself\n                    if ((FlowNodeType.MANUAL_TASK.equals(instance.getType()) || FlowNodeType.USER_TASK.equals(instance.getType())) &&  instance.assigneeId > 0) {\n                        if (instance.assigneeId == currentUserId) {\n                            return true\n                        }\n                    }\n                } catch (NotFoundException e1) {\n                    //return false because it means the parent is not found, not the element itself\n                    return false\n                }\n            }\n        }\n        def processDefinitionId = archivedFlowNodeInstance.getProcessDefinitionId()\n        return processAPI.isUserProcessSupervisor(processDefinitionId, currentUserId)\n    }\n\n    private boolean isTaskAccessible(ProcessAPI processAPI, long flowNodeId, long currentUserId, String username, Logger logger) throws NotFoundException {\n        def instance = processAPI.getFlowNodeInstance(flowNodeId)\n        if (FlowNodeType.MANUAL_TASK.equals(instance.getType()) || FlowNodeType.USER_TASK.equals(instance.getType())) {\n            if (instance.assigneeId > 0) {\n                if (instance.assigneeId == currentUserId) {\n                    return true\n                }\n            } else {\n                final SearchOptionsBuilder builder = new SearchOptionsBuilder(0, 1);\n                builder.filter(UserSearchDescriptor.USER_NAME, username);\n                def searchResult = processAPI.searchUsersWhoCanExecutePendingHumanTask(flowNodeId, builder.done())\n                if (searchResult.getCount() == 1l) {\n                    logger.debug(\"The task is pending for user\")\n                    return true\n                }\n            }\n            //we can access the task if we can access the parent of the subtask\n        if (FlowNodeType.MANUAL_TASK.equals(instance.getType())) {\n                try {\n\n                    def parentTask = processAPI.getHumanTaskInstance(instance.getParentContainerId())\n                    if (parentTask.assigneeId > 0) {\n                        if (parentTask.assigneeId == currentUserId) {\n                            return true\n                        }\n                    } else {\n                        final SearchOptionsBuilder builder = new SearchOptionsBuilder(0, 1);\n                        builder.filter(UserSearchDescriptor.USER_NAME, username);\n                        def searchResult = processAPI.searchUsersWhoCanExecutePendingHumanTask(parentTask.id, builder.done())\n                        if (searchResult.getCount() == 1l) {\n                            logger.debug(\"The parent task is pending for user\")\n                            return true\n                        }\n                    }\n                } catch (NotFoundException e) {\n                    //return false because it means the parent is not found, not the element itself\n                    return false\n                }\n            }\n        }\n        def processDefinitionId = instance.getProcessDefinitionId()\n        return processAPI.isUserProcessSupervisor(processDefinitionId, currentUserId)\n    }\n    \n    private long getTaskInstanceId(APICallContext apiCallContext) {\n        def compoundResourceId = apiCallContext.getCompoundResourceId()\n        if (compoundResourceId == null || compoundResourceId.isEmpty()) {\n            return -1L\n        }\n        return Long.valueOf(compoundResourceId.get(0))\n    }\n}\n'),(0,'TENANT_TEMPLATE_SECURITY_SCRIPTS','TaskPermissionRule.groovy','/**\n * Copyright (C) 2014 BonitaSoft S.A.\n * BonitaSoft, 32 rue Gustave Eiffel - 38000 Grenoble\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 2.0 of the License, or\n * (at your option) any later version.\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n **/\n\n\nimport com.fasterxml.jackson.databind.ObjectMapper\nimport org.bonitasoft.engine.api.APIAccessor\nimport org.bonitasoft.engine.api.Logger\nimport org.bonitasoft.engine.api.ProcessAPI\nimport org.bonitasoft.engine.api.permission.APICallContext\nimport org.bonitasoft.engine.api.permission.PermissionRule\nimport org.bonitasoft.engine.bpm.flownode.ArchivedHumanTaskInstance\nimport org.bonitasoft.engine.bpm.flownode.ArchivedManualTaskInstance\nimport org.bonitasoft.engine.bpm.flownode.HumanTaskInstance\nimport org.bonitasoft.engine.bpm.flownode.ManualTaskInstance\nimport org.bonitasoft.engine.bpm.flownode.FlowNodeType;\nimport org.bonitasoft.engine.exception.NotFoundException\nimport org.bonitasoft.engine.identity.UserSearchDescriptor\nimport org.bonitasoft.engine.search.SearchOptionsBuilder\nimport org.bonitasoft.engine.session.APISession\n\n/**\n *\n * Let a user access only tasks that are assigned or pending to him\n *\n *\n * can be added to\n * <ul>\n *     <li>bpm/humanTask</li>\n *     <li>bpm/userTask</li>\n *     <li>bpm/archivedHumanTask</li>\n *     <li>bpm/archivedUserTask</li>\n *     <li>bpm/activity</li>\n *     <li>bpm/archivedActivity</li>\n *     <li>bpm/task</li>\n *     <li>bpm/archivedTask</li>\n *     <li>bpm/flowNode</li>\n *     <li>bpm/archivedFlowNode</li>\n *     <li>bpm/manualTask</li>\n *     <li>bpm/archivedManualTask</li>\n *     <li>bpm/archivedTask</li>\n * </ul>\n *\n *\n * @author Baptiste Mesta\n */\nclass TaskPermissionRule implements PermissionRule {\n\n    @Override\n    public boolean isAllowed(APISession apiSession, APICallContext apiCallContext, APIAccessor apiAccessor, Logger logger) {\n        long currentUserId = apiSession.getUserId()\n        def userName = apiSession.getUserName()\n        def processAPI = apiAccessor.getProcessAPI()\n        def filters = apiCallContext.getFilters()\n        try {\n            if (apiCallContext.isGET()) {\n                return checkGetMethod(apiCallContext, processAPI, logger, currentUserId, userName, filters)\n            } else if (apiCallContext.isPUT() && apiCallContext.getResourceId() != null) {\n                return isTaskAccessibleByUser(processAPI, apiCallContext, logger, currentUserId, userName)\n            } else if (apiCallContext.isPOST()) {\n                return checkPostMethod(apiCallContext, currentUserId, processAPI, userName, logger)\n            }\n        } catch (NotFoundException e) {\n            logger.debug(\"flow node not found: is allowed\")\n            return true\n        }\n        return true\n    }\n\n    private boolean checkGetMethod(APICallContext apiCallContext, ProcessAPI processAPI, Logger logger, long currentUserId, String userName, Map<String, String> filters) {\n        if (apiCallContext.getResourceId() != null) {\n            return isTaskAccessibleByUser(processAPI, apiCallContext, logger, currentUserId, userName)\n        } else if (hasFilter(currentUserId, filters, \"assigned_id\") || hasFilter(currentUserId, filters, \"user_id\") || hasFilter(currentUserId, filters, \"hidden_user_id\") || hasFilter(currentUserId, filters, \"supervisor_id\")) {\n            logger.debug(\"FilterOnUser or FilterOnAssignUser\")\n            return true\n        } else if (filters.containsKey(\"parentTaskId\")) {\n            def long parentTaskId = Long.parseLong(filters.get(\"parentTaskId\"))\n            try {\n                return isTaskAccessible(processAPI, filters.get(\"parentTaskId\"), currentUserId, userName, logger)\n            } catch (NotFoundException e) {\n                return isArchivedFlowNodeAccessible(processAPI, parentTaskId, currentUserId, userName)\n            }\n        } else if (filters.containsKey(\"processId\")) {\n            def long processId = Long.valueOf(filters.get(\"processId\"))\n            return processAPI.isUserProcessSupervisor(processId, currentUserId)\n        } else if (filters.containsKey(\"caseId\")) {\n            def long caseId = Long.valueOf(filters.get(\"caseId\"))\n            return processAPI.isUserProcessSupervisor(processAPI.getProcessInstance(caseId).getProcessDefinitionId(), currentUserId)\n        } else {\n            return false\n        }\n    }\n\n    private boolean checkPostMethod(APICallContext apiCallContext, long currentUserId, ProcessAPI processAPI, String userName, Logger logger) {\n        if (\"manualTask\".equals(apiCallContext.getResourceName())) {\n            ObjectMapper mapper = new ObjectMapper();\n            def map = mapper.readValue(apiCallContext.getBody(), Map.class)\n\n            def string = map.get(\"parentTaskId\").toString()\n            if (string == null || string.isEmpty()) {\n                return true\n            }\n            def parentTaskId = Long.valueOf(string)\n            def flowNodeInstance = processAPI.getFlowNodeInstance(parentTaskId)\n            return flowNodeInstance instanceof HumanTaskInstance && flowNodeInstance.getAssigneeId()\n        }\n        return false\n    }\n\n    private boolean hasFilter(long currentUserId, Map<String, String> filters, String assigned_id) {\n        return String.valueOf(currentUserId).equals(filters.get(assigned_id))\n    }\n\n    protected boolean isTaskAccessibleByUser(ProcessAPI processAPI, APICallContext apiCallContext, Logger logger, long currentUserId, String username) throws NotFoundException {\n        if (apiCallContext.getResourceName().startsWith(\"archived\")) {\n            return isArchivedFlowNodeAccessible(processAPI, Long.valueOf(apiCallContext.getResourceId()), currentUserId, username)\n        } else {\n            return isTaskAccessible(processAPI, apiCallContext.getResourceId(), currentUserId, username, logger)\n        }\n    }\n\n    private boolean isArchivedFlowNodeAccessible(ProcessAPI processAPI, long taskId, long currentUserId, String username) throws NotFoundException {\n        def archivedFlowNodeInstance = processAPI.getArchivedFlowNodeInstance(taskId)\n        if (FlowNodeType.MANUAL_TASK.equals(archivedFlowNodeInstance.getType()) || FlowNodeType.USER_TASK.equals(archivedFlowNodeInstance.getType())) {\n            if (currentUserId == archivedFlowNodeInstance.getExecutedBy()) {\n                return true\n            }\n            //get the last flow node in journal\n            if(archivedFlowNodeInstance.getExecutedBy() == 0){\n                try{\n                    def instance1 = processAPI.getHumanTaskInstance(archivedFlowNodeInstance.getSourceObjectId())\n                    if(currentUserId == instance1.getAssigneeId()){\n                        return true\n                    }\n                }catch(NotFoundException e){\n                    //do nothing\n                }\n            }\n        }\n        if (FlowNodeType.MANUAL_TASK.equals(archivedFlowNodeInstance.getType())) {\n            try {\n                def parentTask = processAPI.getHumanTaskInstance(archivedFlowNodeInstance.getParentContainerId())\n                if (parentTask.assigneeId > 0) {\n                    if (parentTask.assigneeId == currentUserId) {\n                        return true\n                    }\n                } else {\n                    final SearchOptionsBuilder builder = new SearchOptionsBuilder(0, 1)\n                    builder.filter(UserSearchDescriptor.USER_NAME, username)\n                    def searchResult = processAPI.searchUsersWhoCanExecutePendingHumanTask(parentTask.id, builder.done())\n                    if (searchResult.getCount() == 1l) {\n                        logger.debug(\"The parent task is pending for user\")\n                        return true\n                    }\n                }\n            } catch (NotFoundException e) {\n                try {\n                    def instance = processAPI.getArchivedActivityInstance(archivedFlowNodeInstance.getParentContainerId())\n                    //return false because it means the parent is not found, not the element itself\n                    if ((FlowNodeType.MANUAL_TASK.equals(instance.getType()) || FlowNodeType.USER_TASK.equals(instance.getType())) &&  instance.assigneeId > 0) {\n                        if (instance.assigneeId == currentUserId) {\n                            return true\n                        }\n                    }\n                } catch (NotFoundException e1) {\n                    //return false because it means the parent is not found, not the element itself\n                    return false\n                }\n            }\n        }\n        def processDefinitionId = archivedFlowNodeInstance.getProcessDefinitionId()\n        return processAPI.isUserProcessSupervisor(processDefinitionId, currentUserId)\n    }\n\n    private boolean isTaskAccessible(ProcessAPI processAPI, String flowNodeIdAsString, long currentUserId, String username, Logger logger) throws NotFoundException {\n        def long flowNodeId = Long.valueOf(flowNodeIdAsString)\n        def instance = processAPI.getFlowNodeInstance(flowNodeId)\n        if (instance instanceof HumanTaskInstance) {\n            if (instance.assigneeId > 0) {\n                if (instance.assigneeId == currentUserId) {\n                    return true\n                }\n            } else {\n                final SearchOptionsBuilder builder = new SearchOptionsBuilder(0, 1);\n                builder.filter(UserSearchDescriptor.USER_NAME, username);\n                def searchResult = processAPI.searchUsersWhoCanExecutePendingHumanTask(flowNodeId, builder.done())\n                if (searchResult.getCount() == 1l) {\n                    logger.debug(\"The task is pending for user\")\n                    return true\n                }\n            }\n            //we can access the task if we can access the parent of the subtask\n            if (instance instanceof ManualTaskInstance) {\n                try {\n\n                    def parentTask = processAPI.getHumanTaskInstance(instance.getParentContainerId())\n                    if (parentTask.assigneeId > 0) {\n                        if (parentTask.assigneeId == currentUserId) {\n                            return true\n                        }\n                    } else {\n                        final SearchOptionsBuilder builder = new SearchOptionsBuilder(0, 1);\n                        builder.filter(UserSearchDescriptor.USER_NAME, username);\n                        def searchResult = processAPI.searchUsersWhoCanExecutePendingHumanTask(parentTask.id, builder.done())\n                        if (searchResult.getCount() == 1l) {\n                            logger.debug(\"The parent task is pending for user\")\n                            return true\n                        }\n                    }\n                } catch (NotFoundException e) {\n                    //return false because it means the parent is not found, not the element itself\n                    return false\n                }\n            }\n        }\n        def processDefinitionId = instance.getProcessDefinitionId()\n        return processAPI.isUserProcessSupervisor(processDefinitionId, currentUserId)\n    }\n}\n'),(0,'TENANT_TEMPLATE_SECURITY_SCRIPTS','UserPermissionRule.groovy','/**\n * Copyright (C) 2014 BonitaSoft S.A.\n * BonitaSoft, 32 rue Gustave Eiffel - 38000 Grenoble\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 2.0 of the License, or\n * (at your option) any later version.\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n **/\n\n\n\nimport org.bonitasoft.engine.api.APIAccessor\nimport org.bonitasoft.engine.api.Logger\nimport org.bonitasoft.engine.api.permission.APICallContext\nimport org.bonitasoft.engine.api.permission.PermissionRule\nimport org.bonitasoft.engine.exception.NotFoundException\nimport org.bonitasoft.engine.session.APISession\n\n/**\n *\n * Let the user access and modify only himself\n *\n * can be added to\n * <ul>\n *     <li>identity/user</li>\n *     <li>identity/professionalcontactdata</li>\n *     <li>identity/personalcontactdata</li>\n * </ul>\n *\n * @author Baptiste Mesta\n */\nclass UserPermissionRule implements PermissionRule {\n\n\n    @Override\n    boolean isAllowed(APISession apiSession, APICallContext apiCallContext, APIAccessor apiAccessor, Logger logger) {\n        APISession session = apiSession;\n        long currentUserId = session.getUserId();\n        if (apiCallContext.getResourceId() != null) {\n            def resourceId = Long.valueOf(apiCallContext.getResourceId())\n            if (resourceId.equals(currentUserId)) {\n                return true\n            }\n            return false\n        } else {\n            if (apiCallContext.getQueryString().contains(\"d=professional_data\") || apiCallContext.getQueryString().contains(\"d=personnal_data\")) {\n                return false\n            }\n            def filters = apiCallContext.getFilters()\n            //search by task id for the do for\n            if (filters.containsKey(\"task_id\")) {\n                def taskId = Long.valueOf(filters.get(\"task_id\"))\n                def processAPI = apiAccessor.getProcessAPI()\n                try {\n                    def flowNodeInstance = processAPI.getFlowNodeInstance(taskId)\n                    return processAPI.isUserProcessSupervisor(flowNodeInstance.getProcessDefinitionId(), currentUserId)\n                } catch (NotFoundException e) {\n                    return true\n                }\n            }\n            if (filters.containsKey(\"process_id\")) {\n                def processId = Long.valueOf(filters.get(\"process_id\"))\n                def processAPI = apiAccessor.getProcessAPI()\n                return processAPI.isUserProcessSupervisor(processId, currentUserId)\n            }\n        }\n        return true\n    }\n}\n'),(1,'TENANT_ENGINE','bonita-tenant-community-custom.properties','## Bonita Tenant server core configuration\n#userName=install\n#userPassword=install\n#\n## Business data configuration\n#bdm.db.vendor=${sysprop.bonita.bdm.db.vendor:h2}\n#bdm.datasource.jndi.path=${sysprop.bonita.businessdata.datasource.jndi:java:comp/env/BusinessDataDS}\n#bdm.notmanageddatasource.jndi.path=${sysprop.bonita.businessdata.notmanageddatasource.jndi:java:comp/env/NotManagedBizDataDS}\n#bdm.hibernate.transaction.jta_platform=${sysprop.bonita.hibernate.transaction.jta_platform:org.bonitasoft.engine.persistence.JNDIBitronixJtaPlatform}\n#\n##Cron jobs configuration\n##Seconds Minutes Hours Day-of-Month Month Day-of-Week Year (optional field)\n#org.bonitasoft.engine.clean.invalid.sessions.cron=0 0 */2 * * ?\n#\n## name of the servlet used to download content of document\n#document.servlet.url=documentDownload\n#\n## Session service\n## session duration in ms\n#bonita.tenant.session.duration=3600000\n#\n## Connector executor\n#bonita.tenant.connector.queueCapacity=10000\n#bonita.tenant.connector.corePoolSize=10\n#bonita.tenant.connector.maximumPoolSize=10\n#bonita.tenant.connector.keepAliveTimeSeconds=100\n#\n## Work service\n## Time to wait in seconds for all work to terminate when the service is paused or stopped\n#bonita.tenant.work.terminationTimeout=30\n#bonita.tenant.work.corePoolSize=10\n#bonita.tenant.work.maximumPoolSize=10\n#bonita.tenant.work.keepAliveTimeSeconds=60\n#bonita.tenant.work.queueCapacity=500000\n#\n## Time tracker\n#bonita.tenant.timetracker.startTracking=false\n#bonita.tenant.timetracker.maxSize=1000\n#bonita.tenant.timetracker.flushIntervalInSeconds=30\n#bonita.tenant.timetracker.csv.activateAtStart=true\n#bonita.tenant.timetracker.csv.folder=${java.io.tmpdir}\n#bonita.tenant.timetracker.csv.separator=;\n#bonita.tenant.timetracker.memory.activateAtStart=false\n#bonita.tenant.timetracker.memory.maxSize=1000000\n#\n## Default tenant cache: used if not specific cache is defined\n#bonita.tenant.cache.default.maxElementsInMemory=1000\n#bonita.tenant.cache.default.inMemoryOnly=true\n#bonita.tenant.cache.default.eternal=true\n#bonita.tenant.cache.default.evictionPolicy=LRU\n#bonita.tenant.cache.default.timeToLiveSeconds=3600\n#bonita.tenant.cache.default.maxElementsOnDisk=20000\n#bonita.tenant.cache.default.copyOnRead=false\n#bonita.tenant.cache.default.copyOnWrite=false\n#bonita.tenant.cache.default.readIntensive=false\n#\n## Connector service cache configuration\n#bonita.tenant.cache.connector.maxElementsInMemory=10000\n#bonita.tenant.cache.connector.inMemoryOnly=false\n#bonita.tenant.cache.connector.eternal=false\n#bonita.tenant.cache.connector.evictionPolicy=LRU\n#bonita.tenant.cache.connector.timeToLiveSeconds=3600\n#bonita.tenant.cache.connector.maxElementsOnDisk=20000\n#bonita.tenant.cache.connector.copyOnRead=false\n#bonita.tenant.cache.connector.copyOnWrite=false\n#bonita.tenant.cache.connector.readIntensive=true\n#\n## Parameter service cache configuration\n#bonita.tenant.cache.parameter.maxElementsInMemory=10000\n#bonita.tenant.cache.parameter.inMemoryOnly=false\n#bonita.tenant.cache.parameter.eternal=false\n#bonita.tenant.cache.parameter.evictionPolicy=LRU\n#bonita.tenant.cache.parameter.timeToLiveSeconds=3600\n#bonita.tenant.cache.parameter.maxElementsOnDisk=20000\n#bonita.tenant.cache.parameter.copyOnRead=false\n#bonita.tenant.cache.parameter.copyOnWrite=false\n#bonita.tenant.cache.parameter.readIntensive=false\n#\n## Process Definition service cache configuration\n#bonita.tenant.cache.processdef.maxElementsInMemory=10000\n#bonita.tenant.cache.processdef.inMemoryOnly=true\n#bonita.tenant.cache.processdef.eternal=false\n#bonita.tenant.cache.processdef.evictionPolicy=LRU\n#bonita.tenant.cache.processdef.timeToLiveSeconds=3600\n#bonita.tenant.cache.processdef.maxElementsOnDisk=20000\n#bonita.tenant.cache.processdef.copyOnRead=false\n#bonita.tenant.cache.processdef.copyOnWrite=false\n#bonita.tenant.cache.processdef.readIntensive=false\n#\n## User FIlter service cache configuration\n#bonita.tenant.cache.userfilter.maxElementsInMemory=10000\n#bonita.tenant.cache.userfilter.inMemoryOnly=false\n#bonita.tenant.cache.userfilter.eternal=false\n#bonita.tenant.cache.userfilter.evictionPolicy=LRU\n#bonita.tenant.cache.userfilter.timeToLiveSeconds=3600\n#bonita.tenant.cache.userfilter.maxElementsOnDisk=20000\n#bonita.tenant.cache.userfilter.copyOnRead=false\n#bonita.tenant.cache.userfilter.copyOnWrite=false\n#bonita.tenant.cache.userfilter.readIntensive=false\n#\n## Groovy script service cache configuration\n#bonita.tenant.cache.groovy.maxElementsInMemory=10000\n#bonita.tenant.cache.groovy.inMemoryOnly=true\n#bonita.tenant.cache.groovy.eternal=true\n#bonita.tenant.cache.groovy.evictionPolicy=LRU\n#bonita.tenant.cache.groovy.timeToLiveSeconds=3600\n#bonita.tenant.cache.groovy.maxElementsOnDisk=20000\n#bonita.tenant.cache.groovy.copyOnRead=false\n#bonita.tenant.cache.groovy.copyOnWrite=false\n#bonita.tenant.cache.groovy.readIntensive=false\\\n#\n## Transient Data service cache configuration\n#bonita.tenant.cache.transientdata.maxElementsInMemory=10000\n#bonita.tenant.cache.transientdata.inMemoryOnly=true\n#bonita.tenant.cache.transientdata.eternal=true\n#bonita.tenant.cache.transientdata.evictionPolicy=LRU\n#bonita.tenant.cache.transientdata.timeToLiveSeconds=3600\n#bonita.tenant.cache.transientdata.maxElementsOnDisk=20000\n#bonita.tenant.cache.transientdata.copyOnRead=false\n#bonita.tenant.cache.transientdata.copyOnWrite=false\n#bonita.tenant.cache.transientdata.readIntensive=false\\\n#\n## Business Data Repository hibernate configuration\n#bonita.tenant.bdm.repository.show_sql=false\n#bonita.tenant.bdm.repository.format_sql=false\n#bonita.tenant.bdm.repository.validator.autoregister_listeners=false\n#bonita.tenant.bdm.repository.validator.apply_to_ddl=false\n#bonita.tenant.bdm.repository.javax.persistence.validation.mode=NONE\n#\n## Business Data Schema manager\n#bonita.tenant.bdm.schemamanager.show_sql=true\n#bonita.tenant.bdm.schemamanager.format_sql=true\n#bonita.tenant.bdm.schemamanager.validator.autoregister_listeners=false\n#bonita.tenant.bdm.schemamanager.validator.apply_to_ddl=false\n#bonita.tenant.bdm.schemamanager.javax.persistence.validation.mode=NONE\n#\n## Page and form mapping authorization rules\n## you can customize this mapping by defining your own bean\n## that implement org.bonitasoft.engine.core.form.AuthorizationRuleMapping\n## and a set of org.bonitasoft.engine.page.AuthorizationRule\n## to be declared in bonita-tenant-custom.xml\n##bonita.tenant.authorization.rule.mapping=customAuthorizationRuleMapping\n#bonita.tenant.authorization.rule.mapping=defaultAuthorizationRuleMapping\n## to restore pre-7.3.0 behavior (where manager of user involved in process instance could access Case Overview), use this implementation below instead:\n##bonita.tenant.authorization.rule.mapping=managerInvolvedAuthorizationRuleMappingImpl\n#\n'),(1,'TENANT_ENGINE','bonita-tenants-custom.xml','<beans xmlns=\"http://www.springframework.org/schema/beans\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd\">\n\n    <!-- ADD ANY BEAN DEFINITION YOU WANT TO BE AVAILABLE TO THE TENANT ACCESSOR -->\n\n    <!--\n    <bean id=\"flushEventListeners\" parent=\"defaultFlushEventListeners\" class=\"org.springframework.beans.factory.config.ListFactoryBean\">\n        <property name=\"sourceList\">\n            <list merge=\"true\">\n            </list>\n        </property>\n    </bean>\n    -->\n\n    <!--\n    <bean id=\"activatedRecords\" parent=\"defaultActivatedRecords\" class=\"org.springframework.beans.factory.config.ListFactoryBean\">\n        <property name=\"sourceList\">\n            <list merge=\"true\">\n            </list>\n        </property>\n    </bean>\n    -->\n\n\n    <!-- custom authorization rule mapping must implement org.bonitasoft.engine.core.form.AuthorizationRuleMapping -->\n    <!--\n    <bean id=\"customAuthorizationRuleMapping\"\n          class=\"org.bonitasoft.engine.core.form.impl.custom.CustomAuthorizationRuleMappingImpl\"/>\n    -->\n\n    <!-- custom authorization rules must implements org.bonitasoft.engine.page.AuthorizationRule -->\n    <!--\n    <bean id=\"customIsProcessInitiatorRule\" class=\"org.bonitasoft.engine.core.form.impl.custom.CustomIsProcessInitiatorRule\">\n        <constructor-arg name=\"processInstanceService\" ref=\"processInstanceService\"/>\n        <constructor-arg name=\"sessionService\" ref=\"sessionService\"/>\n        <constructor-arg name=\"sessionAccessor\" ref=\"sessionAccessor\"/>\n    </bean>\n    -->\n\n\n    <!-- Authorization rule that also grants access to case overview page for a manager of a user involved in the case -->\n    <!--\n    <bean id=\"managerInvolvedAuthorizationRuleMappingImpl\"\n          class=\"org.bonitasoft.engine.core.form.impl.ManagerInvolvedAuthorizationRuleMappingImpl\"/>\n\n    <bean id=\"isManagerOfUserInvolvedInProcessInstanceRule\" class=\"org.bonitasoft.engine.page.IsManagerOfUserInvolvedInProcessInstanceRule\">\n        <constructor-arg name=\"sessionAccessor\" ref=\"sessionAccessor\"/>\n        <constructor-arg name=\"sessionService\" ref=\"sessionService\"/>\n        <constructor-arg name=\"processInvolvementDelegate\" ref=\"processInvolvementDelegate\"/>\n    </bean>\n    -->\n\n</beans>\n'),(1,'TENANT_PORTAL','authenticationManager-config.properties','auth.AuthenticationManager=org.bonitasoft.console.common.server.auth.impl.standard.StandardAuthenticationManagerImpl\n#auth.AuthenticationManager = org.bonitasoft.console.common.server.auth.impl.oauth.OAuthAuthenticationManagerImpl\n# OAuth.serviceProvider = LinkedIn\n# OAuth.consumerKey = ove2vcdjptar\n# OAuth.consumerSecret = vdaBrCmHvkgJoYz1\n# OAuth.callbackURL = http://127.0.0.1:8888/loginservice\n#auth.AuthenticationManager = org.bonitasoft.console.common.server.auth.impl.jaas.JAASAuthenticationManagerImpl\n'),(1,'TENANT_PORTAL','autologin-v6.json','[]'),(1,'TENANT_PORTAL','compound-permissions-mapping.properties','##\n# List of permissions used for each pages.\n# The content of this file is handled by the portal, it should not be modified\n##\ncustompage_htmlexample=[tenant_platform_visualization, profile_visualization, organization_visualization, profile_member_visualization, avatars]\npagelisting=[profile_visualization, profile_management, organization_visualization, tenant_platform_visualization, download_document, profile_member_visualization, profile_member_management, avatars]\nimportexportorganization=[tenant_platform_visualization, organization_management, organization_visualization, profile_visualization, download_document, profile_member_visualization, avatars]\ntenantMaintenance=[tenant_platform_management, tenant_platform_visualization, download_document, avatars]\nprocesslistinguser=[profile_visualization, process_visualization, process_comment, process_categories, license, process_actor_mapping_visualization, organization_visualization, case_visualization, task_management, connector_visualization, tenant_platform_visualization, task_visualization, flownode_management, case_start, download_document, profile_member_visualization, form_visualization, bdm_visualization, form_file_upload, avatars]\nprocesslistingpm=[process_visualization, process_management, process_manager_management, flownode_management, tenant_platform_visualization, flownode_visualization, task_visualization, process_manager_visualization, process_comment, process_categories, document_visualization, license, process_actor_mapping_visualization, organization_visualization, activity_visualization, case_visualization, task_management, connector_visualization, download_document, form_visualization, form_management, bdm_visualization, form_file_upload, avatars]\ntasklistingadmin=[process_visualization, connector_management, flownode_management, tenant_platform_visualization, flownode_visualization, task_visualization, profile_visualization, process_categories, process_comment, license, process_actor_mapping_visualization, organization_visualization, case_visualization, task_management, connector_visualization, download_document, profile_member_visualization, form_visualization, bdm_visualization, form_file_upload, avatars]\nuserlistingadmin=[profile_visualization, process_comment, organization_visualization, tenant_platform_visualization, organization_management, download_document, profile_member_visualization, avatars]\nrolelistingadmin=[profile_visualization, process_comment, organization_visualization, tenant_platform_visualization, organization_management, download_document, profile_member_visualization, avatars]\ntasklistinguser=[profile_visualization, process_visualization, process_comment, process_categories, license, process_actor_mapping_visualization, organization_visualization, case_visualization, task_management, connector_visualization, tenant_platform_visualization, task_visualization, flownode_management, download_document, profile_member_visualization, form_visualization, form_file_upload, avatars]\nprofilelisting=[profile_visualization, process_comment, profile_management, organization_visualization, tenant_platform_visualization, organization_management, download_document, profile_member_visualization, profile_member_management, avatars]\ncaselistingadmin=[case_delete, process_visualization, connector_management, flownode_management, tenant_platform_visualization, flownode_visualization, task_visualization, case_management, profile_visualization, process_categories, process_comment, document_visualization, license, process_actor_mapping_visualization, organization_visualization, case_visualization, task_management, connector_visualization, download_document, profile_member_visualization, form_visualization, bdm_visualization, avatars]\nthememoredetailsadminext=[profile_visualization, look_and_feel, organization_visualization, tenant_platform_visualization, download_document, profile_member_visualization, avatars]\nprocesslistingadmin=[process_Enable, connector_management, process_management, tenant_platform_visualization, flownode_visualization, task_visualization, process_manager_visualization, process_disable, process_comment, document_visualization, process_actor_mapping_visualization, organization_visualization, case_visualization, process_actor_mapping_management, case_start_for, process_visualization, process_manager_management, flownode_management, process_deploy, profile_visualization, case_management, process_categories, license, activity_visualization, task_management, connector_visualization, download_document, profile_member_visualization, form_visualization, form_management, bdm_visualization, form_file_upload, avatars]\ntasklistingpm=[profile_visualization, process_visualization, process_comment, process_categories, process_actor_mapping_visualization, organization_visualization, case_visualization, task_management, flownode_management, connector_visualization, tenant_platform_visualization, flownode_visualization, task_visualization, download_document, profile_member_visualization, form_visualization, bdm_visualization, form_file_upload, avatars]\ncaselistingpm=[case_delete, process_visualization, process_categories, process_comment, document_visualization, process_actor_mapping_visualization, organization_visualization, case_visualization, task_management, flownode_management, connector_visualization, tenant_platform_visualization, flownode_visualization, task_visualization, download_document, form_visualization, bdm_visualization, avatars]\napplicationslistingadmin=[tenant_platform_visualization, application_management, application_visualization, organization_visualization, profile_visualization, download_document, profile_member_visualization, avatars]\nbusinessdatamodelimport=[bdm_management, tenant_platform_visualization, bdm_visualization, download_document, avatars]\ngrouplistingadmin=[profile_visualization, process_comment, organization_visualization, tenant_platform_visualization, organization_management, download_document, profile_member_visualization, avatars]\ncaselistinguser=[profile_visualization, process_visualization, process_comment, process_categories, license, process_actor_mapping_visualization, organization_visualization, case_visualization, task_management, connector_visualization, tenant_platform_visualization, task_visualization, flownode_management, download_document, profile_member_visualization, form_visualization, bdm_visualization, avatars]\nreportlistingadminext=[bpm_monitoring_management, process_Enable, connector_management, process_management, tenant_platform_visualization, flownode_visualization, task_visualization, process_manager_visualization, process_disable, process_comment, document_visualization, process_actor_mapping_visualization, organization_visualization, case_visualization, process_actor_mapping_management, case_start_for, process_visualization, bpm_monitoring_visualization, process_manager_management, flownode_management, process_deploy, profile_visualization, case_management, process_categories, license, activity_visualization, task_management, connector_visualization, download_document, profile_member_visualization, avatars]\ncustompage_groovyexample=[tenant_platform_visualization, profile_visualization, organization_visualization, avatars]\ncustompage_home=[tenant_platform_visualization, profile_visualization, organization_visualization, avatars]\ncustompage_defaultlayout=[tenant_platform_visualization, profile_visualization, organization_visualization, application_visualization, avatars]\ncustompage_apiExtensionViewer=[demo_permission, profile_visualization, tenant_platform_visualization, organization_visualization, avatars]\ncustompage_tasklist=[tenant_platform_visualization, task_visualization, task_management, process_visualization, case_visualization, form_visualization, process_comment, avatars]\n'),(1,'TENANT_PORTAL','console-config.properties','#This value represents MB, e.g 25 means 25MB.\nform.attachment.max.size                25\n#Set this value to true to reload the Index.groovy class every time a custom page is displayed\ncustom.page.debug                       false'),(1,'TENANT_PORTAL','custom-permissions-mapping.properties','##\n# Custom permissions file\n#\n# custom permissions can be defined like this\n# <type>|<identifier>=[<permission list>]\n#\n# type can be \'profile\' or \'user\'\n# identifier is the username or the profile name. Special characters like white space must be replaced with their unicode value (For example \\u0020 for the white space)\n# possible values for permissions can be found in the resources-permissions-mapping.properties file\n#\n##\n# example: the profile User have now the permission Organization management\n#profile|User=[organization_visualization]\n#profile|Process\\u0020manager=[organization_visualization]\n#\n# example: the user having username john have now the permission Organization management and Organization visualization\n#user|john=[organization_management, organization_visualization]'),(1,'TENANT_PORTAL','dynamic-permissions-checks.properties','##\n# Define dynamic check on resources\n#\n# If a dynamic check is defined on a resource it override the static check behavior\n# You can define dynamic rules like this:\n# <method>|<resource>=[<exclusions>, check <class name of the rule>]\n# exclusions is a list of elements like this: <type>|<identifier> where type is user or profile and identifier is the username or the profile name.\n# Special characters like white space must be replaced with their unicode value (For example \\u0020 for the white space)\n#\n# example: to protect a case to only users that can start the process and to william.jobs, walter.bates and all users having the Administrator or User profile\n# POST|bpm/case=[user|william.jobs, user|walter.bates, profile|Administrator, profile|Process\\u0020Manager, check|CasePermissionRule]\n#\n##\n# rules bellow are included by default in bonita and can be activated by uncommenting these lines\n## CasePermissionRule\n## Let a user access only cases that he is involved in and start cases that he can start\n#GET|bpm/case=[profile|Administrator, check|CasePermissionRule]\n#POST|bpm/case=[profile|Administrator, check|CasePermissionRule]\n#DELETE|bpm/case=[profile|Administrator, check|CasePermissionRule]\n#GET|bpm/archivedCase=[profile|Administrator, check|CasePermissionRule]\n#GET|bpm/case/*/context=[profile|Administrator, check|CaseContextPermissionRule]\n#GET|bpm/archivedCase/*/context=[profile|Administrator, check|CaseContextPermissionRule]\n#\n#\n## CaseVariablePermissionRule\n## Let a user get and update a variable of a case only if he is the process owner\n#GET|bpm/caseVariable=[profile|Administrator, check|CaseVariablePermissionRule]\n#PUT|bpm/caseVariable=[profile|Administrator, check|CaseVariablePermissionRule]\n#\n#\n## CommentPermissionRule\n## Let a user access only comments on cases that he is involved in\n#GET|bpm/comment=[profile|Administrator, check|CommentPermissionRule]\n#POST|bpm/comment=[profile|Administrator, check|CommentPermissionRule]\n#GET|bpm/archivedComment=[profile|Administrator, check|CommentPermissionRule]\n#\n#\n## DocumentPermissionRule\n## Let a user access only document on cases that he is involved in\n#GET|bpm/document=[profile|Administrator, check|DocumentPermissionRule]\n#POST|bpm/document=[profile|Administrator, check|DocumentPermissionRule]\n#PUT|bpm/document=[profile|Administrator, check|DocumentPermissionRule]\n#DELETE|bpm/document=[profile|Administrator, check|DocumentPermissionRule]\n#GET|bpm/archiveddocument=[profile|Administrator, check|DocumentPermissionRule]\n#GET|bpm/archivedCaseDocument=[profile|Administrator, check|DocumentPermissionRule]\n#GET|bpm/caseDocument=[profile|Administrator, check|DocumentPermissionRule]\n#POST|bpm/caseDocument=[profile|Administrator, check|DocumentPermissionRule]\n#PUT|bpm/caseDocument=[profile|Administrator, check|DocumentPermissionRule]\n#DELETE|bpm/caseDocument=[profile|Administrator, check|DocumentPermissionRule]\n#\n#\n## ProcessPermissionRule\n## Let the user do get only on processes he deployed or that he supervised\n#GET|bpm/process=[profile|Administrator, check|ProcessPermissionRule]\n#POST|bpm/process=[profile|Administrator, check|ProcessPermissionRule]\n#PUT|bpm/process=[profile|Administrator, check|ProcessPermissionRule]\n#DELETE|bpm/process=[profile|Administrator, check|ProcessPermissionRule]\n#GET|bpm/process/*/instantiation=[profile|Administrator, check|ProcessInstantiationPermissionRule]\n#POST|bpm/process/*/instantiation=[profile|Administrator, check|ProcessInstantiationPermissionRule]\n#\n#\n## ProcessResolutionProblemPermissionRule\n## Let a user see process resolution problem only if he is process owner\n#GET|bpm/processResolutionProblem=[profile|Administrator, check|ProcessResolutionProblemPermissionRule]\n#\n#\n## ProcessConfigurationPermissionRule\n## Let a user manage process connectors and parameters only if he is process owner\n#GET|bpm/processParameter=[profile|Administrator, check|ProcessConfigurationPermissionRule]\n#GET|bpm/processConnector=[profile|Administrator, check|ProcessConfigurationPermissionRule]\n#PUT|bpm/processConnector=[profile|Administrator, check|ProcessConfigurationPermissionRule]\n#\n#\n## ProcessConnectorDependencyPermissionRule\n## Let a user see process connector dependency problem only if he is process owner\n#GET|bpm/processConnectorDependency=[profile|Administrator, check|ProcessConnectorDependencyPermissionRule]\n#\n#\n## ActorPermissionRule\n## Let a user manage actors only if he is process owner\n#GET|bpm/actor=[profile|Administrator, check|ActorPermissionRule]\n#PUT|bpm/actor=[profile|Administrator, check|ActorPermissionRule]\n#\n#\n## ActorMemberPermissionRule\n## Let a user add an actorMember only if he is process owner\n#GET|bpm/actorMember=[profile|Administrator, check|ActorMemberPermissionRule]\n#POST|bpm/actorMember=[profile|Administrator, check|ActorMemberPermissionRule]\n#DELETE|bpm/actorMember=[profile|Administrator, profile|Process manager, check|ActorMemberPermissionRule]\n#\n#\n## ProcessSupervisorPermissionRule\n## Let a user view and add process only if he is process owner\n#GET|bpm/processSupervisor=[profile|Administrator, check|ProcessSupervisorPermissionRule]\n#POST|bpm/processSupervisor=[profile|Administrator, check|ProcessSupervisorPermissionRule]\n#DELETE|bpm/processSupervisor=[profile|Administrator, check|ProcessSupervisorPermissionRule]\n#\n#\n## TaskPermissionRule\n## Let a user access only tasks that are assigned or pending to him\n#GET|bpm/flowNode=[profile|Administrator, check|TaskPermissionRule]\n#PUT|bpm/flowNode=[profile|Administrator, check|TaskPermissionRule]\n#GET|bpm/activity=[profile|Administrator, check|TaskPermissionRule]\n#PUT|bpm/activity=[profile|Administrator, check|TaskPermissionRule]\n#GET|bpm/task=[profile|Administrator, check|TaskPermissionRule]\n#PUT|bpm/task=[profile|Administrator, check|TaskPermissionRule]\n#GET|bpm/humanTask=[profile|Administrator, check|TaskPermissionRule]\n#PUT|bpm/humanTask=[profile|Administrator, check|TaskPermissionRule]\n#GET|bpm/userTask=[profile|Administrator, check|TaskPermissionRule]\n#PUT|bpm/userTask=[profile|Administrator, check|TaskPermissionRule]\n#GET|bpm/hiddenUserTask=[profile|Administrator, check|TaskPermissionRule]\n#POST|bpm/hiddenUserTask=[profile|Administrator, check|TaskPermissionRule]\n#DELETE|bpm/hiddenUserTask=[profile|Administrator, check|TaskPermissionRule]\n#GET|bpm/manualTask=[profile|Administrator, check|TaskPermissionRule]\n#POST|bpm/manualTask=[profile|Administrator, check|TaskPermissionRule]\n#PUT|bpm/manualTask=[profile|Administrator, check|TaskPermissionRule]\n#GET|bpm/archivedFlowNode=[profile|Administrator, check|TaskPermissionRule]\n#GET|bpm/archivedActivity=[profile|Administrator, check|TaskPermissionRule]\n#GET|bpm/archivedTask=[profile|Administrator, check|TaskPermissionRule]\n#GET|bpm/archivedHumanTask=[profile|Administrator, check|TaskPermissionRule]\n#GET|bpm/archivedUserTask=[profile|Administrator, check|TaskPermissionRule]\n#GET|bpm/archivedManualTask=[profile|Administrator, check|TaskPermissionRule]\n#GET|bpm/archivedUserTask/*/context=[profile|Administrator, check|TaskExecutionPermissionRule]\n#GET|bpm/userTask/*/context=[profile|Administrator, check|TaskExecutionPermissionRule]\n#GET|bpm/userTask/*/contract=[profile|Administrator, check|TaskExecutionPermissionRule]\n#POST|bpm/userTask/*/execution=[profile|Administrator, check|TaskExecutionPermissionRule]\n#\n## ConnectorInstancePermissionRule\n## Let a user see process configuration only if he is process owner\n#GET|bpm/connectorInstance=[profile|Administrator, check|ConnectorInstancePermissionRule]\n#PUT|bpm/connectorInstance=[profile|Administrator, profile|Process manager, check|ConnectorInstancePermissionRule]\n#GET|bpm/archivedConnectorInstance=[profile|Administrator, check|ConnectorInstancePermissionRule]\n#GET|bpm/connectorFailure=[profile|Administrator, profile|Process manager]\n#\n#\n## UserPermissionRule\n## Let the user access and modify only himself\n#GET|identity/user=[profile|Administrator, profile|Process manager, check|UserPermissionRule]\n#POST|identity/user=[profile|Administrator, check|UserPermissionRule]\n#PUT|identity/user=[profile|Administrator, check|UserPermissionRule]\n#GET|identity/personalcontactdata=[profile|Administrator, check|UserPermissionRule]\n#POST|identity/personalcontactdata=[profile|Administrator, check|UserPermissionRule]\n#PUT|identity/personalcontactdata=[profile|Administrator, check|UserPermissionRule]\n#GET|identity/professionalcontactdata=[profile|Administrator, check|UserPermissionRule]\n#POST|identity/professionalcontactdata=[profile|Administrator, check|UserPermissionRule]\n#PUT|identity/professionalcontactdata=[profile|Administrator, check|UserPermissionRule]\n#\n#\n##ProfilePermissionRule\n## Secure profile related resources\n#GET|portal/profile=[profile|Administrator, check|ProfilePermissionRule]\n#POST|portal/profile=[profile|Administrator, check|ProfilePermissionRule]\n#PUT|portal/profile=[profile|Administrator, check|ProfilePermissionRule]\n#DELETE|portal/profile=[profile|Administrator, check|ProfilePermissionRule]\n#\n#\n##ProfileEntryPermissionRule\n## Secure profile related resources\n#GET|portal/profileEntry=[profile|Administrator, check|ProfileEntryPermissionRule]\n#POST|portal/profileEntry=[profile|Administrator, check|ProfileEntryPermissionRule]\n#PUT|portal/profileEntry=[profile|Administrator, check|ProfileEntryPermissionRule]\n#DELETE|portal/profileEntry=[profile|Administrator, check|ProfileEntryPermissionRule]\n#\n#\n##Servlets\n#GET|portal/documentDownload=[profile|Administrator, check|DocumentPermissionRule]\n#GET|portal/formsDocumentDownload=[profile|Administrator, check|DocumentPermissionRule]\n#GET|portal/downloadDocument=[profile|Administrator, check|DocumentPermissionRule]\n'),(1,'TENANT_PORTAL','forms-config.properties','forms.user-xp.url                       /bonita\nforms.default.application.layout        html/bonita_process_default.html\nforms.default.page.template             html/bonita_page_default.html\nforms.default.page.template.error       html/bonita_default_error.html\nforms.default.page.template.confirm     html/bonita_default_confirm.html\nforms.default.page.maxwidget            5\nforms.default.date.format               MMMM dd, yyyy\nforms.cache.processes.size              15\nforms.cache.process.ttl                 300000\nforms.cache.languages.size              5\nform.service.provider                   org.bonitasoft.forms.server.provider.impl.FormServiceProviderImpl\n#This value represents MB, e.g 15 means 15MB.\nform.attachment.max.size                15\nform.generation.auto                    true\nform.action.condition.enabled           true\nform.authorizations.manager.allowed     false\n'),(1,'TENANT_PORTAL','resources-permissions-mapping.properties','##\n# Define which permissions are needed to access resources using the REST API\n# Resource permissions can be defined like this\n# <verb>|<api name>/<resource name>/<id>=[<resource permission list>]\n#\n# verb can be \'GET\', \'POST\', \'PUT\' or \'DELETE\'\n#\n##\n# example of a default resource permission:\n# GET|identity/user=[organization_visualization]\n# It means that in order to GET user information, the logged user needs to have the organization_visualization permission.\n#\n# example of a custom resource permission:\n# GET|identity/user/3=[my_custom_permission]\n# It means that in order to GET the information of the user with id 3, the logged user needs to have my_custom_permission.\n##\n\n# Identity resources\nGET|identity/user=[organization_visualization]\nPOST|identity/user=[organization_management]\nPUT|identity/user=[organization_management]\nDELETE|identity/user=[organization_management]\nGET|identity/personalcontactdata=[organization_visualization]\nPOST|identity/personalcontactdata=[organization_management]\nPUT|identity/personalcontactdata=[organization_management]\nGET|identity/professionalcontactdata=[organization_visualization]\nPOST|identity/professionalcontactdata=[organization_management]\nPUT|identity/professionalcontactdata=[organization_management]\nGET|identity/role=[organization_visualization]\nPOST|identity/role=[organization_management]\nPUT|identity/role=[organization_management]\nDELETE|identity/role=[organization_management]\nGET|identity/group=[organization_visualization]\nPOST|identity/group=[organization_management]\nPUT|identity/group=[organization_management]\nDELETE|identity/group=[organization_management]\nGET|identity/membership=[organization_visualization]\nPOST|identity/membership=[organization_management]\nPUT|identity/membership=[organization_management]\nDELETE|identity/membership=[organization_management]\nGET|customuserinfo/user=[organization_visualization]\nGET|customuserinfo/definition=[organization_visualization]\nPOST|customuserinfo/definition=[organization_management]\nDELETE|customuserinfo/definition=[organization_management]\nGET|customuserinfo/value=[organization_visualization]\nPUT|customuserinfo/value=[organization_management]\n\n# BPM resources\nGET|bpm/process=[process_visualization, process_categories, process_actor_mapping_visualization, connector_visualization]\nPOST|bpm/process=[process_deploy]\nPUT|bpm/process=[case_start_for, process_actor_mapping_management, process_Enable, process_disable, process_management, process_categories, connector_management]\nDELETE|bpm/process=[process_deploy]\nGET|bpm/process/*/contract=[process_visualization]\nPOST|bpm/process/*/instantiation=[case_start, case_management]\nGET|bpm/processConnector=[connector_visualization, process_management]\nPUT|bpm/processConnector=[connector_management, process_management]\nGET|bpm/processConnectorDependency=[connector_visualization, process_management]\nPOST|bpm/processCategory=[process_management, process_categories]\nDELETE|bpm/processCategory=[process_management, process_categories]\nGET|bpm/processParameter=[process_management]\nPUT|bpm/processParameter=[process_management]\nGET|bpm/processSupervisor=[process_manager_visualization]\nPOST|bpm/processSupervisor=[process_manager_management]\nDELETE|bpm/processSupervisor=[process_manager_management]\nGET|bpm/actor=[process_visualization]\nGET|bpm/actorMember=[process_visualization, process_manager_visualization]\nPOST|bpm/actorMember=[process_management, process_manager_management]\nPUT|bpm/actorMember=[process_management, process_manager_management]\nDELETE|bpm/actorMember=[process_management, process_manager_management]\nGET|bpm/category=[process_categories]\nPOST|bpm/category=[process_categories]\nPUT|bpm/category=[process_categories]\nDELETE|bpm/category=[process_categories]\nGET|bpm/processResolutionProblem=[activity_visualization, flownode_visualization]\nGET|bpm/case=[case_visualization]\nPOST|bpm/case=[case_start, case_management]\nDELETE|bpm/case=[case_delete]\nGET|bpm/case/*/context=[case_visualization]\nGET|bpm/caseInfo=[case_visualization]\nGET|bpm/comment=[process_comment]\nPOST|bpm/comment=[process_comment]\nGET|bpm/archivedComment=[process_comment]\nGET|bpm/archivedCase=[case_visualization]\nDELETE|bpm/archivedCase=[case_delete]\nGET|bpm/archivedCase/*/context=[case_visualization]\nGET|bpm/caseVariable=[case_visualization]\nPUT|bpm/caseVariable=[case_management]\nGET|bpm/caseDocument=[document_visualization, case_visualization]\nPOST|bpm/caseDocument=[document_management, case_management]\nDELETE|bpm/caseDocument=[document_management, case_management]\nPUT|bpm/caseDocument=[document_management, case_management]\nGET|bpm/flowNode=[flownode_visualization]\nPUT|bpm/flowNode=[flownode_management]\nGET|bpm/activity=[flownode_visualization]\nPUT|bpm/activity=[flownode_management]\nGET|bpm/task=[flownode_visualization]\nPUT|bpm/task=[flownode_management]\nGET|bpm/humanTask=[task_visualization]\nPUT|bpm/humanTask=[task_management]\nGET|bpm/userTask=[task_visualization]\nPUT|bpm/userTask=[task_management]\nPOST|bpm/userTask=[task_management]\nGET|bpm/userTask/*/contract=[task_visualization]\nGET|bpm/userTask/*/context=[task_visualization]\nPOST|bpm/userTask/*/execution=[task_management]\nGET|bpm/manualTask=[task_visualization]\nPOST|bpm/manualTask=[task_management]\nPUT|bpm/manualTask=[task_management]\nGET|bpm/activityVariable=[flownode_visualization]\nGET|bpm/connectorInstance=[connector_visualization]\nPUT|bpm/connectorInstance=[connector_management]\nGET|bpm/archivedFlowNode=[flownode_visualization]\nGET|bpm/archivedActivity=[flownode_visualization]\nGET|bpm/archivedTask=[flownode_visualization]\nGET|bpm/archivedHumanTask=[task_visualization]\nGET|bpm/archivedUserTask=[task_visualization]\nGET|bpm/archivedUserTask/*/context=[task_visualization]\nGET|bpm/archivedManualTask=[task_visualization]\nGET|bpm/archivedConnectorInstance=[connector_visualization]\nGET|bpm/document=[document_visualization, case_visualization]\nPOST|bpm/document=[document_management, case_management]\nPUT|bpm/document=[document_management, case_management]\nDELETE|bpm/document=[document_management, case_management]\nGET|bpm/archiveddocument=[document_visualization, case_visualization]\nGET|bpm/archivedCaseDocument=[document_visualization, case_visualization]\nDELETE|bpm/archivedCaseDocument=[document_management, case_management]\nGET|bpm/command=[command_visualization]\nPOST|bpm/command=[command_management]\nPUT|bpm/command=[command_management]\nDELETE|bpm/command=[command_management]\nGET|bpm/connectorFailure=[connector_visualization]\nGET|bpm/timerEventTrigger=[flownode_visualization]\nPUT|bpm/timerEventTrigger=[flownode_management]\nGET|bpm/diagram=[process_visualization]\n\n# Portal resources\nGET|portal/profile=[profile_visualization]\nPOST|portal/profile=[profile_management]\nPUT|portal/profile=[profile_management]\nDELETE|portal/profile=[profile_management]\nGET|portal/bonitaPage=[profile_visualization]\nGET|portal/page=[profile_visualization]\nPOST|portal/page=[profile_management]\nPUT|portal/page=[profile_management]\nDELETE|portal/page=[profile_management]\nGET|portal/profileEntry=[profile_visualization]\nPOST|portal/profileEntry=[profile_management]\nPUT|portal/profileEntry=[profile_management]\nDELETE|portal/profileEntry=[profile_management]\nGET|portal/profileMember=[profile_member_visualization]\nPOST|portal/profileMember=[profile_member_management]\nDELETE|portal/profileMember=[profile_member_management]\nPOST|portal/theme=[look_and_feel]\nPUT|portal/theme=[look_and_feel]\n# Deprecated APIs\nGET|userXP/profile=[profile_visualization]\nPOST|userXP/profile=[profile_management]\nPUT|userXP/profile=[profile_management]\nDELETE|userXP/profile=[profile_management]\nGET|userXP/profileEntry=[profile_visualization]\nPOST|userXP/profileEntry=[profile_management]\nPUT|userXP/profileEntry=[profile_management]\nDELETE|userXP/profileEntry=[profile_management]\nGET|userXP/profileMember=[profile_member_visualization]\nPOST|userXP/profileMember=[profile_member_management]\nDELETE|userXP/profileMember=[profile_member_management]\nGET|userXP/bonitaPage=[profile_visualization]\nPOST|userXP/theme=[look_and_feel]\nPUT|userXP/theme=[look_and_feel]\n\n\n# Platform resources\nGET|system/session=[tenant_platform_visualization]\nGET|system/log=[tenant_platform_visualization]\nGET|system/tenant=[tenant_platform_visualization]\nPUT|system/tenant=[tenant_platform_management]\nGET|system/feature=[tenant_platform_visualization]\nGET|system/license=[license]\nGET|system/monitoring=[tenant_platform_visualization]\nGET|system/i18nlocale=[tenant_platform_visualization]\nGET|system/i18ntranslation=[tenant_platform_visualization]\nGET|monitoring/report=[bpm_monitoring_visualization]\nPOST|monitoring/report=[bpm_monitoring_management]\nDELETE|monitoring/report=[bpm_monitoring_management]\nGET|platform/platform=[tenant_platform_visualization]\nPOST|platform/platform=[tenant_platform_management]\nPUT|platform/platform=[tenant_platform_management]\nDELETE|platform/platform=[tenant_platform_management]\nGET|platform/jvmDynamic=[tenant_platform_visualization]\nGET|platform/jvmStatic=[tenant_platform_visualization]\nGET|platform/systemProperty=[tenant_platform_visualization]\nGET|platform/tenant=[tenant_platform_visualization]\nPOST|platform/tenant=[tenant_platform_management]\nPUT|platform/tenant=[tenant_platform_management]\nDELETE|platform/tenant=[tenant_platform_management]\nGET|platform/license=[platform_management]\nPOST|tenant/bdm=[bdm_management]\n\n# Living apps\nGET|living/application=[application_visualization]\nPOST|living/application=[application_management]\nPUT|living/application=[application_management]\nDELETE|living/application=[application_management]\nGET|living/application-page=[application_visualization]\nPOST|living/application-page=[application_management]\nPUT|living/application-page=[application_management]\nDELETE|living/application-page=[application_management]\nGET|living/application-menu=[application_visualization]\nPOST|living/application-menu=[application_management]\nPUT|living/application-menu=[application_management]\nDELETE|living/application-menu=[application_management]\n\n# BDM resources\nGET|bdm/businessData=[bdm_visualization]\nGET|bdm/businessDataReference=[bdm_visualization]\nGET|bdm/businessDataQuery=[bdm_visualization]\n\n# Form resources\nGET|form/mapping=[form_visualization]\nPUT|form/mapping=[form_management]\n\n# Servlets\nPOST|API/formFileUpload=[form_file_upload]\nPOST|portal/custom-page/API/formFileUpload=[form_file_upload]\nGET|API/avatars=[avatars]\nGET|portal/custom-page/API/avatars=[avatars]\nGET|API/documentDownload=[download_document]\nGET|portal/custom-page/API/documentDownload=[download_document]\nGET|portal/documentDownload=[download_document]\nGET|API/formsDocumentImage=[download_document]\nGET|portal/custom-page/API/formsDocumentImage=[download_document]\nGET|portal/formsDocumentImage=[download_document]\nGET|portal/custom-page/API/formsDocumentDownload=[download_document]\nGET|portal/formsDocumentDownload=[download_document]\n# Deprecated\nGET|portal/downloadDocument=[download_document]\nGET|portal/custom-page/API/downloadDocument=[download_document]\n\n# api extension examples\nGET|extension/demo/getExample=[demoPermission]\nGET|extension/demo/headerExample=[demoPermission]\nGET|extension/demo/logExample=[demoPermission]\nGET|extension/demo/soapExample=[demoPermission]\nGET|extension/demo/xmlExample=[demoPermission]\nPOST|extension/demo/postExample=[demoPermission]\n'),(1,'TENANT_PORTAL','security-config.properties','#It declares a Password Validator class, the default value can be changed according to your needs\nsecurity.password.validator org.bonitasoft.web.rest.server.api.organization.password.validator.DefaultPasswordValidator\n#Setting this value to false will deactivate the permissions checks on the REST API\nsecurity.rest.api.authorizations.check.enabled true\n#Set this value to true to reload the properties files and groovy classes every time they change (you sill need to logout and login if you add new custom permissions to a user)\nsecurity.rest.api.authorizations.check.debug   false\n'),(1,'TENANT_SECURITY_SCRIPTS','ActorMemberPermissionRule.groovy','/**\n * Copyright (C) 2014 BonitaSoft S.A.\n * BonitaSoft, 32 rue Gustave Eiffel - 38000 Grenoble\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 2.0 of the License, or\n * (at your option) any later version.\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n **/\n\n\nimport com.fasterxml.jackson.databind.ObjectMapper\nimport org.bonitasoft.engine.api.APIAccessor\nimport org.bonitasoft.engine.api.Logger\nimport org.bonitasoft.engine.api.permission.APICallContext\nimport org.bonitasoft.engine.api.permission.PermissionRule\nimport org.bonitasoft.engine.exception.NotFoundException\nimport org.bonitasoft.engine.session.APISession\n\n/**\n *\n * Let a user add an actorMember only if he is process owner\n *\n * <ul>\n *     <li>bpm/actorMember</li>\n *     <li>bpm/delegation</li>\n * </ul>\n *\n *\n *\n * @author Baptiste Mesta\n */\nclass ActorMemberPermissionRule implements PermissionRule {\n\n    public static final String ACTOR_ID = \"actor_id\"\n\n    @Override\n    public boolean isAllowed(APISession apiSession, APICallContext apiCallContext, APIAccessor apiAccessor, Logger logger) {\n        long currentUserId = apiSession.getUserId();\n        if (apiCallContext.isPOST()) {\n            return checkPostMethod(apiCallContext, apiAccessor, currentUserId, logger)\n        } else if (apiCallContext.isGET()) {\n            return checkGetMethod(apiCallContext, apiAccessor, currentUserId, logger)\n        } else if (apiCallContext.isDELETE()) {\n            //TODO unable to find an actor member with the API!\n            return false\n        }\n        //it\'s ok to read\n        return true\n    }\n\n    private boolean checkPostMethod(APICallContext apiCallContext, APIAccessor apiAccessor, long currentUserId, Logger logger) {\n\n        ObjectMapper mapper = new ObjectMapper();\n        def list = mapper.readValue(apiCallContext.getBody(), List.class)\n\n        for (int i = 0; i < list.size(); i++) {\n            def object = list.get(i)\n\n            def get = object.get(ACTOR_ID)\n            if(get == null){\n                continue\n            }\n            def actorId = Long.valueOf(get.toString())\n            if (actorId <= 0) {\n                continue\n            }\n            def processAPI = apiAccessor.getProcessAPI()\n            try {\n                def actor = processAPI.getActor(actorId)\n                def processDefinitionId = actor.getProcessDefinitionId()\n                if (!processAPI.isUserProcessSupervisor(processDefinitionId, currentUserId)) {\n                    return false\n                }\n            } catch (NotFoundException e) {\n                return true\n            }\n        }\n        return true\n    }\n\n    private boolean checkGetMethod(APICallContext apiCallContext, APIAccessor apiAccessor, long currentUserId, Logger logger) {\n        try {\n            def filters = apiCallContext.getFilters()\n            if (filters.containsKey(ACTOR_ID)) {\n                def processAPI = apiAccessor.getProcessAPI()\n                def actor = processAPI.getActor(Long.parseLong(filters.get(ACTOR_ID)))\n                def processDefinitionId = actor.getProcessDefinitionId()\n                return processAPI.isUserProcessSupervisor(processDefinitionId, currentUserId)\n            }\n            return true\n        } catch (NotFoundException e) {\n            return true\n        }\n    }\n}\n'),(1,'TENANT_SECURITY_SCRIPTS','ActorPermissionRule.groovy','/**\n * Copyright (C) 2014 BonitaSoft S.A.\n * BonitaSoft, 32 rue Gustave Eiffel - 38000 Grenoble\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 2.0 of the License, or\n * (at your option) any later version.\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n **/\n\n\nimport org.bonitasoft.engine.api.APIAccessor\nimport org.bonitasoft.engine.api.Logger\nimport org.bonitasoft.engine.api.permission.APICallContext\nimport org.bonitasoft.engine.api.permission.PermissionRule\nimport org.bonitasoft.engine.bpm.actor.ActorNotFoundException\nimport org.bonitasoft.engine.session.APISession\n\n/**\n *\n * Let a user manage actors only if he is process owner\n *\n * <ul>\n *     <li>bpm/actor</li>\n * </ul>\n *\n *\n *\n * @author Anthony Birembaut\n */\nclass ActorPermissionRule implements PermissionRule {\n\n    public static final String PROCESS_ID = \"process_id\"\n\n    @Override\n    public boolean isAllowed(APISession apiSession, APICallContext apiCallContext, APIAccessor apiAccessor, Logger logger) {\n        long currentUserId = apiSession.getUserId()\n        if (apiCallContext.isGET()) {\n            return checkGetMethod(apiCallContext, apiAccessor, currentUserId, logger)\n        } else if (apiCallContext.isPUT()) {\n            return checkPutMethod(apiCallContext, apiAccessor, currentUserId, logger)\n        }\n        return true\n    }\n\n    private boolean checkGetMethod(APICallContext apiCallContext, APIAccessor apiAccessor, long currentUserId, Logger logger) {\n        def resourceId = apiCallContext.getResourceId()\n        if (resourceId == null || resourceId.isEmpty()) {\n            def filters = apiCallContext.getFilters()\n            if(filters.containsKey(PROCESS_ID)){\n                def processAPI = apiAccessor.getProcessAPI()\n                return processAPI.isUserProcessSupervisor(Long.valueOf(filters.get(PROCESS_ID)),currentUserId)\n            }\n            return true\n        } else {\n            try {\n                return isProcessOwnerOfTheProcess(apiAccessor, resourceId, currentUserId)\n            } catch (ActorNotFoundException e) {\n                logger.debug(\"actor does not exists\")\n            }\n            return true\n        }\n    }\n\n    private boolean checkPutMethod(APICallContext apiCallContext, APIAccessor apiAccessor, long currentUserId, Logger logger) {\n        def resourceId = apiCallContext.getResourceId()\n        try {\n            return isProcessOwnerOfTheProcess(apiAccessor, resourceId, currentUserId)\n        } catch (ActorNotFoundException e) {\n            logger.debug(\"actor does not exists\")\n            return true\n        }\n    }\n\n    private isProcessOwnerOfTheProcess(APIAccessor apiAccessor, String actorId, long currentUserId) throws ActorNotFoundException {\n        def processAPI = apiAccessor.getProcessAPI()\n        def actor = processAPI.getActor(Long.valueOf(actorId))\n        return processAPI.isUserProcessSupervisor(actor.getProcessDefinitionId(), currentUserId)\n    }\n}\n'),(1,'TENANT_SECURITY_SCRIPTS','CaseContextPermissionRule.groovy','/**\n * Copyright (C) 2015 BonitaSoft S.A.\n * BonitaSoft, 32 rue Gustave Eiffel - 38000 Grenoble\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 2.0 of the License, or\n * (at your option) any later version.\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n **/\n\n\nimport com.fasterxml.jackson.databind.ObjectMapper\n\nimport org.bonitasoft.engine.api.APIAccessor\nimport org.bonitasoft.engine.api.Logger\nimport org.bonitasoft.engine.api.permission.APICallContext\nimport org.bonitasoft.engine.api.permission.PermissionRule\nimport org.bonitasoft.engine.bpm.process.ArchivedProcessInstancesSearchDescriptor\nimport org.bonitasoft.engine.exception.BonitaException;\nimport org.bonitasoft.engine.exception.NotFoundException\nimport org.bonitasoft.engine.identity.User\nimport org.bonitasoft.engine.identity.UserSearchDescriptor\nimport org.bonitasoft.engine.search.SearchOptionsBuilder\nimport org.bonitasoft.engine.search.SearchResult\nimport org.bonitasoft.engine.session.APISession\n\n/**\n *\n * Let a user access only cases that he is involved in and start cases that he can start\n *\n * <ul>\n *     <li>bpm/case/[id]/context</li>\n *     <li>bpm/archivedCase/[id]/context</li>\n * </ul>\n *\n *\n *\n * @author Anthony Birembaut\n */\nclass CaseContextPermissionRule implements PermissionRule {\n\n\n    @Override\n    public boolean isAllowed(APISession apiSession, APICallContext apiCallContext, APIAccessor apiAccessor, Logger logger) {\n        long currentUserId = apiSession.getUserId();\n        def processAPI = apiAccessor.getProcessAPI()\n        try {\n            def caseId = getCaseId(apiCallContext)\n            if (caseId <= 0) {\n                return true\n            }\n            // isInvolvedInProcessInstance() already checks the archived and non-archived involvement:\n            def isInvolved = processAPI.isInvolvedInProcessInstance(currentUserId, caseId) || processAPI.isManagerOfUserInvolvedInProcessInstance(currentUserId, caseId)\n            if (isInvolved) {\n                return true;\n            }\n            def processDefinitionId;\n            if (apiCallContext.getResourceName().startsWith(\"archived\")) {\n                processDefinitionId = processAPI.getArchivedProcessInstance(caseId).getProcessDefinitionId()\n            } else {\n                processDefinitionId = processAPI.getProcessInstance(caseId).getProcessDefinitionId()\n            }\n            return processAPI.isUserProcessSupervisor(processDefinitionId, currentUserId)\n        } catch (BonitaException e) {\n            //exception, allow user to have the 404 when the rest api will look for the resource:\n            return true\n        }\n    }\n    \n    private long getCaseId(APICallContext apiCallContext) {\n        def compoundResourceId = apiCallContext.getCompoundResourceId()\n        if (compoundResourceId == null || compoundResourceId.isEmpty()) {\n            return -1L\n        }\n        return Long.valueOf(compoundResourceId.get(0))\n    }\n}\n'),(1,'TENANT_SECURITY_SCRIPTS','CasePermissionRule.groovy','/**\n * Copyright (C) 2014 BonitaSoft S.A.\n * BonitaSoft, 32 rue Gustave Eiffel - 38000 Grenoble\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 2.0 of the License, or\n * (at your option) any later version.\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n **/\n\n\nimport com.fasterxml.jackson.databind.ObjectMapper\n\nimport org.bonitasoft.engine.api.APIAccessor\nimport org.bonitasoft.engine.api.Logger\nimport org.bonitasoft.engine.api.ProcessAPI\nimport org.bonitasoft.engine.api.permission.APICallContext\nimport org.bonitasoft.engine.api.permission.PermissionRule\nimport org.bonitasoft.engine.bpm.process.ArchivedProcessInstancesSearchDescriptor\nimport org.bonitasoft.engine.exception.BonitaException;\nimport org.bonitasoft.engine.exception.NotFoundException\nimport org.bonitasoft.engine.identity.User\nimport org.bonitasoft.engine.identity.UserSearchDescriptor\nimport org.bonitasoft.engine.search.SearchOptionsBuilder\nimport org.bonitasoft.engine.search.SearchResult\nimport org.bonitasoft.engine.session.APISession\n\n/**\n *\n * Let a user access only cases that he is involved in and start cases that he can start\n *\n * <ul>\n *     <li>bpm/case</li>\n *     <li>bpm/archivedCase</li>\n * </ul>\n *\n *\n *\n * @author Baptiste Mesta\n * @author Anthony Birembaut\n */\nclass CasePermissionRule implements PermissionRule {\n\n\n    @Override\n    public boolean isAllowed(APISession apiSession, APICallContext apiCallContext, APIAccessor apiAccessor, Logger logger) {\n        long currentUserId = apiSession.getUserId();\n        if (apiCallContext.isGET()) {\n            return checkGetMethod(apiCallContext, apiAccessor, currentUserId, logger)\n        } else if (apiCallContext.isPOST()) {\n            return checkPostMethod(apiCallContext, apiAccessor, currentUserId, logger)\n        }\n        return false\n    }\n\n    private boolean checkPostMethod(APICallContext apiCallContext, APIAccessor apiAccessor, long currentUserId, Logger logger) {\n\n        ObjectMapper mapper = new ObjectMapper();\n        def map = mapper.readValue(apiCallContext.getBody(), Map.class)\n\n        def string = map.get(\"processDefinitionId\")\n        if (string == null || string.toString().isEmpty()) {\n            return true;\n        }\n        def processDefinitionId = Long.valueOf(string.toString())\n        if (processDefinitionId <= 0) {\n            return true;\n        }\n        def processAPI = apiAccessor.getProcessAPI()\n        def identityAPI = apiAccessor.getIdentityAPI()\n        User user = identityAPI.getUser(currentUserId);\n        SearchOptionsBuilder searchOptionBuilder = new SearchOptionsBuilder(0, 10);\n        searchOptionBuilder.filter(UserSearchDescriptor.USER_NAME, user.getUserName());\n        SearchResult<User> listUsers = processAPI.searchUsersWhoCanStartProcessDefinition(processDefinitionId, searchOptionBuilder.done());\n        logger.debug(\"RuleCase : nb Result [\" + listUsers.getCount() + \"] ?\");\n        def canStart = listUsers.getCount() == 1\n        logger.debug(\"RuleCase : User allowed to start? \" + canStart)\n        return canStart\n    }\n    \n    private boolean isInvolved(ProcessAPI processAPI, long currentUserId, long processInstanceId) {\n        return processAPI.isInvolvedInProcessInstance(currentUserId, processInstanceId) || processAPI.isManagerOfUserInvolvedInProcessInstance(currentUserId, processInstanceId)\n    }\n\n    private boolean checkGetMethod(APICallContext apiCallContext, APIAccessor apiAccessor, long currentUserId, Logger logger) {\n        def processAPI = apiAccessor.getProcessAPI()\n        def filters = apiCallContext.getFilters()\n        try {\n            if (apiCallContext.getResourceId() != null) {\n                def processDefinitionId;\n                if (apiCallContext.getResourceName().startsWith(\"archived\")) {\n                    def archivedProcessInstanceId = Long.valueOf(apiCallContext.getResourceId())\n                    def archivedProcessInstance = processAPI.getArchivedProcessInstance(archivedProcessInstanceId)\n                    def processInstanceId = archivedProcessInstance.getSourceObjectId()\n                    if (isInvolved(processAPI, currentUserId, processInstanceId)) {\n                        return true;\n                    }\n                    processDefinitionId = archivedProcessInstance.getProcessDefinitionId()\n                } else {\n                    def processInstanceId = Long.valueOf(apiCallContext.getResourceId())\n                    if (isInvolved(processAPI, currentUserId, processInstanceId)) {\n                        return true;\n                    }\n                    processDefinitionId = processAPI.getProcessInstance(processInstanceId).getProcessDefinitionId()\n                }\n                logger.debug(\"RuleCase : allowed because get on process that user is involved in\")\n                return processAPI.isUserProcessSupervisor(processDefinitionId, currentUserId)\n            } else {\n                def stringUserId = String.valueOf(currentUserId)\n                if (stringUserId.equals(filters.get(\"started_by\")) || stringUserId.equals(filters.get(\"user_id\")) || stringUserId.equals(filters.get(\"supervisor_id\"))) {\n                    logger.debug(\"RuleCase : allowed because searching filters contains user id\")\n                    return true\n                }\n                if (filters.containsKey(\"processDefinitionId\")) {\n                    return processAPI.isUserProcessSupervisor(Long.valueOf(filters.get(\"processDefinitionId\")), currentUserId)\n                }\n                if (\"archivedCase\".equals(apiCallContext.getResourceName()) && filters.containsKey(\"sourceObjectId\")) {\n                    def sourceCase = Long.valueOf(filters.get(\"sourceObjectId\"))\n                    final SearchOptionsBuilder opts = new SearchOptionsBuilder(0, 1);\n                    opts.filter(ArchivedProcessInstancesSearchDescriptor.SOURCE_OBJECT_ID, sourceCase);\n                    def result = processAPI.searchArchivedProcessInstancesInvolvingUser(currentUserId, opts.done())\n                    def archivedProcessInstance = processAPI.getFinalArchivedProcessInstance(sourceCase)\n                    return result.getCount() == 1 || processAPI.isUserProcessSupervisor(archivedProcessInstance.getProcessDefinitionId(), currentUserId)\n                }\n            }\n        } catch (BonitaException e) {\n            //exception, allow user to have the 404 when the rest api will look for the resource:\n            return true\n        }\n        return false;\n    }\n}\n'),(1,'TENANT_SECURITY_SCRIPTS','CaseVariablePermissionRule.groovy','/**\n * Copyright (C) 2014 BonitaSoft S.A.\n * BonitaSoft, 32 rue Gustave Eiffel - 38000 Grenoble\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 2.0 of the License, or\n * (at your option) any later version.\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n **/\n\n\n\n\nimport org.bonitasoft.engine.api.APIAccessor\nimport org.bonitasoft.engine.api.Logger\nimport org.bonitasoft.engine.api.permission.APICallContext\nimport org.bonitasoft.engine.api.permission.PermissionRule\nimport org.bonitasoft.engine.exception.NotFoundException\nimport org.bonitasoft.engine.session.APISession\n\n/**\n *\n * Let a user get and update a variable of a case only if he is the process owner\n *\n * <ul>\n *     <li>bpm/caseVariable</li>\n * </ul>\n *\n *\n *\n * @author Baptiste Mesta\n */\nclass CaseVariablePermissionRule implements PermissionRule {\n\n\n    @Override\n    public boolean isAllowed(APISession apiSession, APICallContext apiCallContext, APIAccessor apiAccessor, Logger logger) {\n        long currentUserId = apiSession.getUserId();\n        def resourceId = apiCallContext.getResourceId()\n        def processAPI = apiAccessor.getProcessAPI()\n        try {\n            if ((apiCallContext.isPUT() || apiCallContext.isGET()) && resourceId != null) {\n                // Resource format: <processInstanceId>/<caseVariableName>\n                def caseId = Long.valueOf(resourceId.tokenize(\"/\").first())\n                def processInstance = processAPI.getProcessInstance(caseId)\n                return processAPI.isUserProcessSupervisor(processInstance.getProcessDefinitionId(), currentUserId)\n            }\n\n            def filters = apiCallContext.getFilters()\n            if (apiCallContext.isGET() && filters.containsKey(\"case_id\")) {\n                def caseId = Long.valueOf(filters.get(\"case_id\"))\n                def processInstance = processAPI.getProcessInstance(caseId)\n                return processAPI.isUserProcessSupervisor(processInstance.getProcessDefinitionId(), currentUserId)\n            }\n            return false\n        } catch (NotFoundException e) {\n            return true\n        }\n    }\n}\n'),(1,'TENANT_SECURITY_SCRIPTS','CommentPermissionRule.groovy','/**\n * Copyright (C) 2014 BonitaSoft S.A.\n * BonitaSoft, 32 rue Gustave Eiffel - 38000 Grenoble\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 2.0 of the License, or\n * (at your option) any later version.\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n **/\n\nimport com.fasterxml.jackson.databind.ObjectMapper\n\nimport org.bonitasoft.engine.api.APIAccessor\nimport org.bonitasoft.engine.api.Logger\nimport org.bonitasoft.engine.api.ProcessAPI\nimport org.bonitasoft.engine.api.permission.APICallContext\nimport org.bonitasoft.engine.api.permission.PermissionRule\nimport org.bonitasoft.engine.bpm.process.ArchivedProcessInstancesSearchDescriptor\nimport org.bonitasoft.engine.exception.BonitaException;\nimport org.bonitasoft.engine.exception.NotFoundException\nimport org.bonitasoft.engine.search.SearchOptionsBuilder\nimport org.bonitasoft.engine.session.APISession\n\n/**\n *\n * Let a user access only comments on cases that he is involved in\n *\n * <ul>\n *     <li>bpm/comment</li>\n *     <li>bpm/archivedComment</li>\n * </ul>\n *\n *\n *\n * @author Baptiste Mesta\n */\nclass CommentPermissionRule implements PermissionRule {\n\n\n    @Override\n    public boolean isAllowed(APISession apiSession, APICallContext apiCallContext, APIAccessor apiAccessor, Logger logger) {\n        long currentUserId = apiSession.getUserId();\n        if (apiCallContext.isGET()) {\n            return checkGetMethod(apiCallContext, apiAccessor, currentUserId)\n        } else if (apiCallContext.isPOST()) {\n            return checkPostMethod(apiCallContext, apiAccessor, currentUserId, logger)\n        }\n        return false\n    }\n\n    private boolean checkPostMethod(APICallContext apiCallContext, APIAccessor apiAccessor, long currentUserId, Logger logger) {\n\n        ObjectMapper mapper = new ObjectMapper();\n        def map = mapper.readValue(apiCallContext.getBody(), Map.class)\n\n        def string = map.get(\"processInstanceId\")\n        if (string == null || string.toString().isEmpty()) {\n            return true;\n        }\n        def processInstanceId = Long.valueOf(string.toString())\n        if (processInstanceId <= 0) {\n            return true;\n        }\n        def processAPI = apiAccessor.getProcessAPI()\n        return isInvolved(processAPI, currentUserId, processInstanceId) || isSupervisor(processAPI, processInstanceId, currentUserId)\n    }\n\n    private boolean checkGetMethod(APICallContext apiCallContext, APIAccessor apiAccessor, long currentUserId) {\n        def filters = apiCallContext.getFilters()\n        def stringUserId = String.valueOf(currentUserId)\n        if (stringUserId.equals(filters.get(\"team_manager_id\")) || stringUserId.equals(filters.get(\"user_id\")) || stringUserId.equals(filters.get(\"supervisor_id\"))) {\n            return true\n        }\n        if (filters.containsKey(\"processInstanceId\")) {\n            def processInstanceId = Long.valueOf(filters.get(\"processInstanceId\"))\n\n            def processAPI = apiAccessor.getProcessAPI()\n            return isInvolved(processAPI, currentUserId, processInstanceId) || isSupervisor(processAPI, processInstanceId, currentUserId)\n        }\n        return false\n    }\n\n    private boolean isInvolved(ProcessAPI processAPI, long currentUserId, long processInstanceId) {\n        try {\n            return processAPI.isInvolvedInProcessInstance(currentUserId, processInstanceId) || processAPI.isManagerOfUserInvolvedInProcessInstance(currentUserId, processInstanceId)\n        } catch (BonitaException e) {\n            return true\n        }\n    }\n\n    private boolean isSupervisor(ProcessAPI processAPI, long processInstanceId, long currentUserId) {\n        def processDefinitionId\n        try {\n            processDefinitionId = processAPI.getProcessInstance(processInstanceId).getProcessDefinitionId()\n        } catch (NotFoundException e) {\n            try {\n                processDefinitionId = processAPI.getFinalArchivedProcessInstance(processInstanceId).getProcessDefinitionId()\n            } catch (NotFoundException e1) {\n                return true\n            }\n        }\n        return processAPI.isUserProcessSupervisor(processDefinitionId, currentUserId)\n    }\n}\n'),(1,'TENANT_SECURITY_SCRIPTS','ConnectorInstancePermissionRule.groovy','/**\n * Copyright (C) 2014 BonitaSoft S.A.\n * BonitaSoft, 32 rue Gustave Eiffel - 38000 Grenoble\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 2.0 of the License, or\n * (at your option) any later version.\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n **/\n\n\nimport org.bonitasoft.engine.api.APIAccessor\nimport org.bonitasoft.engine.api.Logger\nimport org.bonitasoft.engine.api.permission.APICallContext\nimport org.bonitasoft.engine.api.permission.PermissionRule\nimport org.bonitasoft.engine.bpm.flownode.ArchivedFlowNodeInstanceSearchDescriptor\nimport org.bonitasoft.engine.bpm.flownode.FlowNodeInstanceNotFoundException\nimport org.bonitasoft.engine.exception.SearchException\nimport org.bonitasoft.engine.search.SearchOptionsBuilder\nimport org.bonitasoft.engine.session.APISession\n\n/**\n *\n * Let a user see process configuration only if he is process owner\n *\n * <ul>\n *     <li>bpm/connectorInstance</li>\n *     <li>bpm/archivedConnectorInstance</li>\n * </ul>\n *\n *\n *\n * @author Anthony Birembaut\n */\nclass ConnectorInstancePermissionRule implements PermissionRule {\n\n    public static final String CONTAINER_ID = \"containerId\"\n\n    @Override\n    public boolean isAllowed(APISession apiSession, APICallContext apiCallContext, APIAccessor apiAccessor, Logger logger) {\n        long currentUserId = apiSession.getUserId()\n        if (apiCallContext.isGET()) {\n            return checkGetMethod(apiCallContext, apiAccessor, currentUserId, logger)\n        } else if (apiCallContext.isPUT()) {\n            //TODO unable to find a connector instance with the API!\n            return false\n        }\n        return true\n    }\n\n    private boolean checkGetMethod(APICallContext apiCallContext, APIAccessor apiAccessor, long currentUserId, Logger logger) {\n        def filters = apiCallContext.getFilters()\n        if(filters.containsKey(CONTAINER_ID)){\n            def processAPI = apiAccessor.getProcessAPI()\n            def processID\n            if (apiCallContext.getResourceName().startsWith(\"archived\")) {\n                try {\n                    def searchOptions = new SearchOptionsBuilder(0, 1)\n                    searchOptions.filter(ArchivedFlowNodeInstanceSearchDescriptor.ORIGINAL_FLOW_NODE_ID, Long.valueOf(filters.get(CONTAINER_ID)))\n                    def searchResult = processAPI.searchArchivedFlowNodeInstances(searchOptions.done())\n                    def archivedFlowNodeInstances = searchResult.getResult()\n                    if (archivedFlowNodeInstances.isEmpty()) {\n                        logger.debug(\"archived flow node does not exists\")\n                        return true\n                    } else {\n                        processID = archivedFlowNodeInstances.get(0).getProcessDefinitionId()\n                    }\n                } catch(SearchException e) {\n                    logger.debug(\"error while retrieving the archived flow node\")\n                    return true\n                }\n            } else {\n                try{\n                    def flowNodeInstance = processAPI.getFlowNodeInstance(Long.valueOf(filters.get(CONTAINER_ID)))\n                    processID = flowNodeInstance.getProcessDefinitionId()\n                } catch(FlowNodeInstanceNotFoundException e) {\n                    logger.debug(\"flow node does not exists\")\n                    return true\n                }\n            }\n            return processAPI.isUserProcessSupervisor(processID,currentUserId)\n        }\n        return false\n    }\n}\n'),(1,'TENANT_SECURITY_SCRIPTS','DocumentPermissionRule.groovy','/**\n * Copyright (C) 2014 BonitaSoft S.A.\n * BonitaSoft, 32 rue Gustave Eiffel - 38000 Grenoble\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 2.0 of the License, or\n * (at your option) any later version.\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n **/\n\nimport com.fasterxml.jackson.databind.ObjectMapper\n\nimport org.bonitasoft.engine.api.APIAccessor\nimport org.bonitasoft.engine.api.Logger\nimport org.bonitasoft.engine.api.ProcessAPI;\nimport org.bonitasoft.engine.api.permission.APICallContext\nimport org.bonitasoft.engine.api.permission.PermissionRule\nimport org.bonitasoft.engine.exception.BonitaException;\nimport org.bonitasoft.engine.exception.NotFoundException\nimport org.bonitasoft.engine.session.APISession\n\n/**\n *\n * Let a user access only document on cases that he is involved in\n *\n * <ul>\n *     <li>bpm/document</li>\n *     <li>bpm/archivedDocument</li>\n *     <li>bpm/caseDocument</li>\n * </ul>\n *\n *\n *\n * @author Baptiste Mesta\n * @author Truc Nguyen\n */\nclass DocumentPermissionRule implements PermissionRule {\n\n    public static final String CASE_ID = \"caseId\"\n    public static final String ARCHIVED_CASE_ID = \"archivedCaseId\"\n\n    @Override\n    public boolean isAllowed(APISession apiSession, APICallContext apiCallContext, APIAccessor apiAccessor, Logger logger) {\n        long currentUserId = apiSession.getUserId();\n        \n        def resourceId = apiCallContext.getResourceId()\n        if (resourceId != null) {\n            return checkMethodWithResourceId(resourceId, apiAccessor, currentUserId)\n        }\n        \n        if (apiCallContext.isGET()) {\n            return checkGetMethod(apiCallContext, apiAccessor, currentUserId)\n        } else if (apiCallContext.isPOST()) {\n            return checkPostMethod(apiCallContext, apiAccessor, currentUserId)\n        }\n        \n        return false\n    }\n\n    private boolean checkMethodWithResourceId(String resourceId, APIAccessor apiAccessor, long currentUserId) {\n        def processAPI = apiAccessor.getProcessAPI()\n        try {\n            long documentId = Long.valueOf(resourceId)\n            def processInstanceId = processAPI.getDocument(documentId).getProcessInstanceId()\n            return isInvolved(processAPI, currentUserId, processInstanceId) ||\n                    isSupervisor(processAPI, currentUserId, processInstanceId)\n        }\n        catch (NumberFormatException e) {\n            return true\n        }\n    }\n    \n    private boolean checkPostMethod(APICallContext apiCallContext, APIAccessor apiAccessor, long currentUserId) {\n\n        ObjectMapper mapper = new ObjectMapper();\n        def map = mapper.readValue(apiCallContext.getBody(), Map.class)\n\n        def processInstanceIdAsString = map.get(CASE_ID)\n        if (processInstanceIdAsString == null || processInstanceIdAsString.toString().isEmpty()) {\n            return true;\n        }\n        def processInstanceId = Long.valueOf(processInstanceIdAsString.toString())\n        if (processInstanceId <= 0) {\n            return true;\n        }\n        try {\n            def processAPI = apiAccessor.getProcessAPI()\n            def processDefinitionId = processAPI.getProcessInstance(processInstanceId).getProcessDefinitionId()\n            return isInvolved(processAPI, currentUserId, processInstanceId) ||\n                    processAPI.isUserProcessSupervisor(processDefinitionId, currentUserId)\n        } catch (NotFoundException e) {\n            return true\n        }\n    }\n\n    private boolean checkGetMethod(APICallContext apiCallContext, APIAccessor apiAccessor, long currentUserId) {\n        def filters = apiCallContext.getFilters()\n        def processAPI = apiAccessor.getProcessAPI()\n        \n        long processInstanceId = -1\n        long processDefinitionId = -1\n        \n        def archivedCaseIdAsString = filters.get(ARCHIVED_CASE_ID)\n        if (archivedCaseIdAsString != null) {\n            def archivedCaseId = Long.valueOf(archivedCaseIdAsString)\n            processInstanceId = processAPI.getArchivedProcessInstance(archivedCaseId).getSourceObjectId()\n            processDefinitionId = processAPI.getFinalArchivedProcessInstance(processInstanceId).getProcessDefinitionId()\n        }\n        else {\n            def processInstanceIdAsString = filters.get(CASE_ID)\n            if (processInstanceIdAsString != null) {\n                processInstanceId = Long.valueOf(processInstanceIdAsString)\n                processDefinitionId = processAPI.getProcessInstance(processInstanceId).getProcessDefinitionId()\n            }\n        }\n        \n        if (processInstanceId > 0 && processDefinitionId > 0) {\n            return isInvolved(processAPI, currentUserId, processInstanceId) ||\n                    processAPI.isUserProcessSupervisor(processDefinitionId, currentUserId)\n        }\n        \n        return false;\n    }\n\n\n    private boolean isInvolved(ProcessAPI processAPI, long currentUserId, long processInstanceId) {\n        try {\n            return processAPI.isInvolvedInProcessInstance(currentUserId, processInstanceId) || processAPI.isManagerOfUserInvolvedInProcessInstance(currentUserId, processInstanceId)\n        } catch (BonitaException e) {\n            return true\n        }\n    }\n    \n    private boolean isSupervisor(ProcessAPI processAPI, long currentUserId, long processInstanceId) {\n        def processDefinitionId\n        try {\n            processDefinitionId = processAPI.getProcessInstance(processInstanceId).getProcessDefinitionId()\n        } catch (NotFoundException e) {\n            try {\n                processDefinitionId = processAPI.getFinalArchivedProcessInstance(processInstanceId).getProcessDefinitionId()\n            } catch (NotFoundException e1) {\n                return true\n            }\n        }\n        return processAPI.isUserProcessSupervisor(processDefinitionId, currentUserId)\n    }\n    \n}\n'),(1,'TENANT_SECURITY_SCRIPTS','ProcessConfigurationPermissionRule.groovy','/**\n * Copyright (C) 2014 BonitaSoft S.A.\n * BonitaSoft, 32 rue Gustave Eiffel - 38000 Grenoble\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 2.0 of the License, or\n * (at your option) any later version.\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n **/\n\n\nimport org.bonitasoft.engine.api.APIAccessor\nimport org.bonitasoft.engine.api.Logger\nimport org.bonitasoft.engine.api.permission.APICallContext\nimport org.bonitasoft.engine.api.permission.PermissionRule\nimport org.bonitasoft.engine.session.APISession\n\n/**\n *\n * Let a user manage process connectors and parameters only if he is process owner\n *\n * <ul>\n *     <li>bpm/processConnector</li>\n *     <li>bpm/processParameter</li>\n * </ul>\n *\n *\n *\n * @author Anthony Birembaut\n */\nclass ProcessConfigurationPermissionRule implements PermissionRule {\n\n    public static final String PROCESS_ID = \"process_id\"\n\n    @Override\n    public boolean isAllowed(APISession apiSession, APICallContext apiCallContext, APIAccessor apiAccessor, Logger logger) {\n        long currentUserId = apiSession.getUserId()\n        if (apiCallContext.isGET()) {\n            return checkGetMethod(apiCallContext, apiAccessor, currentUserId, logger)\n        } else if (apiCallContext.isPUT()) {\n            return checkPutMethod(apiCallContext, apiAccessor, currentUserId, logger)\n        }\n        return true\n    }\n\n    private boolean checkGetMethod(APICallContext apiCallContext, APIAccessor apiAccessor, long currentUserId, Logger logger) {\n        def resourceIds = apiCallContext.getCompoundResourceId()\n        if (resourceIds.isEmpty()) {\n            def filters = apiCallContext.getFilters()\n            if(filters.containsKey(PROCESS_ID)){\n                def processAPI = apiAccessor.getProcessAPI()\n                return processAPI.isUserProcessSupervisor(Long.valueOf(filters.get(PROCESS_ID)),currentUserId)\n            }\n            return false\n        } else {\n            return isProcessOwnerOfTheProcess(apiAccessor, resourceIds, currentUserId)\n        }\n    }\n\n    private boolean checkPutMethod(APICallContext apiCallContext, APIAccessor apiAccessor, long currentUserId, Logger logger) {\n        def resourceIds = apiCallContext.getCompoundResourceId()\n        return isProcessOwnerOfTheProcess(apiAccessor, resourceIds, currentUserId)\n    }\n\n    private isProcessOwnerOfTheProcess(APIAccessor apiAccessor, List<String> resourceIds, long currentUserId) {\n        def processAPI = apiAccessor.getProcessAPI()\n        def processID = Long.parseLong(resourceIds.get(0))\n        return processAPI.isUserProcessSupervisor(processID, currentUserId)\n    }\n}\n'),(1,'TENANT_SECURITY_SCRIPTS','ProcessConnectorDependencyPermissionRule.groovy','/**\n * Copyright (C) 2014 BonitaSoft S.A.\n * BonitaSoft, 32 rue Gustave Eiffel - 38000 Grenoble\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 2.0 of the License, or\n * (at your option) any later version.\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n **/\n\n\nimport org.bonitasoft.engine.api.APIAccessor\nimport org.bonitasoft.engine.api.Logger\nimport org.bonitasoft.engine.api.permission.APICallContext\nimport org.bonitasoft.engine.api.permission.PermissionRule\nimport org.bonitasoft.engine.session.APISession\n\n/**\n *\n * Let a user see process connector dependency problem only if he is process owner\n *\n * <ul>\n *     <li>bpm/processConnectorDependency</li>\n * </ul>\n *\n *\n *\n * @author Anthony Birembaut\n */\nclass ProcessConnectorDependencyPermissionRule implements PermissionRule {\n\n    public static final String PROCESS_ID = \"connector_process_id\"\n\n    @Override\n    public boolean isAllowed(APISession apiSession, APICallContext apiCallContext, APIAccessor apiAccessor, Logger logger) {\n        long currentUserId = apiSession.getUserId()\n        if (apiCallContext.isGET()) {\n            return checkGetMethod(apiCallContext, apiAccessor, currentUserId, logger)\n        }\n        return true\n    }\n\n    private boolean checkGetMethod(APICallContext apiCallContext, APIAccessor apiAccessor, long currentUserId, Logger logger) {\n        def filters = apiCallContext.getFilters()\n        if(filters.containsKey(PROCESS_ID)){\n            def processAPI = apiAccessor.getProcessAPI()\n            return processAPI.isUserProcessSupervisor(Long.valueOf(filters.get(PROCESS_ID)),currentUserId)\n        }\n        return false\n    }\n}\n'),(1,'TENANT_SECURITY_SCRIPTS','ProcessInstantiationPermissionRule.groovy','/**\n * Copyright (C) 2015 BonitaSoft S.A.\n * BonitaSoft, 32 rue Gustave Eiffel - 38000 Grenoble\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 2.0 of the License, or\n * (at your option) any later version.\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n **/\n\n\nimport com.fasterxml.jackson.databind.ObjectMapper\n\nimport org.bonitasoft.engine.api.APIAccessor\nimport org.bonitasoft.engine.api.Logger\nimport org.bonitasoft.engine.api.permission.APICallContext\nimport org.bonitasoft.engine.api.permission.PermissionRule\nimport org.bonitasoft.engine.bpm.process.ArchivedProcessInstancesSearchDescriptor\nimport org.bonitasoft.engine.exception.BonitaException;\nimport org.bonitasoft.engine.exception.NotFoundException\nimport org.bonitasoft.engine.identity.User\nimport org.bonitasoft.engine.identity.UserSearchDescriptor\nimport org.bonitasoft.engine.search.SearchOptionsBuilder\nimport org.bonitasoft.engine.search.SearchResult\nimport org.bonitasoft.engine.session.APISession\n\n/**\n *\n * Let a user access only cases that he is involved in and start cases that he can start\n *\n * <ul>\n *     <li>bpm/process/[id]/contract</li>\n *     <li>bpm/process/[id]/instantiation</li>\n * </ul>\n *\n *\n *\n * @author Anthony Birembaut\n */\nclass ProcessInstantiationPermissionRule implements PermissionRule {\n\n    @Override\n    public boolean isAllowed(APISession apiSession, APICallContext apiCallContext, APIAccessor apiAccessor, Logger logger) {\n        long currentUserId = apiSession.getUserId();\n        def processDefinitionId = getProcessDefinitionId(apiCallContext)\n        if (processDefinitionId <= 0) {\n            return true\n        }\n        try {\n            def processAPI = apiAccessor.getProcessAPI()\n            def identityAPI = apiAccessor.getIdentityAPI()\n            User user = identityAPI.getUser(currentUserId);\n            SearchOptionsBuilder searchOptionBuilder = new SearchOptionsBuilder(0, 10);\n            searchOptionBuilder.filter(UserSearchDescriptor.USER_NAME, user.getUserName());\n            SearchResult<User> listUsers = processAPI.searchUsersWhoCanStartProcessDefinition(processDefinitionId, searchOptionBuilder.done());\n            logger.debug(\"RuleCase : nb Result [\" + listUsers.getCount() + \"] ?\");\n            def canStart = listUsers.getCount() == 1\n            logger.debug(\"RuleCase : User allowed to start? \" + canStart)\n            return canStart\n        } catch (NotFoundException e) {\n            //exception, allow user to have the 404 when the rest api will look for the resource:\n            return true\n        }\n    }\n    \n    private long getProcessDefinitionId(APICallContext apiCallContext) {\n        def compoundResourceId = apiCallContext.getCompoundResourceId()\n        if (compoundResourceId == null || compoundResourceId.isEmpty()) {\n            return -1L\n        }\n        return Long.valueOf(compoundResourceId.get(0))\n    }\n}\n'),(1,'TENANT_SECURITY_SCRIPTS','ProcessPermissionRule.groovy','/**\n * Copyright (C) 2014 BonitaSoft S.A.\n * BonitaSoft, 32 rue Gustave Eiffel - 38000 Grenoble\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 2.0 of the License, or\n * (at your option) any later version.\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n **/\n\n\n\n\nimport org.bonitasoft.engine.api.APIAccessor\nimport org.bonitasoft.engine.api.Logger\nimport org.bonitasoft.engine.api.permission.APICallContext\nimport org.bonitasoft.engine.api.permission.PermissionRule\nimport org.bonitasoft.engine.bpm.process.ProcessDeploymentInfoSearchDescriptor\nimport org.bonitasoft.engine.search.SearchOptionsBuilder\nimport org.bonitasoft.engine.session.APISession\n\n/**\n *\n * Let the user do get only on processes he deployed or that he supervised\n *\n *\n * can be added to\n * <ul>\n *     <li>bpm/process</li>\n * </ul>\n *\n *\n *\n * @author Baptiste Mesta\n */\nclass ProcessPermissionRule implements PermissionRule {\n\n\n    @Override\n    public boolean isAllowed(APISession apiSession, APICallContext apiCallContext, APIAccessor apiAccessor, Logger logger) {\n        long currentUserId = apiSession.getUserId();\n        if (apiCallContext.isGET()) {\n            return checkGetMethod(apiCallContext, apiAccessor, currentUserId, logger)\n        }\n        if (apiCallContext.isPUT()) {\n            return checkPutMethod(apiCallContext, apiAccessor, currentUserId, logger)\n        }\n        return false\n    }\n\n\n    private boolean checkGetMethod(APICallContext apiCallContext, APIAccessor apiAccessor, long currentUserId, Logger logger) {\n        def processAPI = apiAccessor.getProcessAPI()\n        def filters = apiCallContext.getFilters()\n        def resourceIds = apiCallContext.getCompoundResourceId()\n        if (!resourceIds.isEmpty()) {\n            def processId = Long.parseLong(resourceIds.get(0))\n            def processDefinition = processAPI.getProcessDeploymentInfo(processId);\n            def deployedByUser = processDefinition.getDeployedBy() == currentUserId\n            if(deployedByUser){\n                logger.debug(\"deployed by the current user\")\n                return true;\n            }\n            def canStart = processAPI.searchProcessDeploymentInfosCanBeStartedBy(currentUserId, new SearchOptionsBuilder(0, 1).filter(ProcessDeploymentInfoSearchDescriptor.PROCESS_ID, processDefinition.getProcessId()).done())\n            if(canStart.getCount()==1){\n                logger.debug(\"can start process, so can get\")\n                return true\n            }\n            def isSupervisor = processAPI.isUserProcessSupervisor(processId, currentUserId)\n            if(isSupervisor){\n                logger.debug(\"is supervisor of the process\")\n                return true\n            }\n            return false\n        } else {\n            def stringUserId = String.valueOf(currentUserId)\n            if (stringUserId.equals(filters.get(\"team_manager_id\")) || stringUserId.equals(filters.get(\"supervisor_id\")) || stringUserId.equals(filters.get(\"user_id\"))) {\n                logger.debug(\"allowed because searching filters contains user id\")\n                return true\n            }\n        }\n        return false;\n    }\n    private boolean checkPutMethod(APICallContext apiCallContext, APIAccessor apiAccessor, long currentUserId, Logger logger) {\n        def resourceIds = apiCallContext.getCompoundResourceId()\n        if (!resourceIds.isEmpty()) {\n            def processId = Long.parseLong(resourceIds.get(0))\n            def processAPI = apiAccessor.getProcessAPI()\n            def isSupervisor = processAPI.isUserProcessSupervisor(processId, currentUserId)\n            if(isSupervisor){\n                logger.debug(\"is supervisor of the process\")\n                return true\n            }\n            return false\n        }\n        return true\n    }\n}\n'),(1,'TENANT_SECURITY_SCRIPTS','ProcessResolutionProblemPermissionRule.groovy','/**\n * Copyright (C) 2014 BonitaSoft S.A.\n * BonitaSoft, 32 rue Gustave Eiffel - 38000 Grenoble\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 2.0 of the License, or\n * (at your option) any later version.\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n **/\n\n\nimport org.bonitasoft.engine.api.APIAccessor\nimport org.bonitasoft.engine.api.Logger\nimport org.bonitasoft.engine.api.permission.APICallContext\nimport org.bonitasoft.engine.api.permission.PermissionRule\nimport org.bonitasoft.engine.session.APISession\n\n/**\n *\n * Let a user see process resolution problem only if he is process owner\n *\n * <ul>\n *     <li>bpm/processResolutionProblem</li>\n * </ul>\n *\n *\n *\n * @author Anthony Birembaut\n */\nclass ProcessResolutionProblemPermissionRule implements PermissionRule {\n\n    public static final String PROCESS_ID = \"process_id\"\n\n    @Override\n    public boolean isAllowed(APISession apiSession, APICallContext apiCallContext, APIAccessor apiAccessor, Logger logger) {\n        long currentUserId = apiSession.getUserId()\n        if (apiCallContext.isGET()) {\n            return checkGetMethod(apiCallContext, apiAccessor, currentUserId, logger)\n        }\n        return true\n    }\n\n    private boolean checkGetMethod(APICallContext apiCallContext, APIAccessor apiAccessor, long currentUserId, Logger logger) {\n        def filters = apiCallContext.getFilters()\n        if(filters.containsKey(PROCESS_ID)){\n            def processAPI = apiAccessor.getProcessAPI()\n            return processAPI.isUserProcessSupervisor(Long.valueOf(filters.get(PROCESS_ID)),currentUserId)\n        }\n        return false\n    }\n}\n'),(1,'TENANT_SECURITY_SCRIPTS','ProcessSupervisorPermissionRule.groovy','/**\n * Copyright (C) 2014 BonitaSoft S.A.\n * BonitaSoft, 32 rue Gustave Eiffel - 38000 Grenoble\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 2.0 of the License, or\n * (at your option) any later version.\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n **/\n\n\nimport com.fasterxml.jackson.databind.ObjectMapper\nimport org.bonitasoft.engine.api.APIAccessor\nimport org.bonitasoft.engine.api.Logger\nimport org.bonitasoft.engine.api.permission.APICallContext\nimport org.bonitasoft.engine.api.permission.PermissionRule\nimport org.bonitasoft.engine.session.APISession\n\n/**\n *\n * Let a user view and add process only if he is process owner\n *\n * <ul>\n *     <li>bpm/processSupervisor</li>\n * </ul>\n *\n *\n *\n * @author Anthony Birembaut\n */\nclass ProcessSupervisorPermissionRule implements PermissionRule {\n\n    public static final String PROCESS_ID = \"process_id\"\n\n    @Override\n    public boolean isAllowed(APISession apiSession, APICallContext apiCallContext, APIAccessor apiAccessor, Logger logger) {\n        long currentUserId = apiSession.getUserId();\n        if (apiCallContext.isPOST()) {\n            return checkPostMethod(apiCallContext, apiAccessor, currentUserId, logger)\n        } else if (apiCallContext.isGET()) {\n            return checkGetMethod(apiCallContext, apiAccessor, currentUserId, logger)\n        } else if (apiCallContext.isDELETE()) {\n            return checkDeleteMethod(apiCallContext, apiAccessor, currentUserId, logger)\n        }\n        //it\'s ok to read\n        return true\n    }\n\n    private boolean checkPostMethod(APICallContext apiCallContext, APIAccessor apiAccessor, long currentUserId, Logger logger) {\n\n        ObjectMapper mapper = new ObjectMapper();\n        def map = mapper.readValue(apiCallContext.getBody(), Map.class)\n\n        def processAPI = apiAccessor.getProcessAPI()\n\n        def processIdString = map.get(\"process_id\")\n        if (processIdString == null || processIdString.toString().isEmpty()) {\n            return false;\n        }\n        def processId = Long.valueOf(processIdString.toString())\n        if (processId <= 0) {\n            return false;\n        }\n\n        return processAPI.isUserProcessSupervisor(processId, currentUserId);\n    }\n\n    private boolean checkGetMethod(APICallContext apiCallContext, APIAccessor apiAccessor, long currentUserId, Logger logger) {\n        def filters = apiCallContext.getFilters()\n        if (filters.containsKey(PROCESS_ID)) {\n            def processAPI = apiAccessor.getProcessAPI()\n            return processAPI.isUserProcessSupervisor(Long.parseLong(filters.get(PROCESS_ID)), currentUserId)\n        }\n        return true\n    }\n\n    private boolean checkDeleteMethod(APICallContext apiCallContext, APIAccessor apiAccessor, long currentUserId, Logger logger) {\n        def resourceIds = apiCallContext.getCompoundResourceId()\n        if (!resourceIds.isEmpty()) {\n            def processAPI = apiAccessor.getProcessAPI()\n            return processAPI.isUserProcessSupervisor(Long.parseLong(resourceIds.get(0)), currentUserId)\n        }\n        return true\n    }\n}\n'),(1,'TENANT_SECURITY_SCRIPTS','ProfileEntryPermissionRule.groovy','/**\n * Copyright (C) 2014 BonitaSoft S.A.\n * BonitaSoft, 32 rue Gustave Eiffel - 38000 Grenoble\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 2.0 of the License, or\n * (at your option) any later version.\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n **/\n\n\n\n\n\nimport org.bonitasoft.engine.api.APIAccessor\nimport org.bonitasoft.engine.api.Logger\nimport org.bonitasoft.engine.api.permission.APICallContext\nimport org.bonitasoft.engine.api.permission.PermissionRule\nimport org.bonitasoft.engine.profile.ProfileCriterion\nimport org.bonitasoft.engine.session.APISession\n\n/**\n *\n * Secure profile related resources\n *\n * can be added to\n * <ul>\n *     <li>portal/profileEntry</li>\n *     <li>userXP/profileEntry</li>\n * </ul>\n * @author Baptiste Mesta\n */\nclass ProfileEntryPermissionRule implements PermissionRule {\n\n    @Override\n    boolean isAllowed(APISession apiSession, APICallContext apiCallContext, APIAccessor apiAccessor, Logger logger) {\n       if(apiCallContext.isGET()){\n            if(apiCallContext.getResourceId() != null){\n                return false\n            }else{\n                def filters = apiCallContext.getFilters()\n                if(filters.containsKey(\"profile_id\")){\n                    def profileId = Long.valueOf(filters.get(\"profile_id\"))\n                    def index = 0\n                    def profile\n                    def list = []\n                    def profileAPI = apiAccessor.getProfileAPI()\n                    while ((list = profileAPI.getProfilesForUser(apiSession.getUserId(),index,100,ProfileCriterion.ID_ASC)).size() == 100 && (profile = list.find{it.getId() == profileId}) == null){\n                        index += 100\n                    }\n                    return profile != null || list.find{it.getId() == profileId} != null\n                }\n                return apiSession.getUserId().toString().equals(apiCallContext.getFilters().get(\"user_id\"))\n            }\n        }\n        return false\n    }\n\n}\n'),(1,'TENANT_SECURITY_SCRIPTS','ProfilePermissionRule.groovy','/**\n * Copyright (C) 2014 BonitaSoft S.A.\n * BonitaSoft, 32 rue Gustave Eiffel - 38000 Grenoble\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 2.0 of the License, or\n * (at your option) any later version.\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n **/\n\n\n\nimport org.bonitasoft.engine.api.APIAccessor\nimport org.bonitasoft.engine.api.Logger\nimport org.bonitasoft.engine.api.permission.APICallContext\nimport org.bonitasoft.engine.api.permission.PermissionRule\nimport org.bonitasoft.engine.profile.ProfileCriterion\nimport org.bonitasoft.engine.session.APISession\n\n/**\n *\n * Secure profile related resources\n *\n * can be added to\n * <ul>\n *     <li>portal/profile</li>\n *     <li>userXP/profile</li>\n * </ul>\n * @author Baptiste Mesta\n */\nclass ProfilePermissionRule  implements PermissionRule {\n\n    @Override\n    boolean isAllowed(APISession apiSession, APICallContext apiCallContext, APIAccessor apiAccessor, Logger logger) {\n        if(apiCallContext.isGET()){\n            if(apiCallContext.getResourceId() != null){\n                def profileId = Long.valueOf(apiCallContext.getResourceId())\n                def processAPI = apiAccessor.getProfileAPI()\n\n                def index = 0\n                def profile\n                def list = []\n                while ((list = processAPI.getProfilesForUser(apiSession.getUserId(),index,100,ProfileCriterion.ID_ASC)).size() == 100 && (profile = list.find{it.getId() == profileId}) == null){\n                    index += 100\n                }\n                return profile != null || list.find{it.getId() == profileId} != null\n            }else{\n                return apiSession.getUserId().toString().equals(apiCallContext.getFilters().get(\"user_id\"))\n            }\n        }\n        return false\n    }\n\n}\n'),(1,'TENANT_SECURITY_SCRIPTS','TaskExecutionPermissionRule.groovy','/**\n * Copyright (C) 2015 BonitaSoft S.A.\n * BonitaSoft, 32 rue Gustave Eiffel - 38000 Grenoble\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 2.0 of the License, or\n * (at your option) any later version.\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n **/\n\n\nimport com.fasterxml.jackson.databind.ObjectMapper\n\nimport org.bonitasoft.engine.api.APIAccessor\nimport org.bonitasoft.engine.api.Logger\nimport org.bonitasoft.engine.api.ProcessAPI\nimport org.bonitasoft.engine.api.permission.APICallContext\nimport org.bonitasoft.engine.api.permission.PermissionRule\nimport org.bonitasoft.engine.bpm.flownode.ArchivedHumanTaskInstance\nimport org.bonitasoft.engine.bpm.flownode.ArchivedManualTaskInstance\nimport org.bonitasoft.engine.bpm.flownode.FlowNodeType;\nimport org.bonitasoft.engine.bpm.flownode.HumanTaskInstance\nimport org.bonitasoft.engine.bpm.flownode.ManualTaskInstance\nimport org.bonitasoft.engine.exception.NotFoundException\nimport org.bonitasoft.engine.identity.UserSearchDescriptor\nimport org.bonitasoft.engine.search.SearchOptionsBuilder\nimport org.bonitasoft.engine.session.APISession\n\n/**\n *\n * Let a user access only tasks that are assigned or pending to him\n *\n *\n * can be added to\n * <ul>\n *     <li>bpm/archivedUserTask/[id]/context</li>\n *     <li>bpm/userTask/[id]/context</li>\n *     <li>bpm/userTask/[id]/contract</li>\n *     <li>bpm/userTask/[id]/execution</li>\n * </ul>\n *\n *\n * @author Anthony Birembaut\n */\nclass TaskExecutionPermissionRule implements PermissionRule {\n\n    @Override\n    public boolean isAllowed(APISession apiSession, APICallContext apiCallContext, APIAccessor apiAccessor, Logger logger) {\n        long currentUserId = apiSession.getUserId()\n        def userName = apiSession.getUserName()\n        def processAPI = apiAccessor.getProcessAPI()\n        try {\n            return isTaskAccessibleByUser(processAPI, apiCallContext, logger, currentUserId, userName)\n        } catch (NotFoundException e) {\n            logger.debug(\"flow node not found: is allowed\")\n            return true\n        }\n    }\n\n    protected boolean isTaskAccessibleByUser(ProcessAPI processAPI, APICallContext apiCallContext, Logger logger, long currentUserId, String username) throws NotFoundException {\n        def taskInstanceId = getTaskInstanceId(apiCallContext)\n        if (taskInstanceId <= 0) {\n            return true\n        }\n        if (apiCallContext.getResourceName().startsWith(\"archived\")) {\n            return isArchivedFlowNodeAccessible(processAPI, taskInstanceId, currentUserId, username)\n        } else {\n            return isTaskAccessible(processAPI, taskInstanceId, currentUserId, username, logger)\n        }\n    }\n\n    private boolean isArchivedFlowNodeAccessible(ProcessAPI processAPI, long taskId, long currentUserId, String username) throws NotFoundException {\n        def archivedFlowNodeInstance = processAPI.getArchivedFlowNodeInstance(taskId)\n        if (FlowNodeType.MANUAL_TASK.equals(archivedFlowNodeInstance.getType()) || FlowNodeType.USER_TASK.equals(archivedFlowNodeInstance.getType())) {\n            if (currentUserId == archivedFlowNodeInstance.getExecutedBy()) {\n                return true\n            }\n            //get the last flow node in journal\n            if(archivedFlowNodeInstance.getExecutedBy() == 0){\n                try{\n                    def instance1 = processAPI.getHumanTaskInstance(archivedFlowNodeInstance.getSourceObjectId())\n                    if(currentUserId == instance1.getAssigneeId()){\n                        return true\n                    }\n                }catch(NotFoundException e){\n                    //do nothing\n                }\n            }\n        }\n        if (FlowNodeType.MANUAL_TASK.equals(archivedFlowNodeInstance.getType())) {\n            try {\n                def parentTask = processAPI.getHumanTaskInstance(archivedFlowNodeInstance.getParentContainerId())\n                if (parentTask.assigneeId > 0) {\n                    if (parentTask.assigneeId == currentUserId) {\n                        return true\n                    }\n                } else {\n                    final SearchOptionsBuilder builder = new SearchOptionsBuilder(0, 1)\n                    builder.filter(UserSearchDescriptor.USER_NAME, username)\n                    def searchResult = processAPI.searchUsersWhoCanExecutePendingHumanTask(parentTask.id, builder.done())\n                    if (searchResult.getCount() == 1l) {\n                        logger.debug(\"The parent task is pending for user\")\n                        return true\n                    }\n                }\n            } catch (NotFoundException e) {\n                try {\n                    def instance = processAPI.getArchivedActivityInstance(archivedFlowNodeInstance.getParentContainerId())\n                    //return false because it means the parent is not found, not the element itself\n                    if ((FlowNodeType.MANUAL_TASK.equals(instance.getType()) || FlowNodeType.USER_TASK.equals(instance.getType())) &&  instance.assigneeId > 0) {\n                        if (instance.assigneeId == currentUserId) {\n                            return true\n                        }\n                    }\n                } catch (NotFoundException e1) {\n                    //return false because it means the parent is not found, not the element itself\n                    return false\n                }\n            }\n        }\n        def processDefinitionId = archivedFlowNodeInstance.getProcessDefinitionId()\n        return processAPI.isUserProcessSupervisor(processDefinitionId, currentUserId)\n    }\n\n    private boolean isTaskAccessible(ProcessAPI processAPI, long flowNodeId, long currentUserId, String username, Logger logger) throws NotFoundException {\n        def instance = processAPI.getFlowNodeInstance(flowNodeId)\n        if (FlowNodeType.MANUAL_TASK.equals(instance.getType()) || FlowNodeType.USER_TASK.equals(instance.getType())) {\n            if (instance.assigneeId > 0) {\n                if (instance.assigneeId == currentUserId) {\n                    return true\n                }\n            } else {\n                final SearchOptionsBuilder builder = new SearchOptionsBuilder(0, 1);\n                builder.filter(UserSearchDescriptor.USER_NAME, username);\n                def searchResult = processAPI.searchUsersWhoCanExecutePendingHumanTask(flowNodeId, builder.done())\n                if (searchResult.getCount() == 1l) {\n                    logger.debug(\"The task is pending for user\")\n                    return true\n                }\n            }\n            //we can access the task if we can access the parent of the subtask\n        if (FlowNodeType.MANUAL_TASK.equals(instance.getType())) {\n                try {\n\n                    def parentTask = processAPI.getHumanTaskInstance(instance.getParentContainerId())\n                    if (parentTask.assigneeId > 0) {\n                        if (parentTask.assigneeId == currentUserId) {\n                            return true\n                        }\n                    } else {\n                        final SearchOptionsBuilder builder = new SearchOptionsBuilder(0, 1);\n                        builder.filter(UserSearchDescriptor.USER_NAME, username);\n                        def searchResult = processAPI.searchUsersWhoCanExecutePendingHumanTask(parentTask.id, builder.done())\n                        if (searchResult.getCount() == 1l) {\n                            logger.debug(\"The parent task is pending for user\")\n                            return true\n                        }\n                    }\n                } catch (NotFoundException e) {\n                    //return false because it means the parent is not found, not the element itself\n                    return false\n                }\n            }\n        }\n        def processDefinitionId = instance.getProcessDefinitionId()\n        return processAPI.isUserProcessSupervisor(processDefinitionId, currentUserId)\n    }\n    \n    private long getTaskInstanceId(APICallContext apiCallContext) {\n        def compoundResourceId = apiCallContext.getCompoundResourceId()\n        if (compoundResourceId == null || compoundResourceId.isEmpty()) {\n            return -1L\n        }\n        return Long.valueOf(compoundResourceId.get(0))\n    }\n}\n'),(1,'TENANT_SECURITY_SCRIPTS','TaskPermissionRule.groovy','/**\n * Copyright (C) 2014 BonitaSoft S.A.\n * BonitaSoft, 32 rue Gustave Eiffel - 38000 Grenoble\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 2.0 of the License, or\n * (at your option) any later version.\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n **/\n\n\nimport com.fasterxml.jackson.databind.ObjectMapper\nimport org.bonitasoft.engine.api.APIAccessor\nimport org.bonitasoft.engine.api.Logger\nimport org.bonitasoft.engine.api.ProcessAPI\nimport org.bonitasoft.engine.api.permission.APICallContext\nimport org.bonitasoft.engine.api.permission.PermissionRule\nimport org.bonitasoft.engine.bpm.flownode.ArchivedHumanTaskInstance\nimport org.bonitasoft.engine.bpm.flownode.ArchivedManualTaskInstance\nimport org.bonitasoft.engine.bpm.flownode.HumanTaskInstance\nimport org.bonitasoft.engine.bpm.flownode.ManualTaskInstance\nimport org.bonitasoft.engine.bpm.flownode.FlowNodeType;\nimport org.bonitasoft.engine.exception.NotFoundException\nimport org.bonitasoft.engine.identity.UserSearchDescriptor\nimport org.bonitasoft.engine.search.SearchOptionsBuilder\nimport org.bonitasoft.engine.session.APISession\n\n/**\n *\n * Let a user access only tasks that are assigned or pending to him\n *\n *\n * can be added to\n * <ul>\n *     <li>bpm/humanTask</li>\n *     <li>bpm/userTask</li>\n *     <li>bpm/archivedHumanTask</li>\n *     <li>bpm/archivedUserTask</li>\n *     <li>bpm/activity</li>\n *     <li>bpm/archivedActivity</li>\n *     <li>bpm/task</li>\n *     <li>bpm/archivedTask</li>\n *     <li>bpm/flowNode</li>\n *     <li>bpm/archivedFlowNode</li>\n *     <li>bpm/manualTask</li>\n *     <li>bpm/archivedManualTask</li>\n *     <li>bpm/archivedTask</li>\n * </ul>\n *\n *\n * @author Baptiste Mesta\n */\nclass TaskPermissionRule implements PermissionRule {\n\n    @Override\n    public boolean isAllowed(APISession apiSession, APICallContext apiCallContext, APIAccessor apiAccessor, Logger logger) {\n        long currentUserId = apiSession.getUserId()\n        def userName = apiSession.getUserName()\n        def processAPI = apiAccessor.getProcessAPI()\n        def filters = apiCallContext.getFilters()\n        try {\n            if (apiCallContext.isGET()) {\n                return checkGetMethod(apiCallContext, processAPI, logger, currentUserId, userName, filters)\n            } else if (apiCallContext.isPUT() && apiCallContext.getResourceId() != null) {\n                return isTaskAccessibleByUser(processAPI, apiCallContext, logger, currentUserId, userName)\n            } else if (apiCallContext.isPOST()) {\n                return checkPostMethod(apiCallContext, currentUserId, processAPI, userName, logger)\n            }\n        } catch (NotFoundException e) {\n            logger.debug(\"flow node not found: is allowed\")\n            return true\n        }\n        return true\n    }\n\n    private boolean checkGetMethod(APICallContext apiCallContext, ProcessAPI processAPI, Logger logger, long currentUserId, String userName, Map<String, String> filters) {\n        if (apiCallContext.getResourceId() != null) {\n            return isTaskAccessibleByUser(processAPI, apiCallContext, logger, currentUserId, userName)\n        } else if (hasFilter(currentUserId, filters, \"assigned_id\") || hasFilter(currentUserId, filters, \"user_id\") || hasFilter(currentUserId, filters, \"hidden_user_id\") || hasFilter(currentUserId, filters, \"supervisor_id\")) {\n            logger.debug(\"FilterOnUser or FilterOnAssignUser\")\n            return true\n        } else if (filters.containsKey(\"parentTaskId\")) {\n            def long parentTaskId = Long.parseLong(filters.get(\"parentTaskId\"))\n            try {\n                return isTaskAccessible(processAPI, filters.get(\"parentTaskId\"), currentUserId, userName, logger)\n            } catch (NotFoundException e) {\n                return isArchivedFlowNodeAccessible(processAPI, parentTaskId, currentUserId, userName)\n            }\n        } else if (filters.containsKey(\"processId\")) {\n            def long processId = Long.valueOf(filters.get(\"processId\"))\n            return processAPI.isUserProcessSupervisor(processId, currentUserId)\n        } else if (filters.containsKey(\"caseId\")) {\n            def long caseId = Long.valueOf(filters.get(\"caseId\"))\n            return processAPI.isUserProcessSupervisor(processAPI.getProcessInstance(caseId).getProcessDefinitionId(), currentUserId)\n        } else {\n            return false\n        }\n    }\n\n    private boolean checkPostMethod(APICallContext apiCallContext, long currentUserId, ProcessAPI processAPI, String userName, Logger logger) {\n        if (\"manualTask\".equals(apiCallContext.getResourceName())) {\n            ObjectMapper mapper = new ObjectMapper();\n            def map = mapper.readValue(apiCallContext.getBody(), Map.class)\n\n            def string = map.get(\"parentTaskId\").toString()\n            if (string == null || string.isEmpty()) {\n                return true\n            }\n            def parentTaskId = Long.valueOf(string)\n            def flowNodeInstance = processAPI.getFlowNodeInstance(parentTaskId)\n            return flowNodeInstance instanceof HumanTaskInstance && flowNodeInstance.getAssigneeId()\n        }\n        return false\n    }\n\n    private boolean hasFilter(long currentUserId, Map<String, String> filters, String assigned_id) {\n        return String.valueOf(currentUserId).equals(filters.get(assigned_id))\n    }\n\n    protected boolean isTaskAccessibleByUser(ProcessAPI processAPI, APICallContext apiCallContext, Logger logger, long currentUserId, String username) throws NotFoundException {\n        if (apiCallContext.getResourceName().startsWith(\"archived\")) {\n            return isArchivedFlowNodeAccessible(processAPI, Long.valueOf(apiCallContext.getResourceId()), currentUserId, username)\n        } else {\n            return isTaskAccessible(processAPI, apiCallContext.getResourceId(), currentUserId, username, logger)\n        }\n    }\n\n    private boolean isArchivedFlowNodeAccessible(ProcessAPI processAPI, long taskId, long currentUserId, String username) throws NotFoundException {\n        def archivedFlowNodeInstance = processAPI.getArchivedFlowNodeInstance(taskId)\n        if (FlowNodeType.MANUAL_TASK.equals(archivedFlowNodeInstance.getType()) || FlowNodeType.USER_TASK.equals(archivedFlowNodeInstance.getType())) {\n            if (currentUserId == archivedFlowNodeInstance.getExecutedBy()) {\n                return true\n            }\n            //get the last flow node in journal\n            if(archivedFlowNodeInstance.getExecutedBy() == 0){\n                try{\n                    def instance1 = processAPI.getHumanTaskInstance(archivedFlowNodeInstance.getSourceObjectId())\n                    if(currentUserId == instance1.getAssigneeId()){\n                        return true\n                    }\n                }catch(NotFoundException e){\n                    //do nothing\n                }\n            }\n        }\n        if (FlowNodeType.MANUAL_TASK.equals(archivedFlowNodeInstance.getType())) {\n            try {\n                def parentTask = processAPI.getHumanTaskInstance(archivedFlowNodeInstance.getParentContainerId())\n                if (parentTask.assigneeId > 0) {\n                    if (parentTask.assigneeId == currentUserId) {\n                        return true\n                    }\n                } else {\n                    final SearchOptionsBuilder builder = new SearchOptionsBuilder(0, 1)\n                    builder.filter(UserSearchDescriptor.USER_NAME, username)\n                    def searchResult = processAPI.searchUsersWhoCanExecutePendingHumanTask(parentTask.id, builder.done())\n                    if (searchResult.getCount() == 1l) {\n                        logger.debug(\"The parent task is pending for user\")\n                        return true\n                    }\n                }\n            } catch (NotFoundException e) {\n                try {\n                    def instance = processAPI.getArchivedActivityInstance(archivedFlowNodeInstance.getParentContainerId())\n                    //return false because it means the parent is not found, not the element itself\n                    if ((FlowNodeType.MANUAL_TASK.equals(instance.getType()) || FlowNodeType.USER_TASK.equals(instance.getType())) &&  instance.assigneeId > 0) {\n                        if (instance.assigneeId == currentUserId) {\n                            return true\n                        }\n                    }\n                } catch (NotFoundException e1) {\n                    //return false because it means the parent is not found, not the element itself\n                    return false\n                }\n            }\n        }\n        def processDefinitionId = archivedFlowNodeInstance.getProcessDefinitionId()\n        return processAPI.isUserProcessSupervisor(processDefinitionId, currentUserId)\n    }\n\n    private boolean isTaskAccessible(ProcessAPI processAPI, String flowNodeIdAsString, long currentUserId, String username, Logger logger) throws NotFoundException {\n        def long flowNodeId = Long.valueOf(flowNodeIdAsString)\n        def instance = processAPI.getFlowNodeInstance(flowNodeId)\n        if (instance instanceof HumanTaskInstance) {\n            if (instance.assigneeId > 0) {\n                if (instance.assigneeId == currentUserId) {\n                    return true\n                }\n            } else {\n                final SearchOptionsBuilder builder = new SearchOptionsBuilder(0, 1);\n                builder.filter(UserSearchDescriptor.USER_NAME, username);\n                def searchResult = processAPI.searchUsersWhoCanExecutePendingHumanTask(flowNodeId, builder.done())\n                if (searchResult.getCount() == 1l) {\n                    logger.debug(\"The task is pending for user\")\n                    return true\n                }\n            }\n            //we can access the task if we can access the parent of the subtask\n            if (instance instanceof ManualTaskInstance) {\n                try {\n\n                    def parentTask = processAPI.getHumanTaskInstance(instance.getParentContainerId())\n                    if (parentTask.assigneeId > 0) {\n                        if (parentTask.assigneeId == currentUserId) {\n                            return true\n                        }\n                    } else {\n                        final SearchOptionsBuilder builder = new SearchOptionsBuilder(0, 1);\n                        builder.filter(UserSearchDescriptor.USER_NAME, username);\n                        def searchResult = processAPI.searchUsersWhoCanExecutePendingHumanTask(parentTask.id, builder.done())\n                        if (searchResult.getCount() == 1l) {\n                            logger.debug(\"The parent task is pending for user\")\n                            return true\n                        }\n                    }\n                } catch (NotFoundException e) {\n                    //return false because it means the parent is not found, not the element itself\n                    return false\n                }\n            }\n        }\n        def processDefinitionId = instance.getProcessDefinitionId()\n        return processAPI.isUserProcessSupervisor(processDefinitionId, currentUserId)\n    }\n}\n'),(1,'TENANT_SECURITY_SCRIPTS','UserPermissionRule.groovy','/**\n * Copyright (C) 2014 BonitaSoft S.A.\n * BonitaSoft, 32 rue Gustave Eiffel - 38000 Grenoble\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 2.0 of the License, or\n * (at your option) any later version.\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n **/\n\n\n\nimport org.bonitasoft.engine.api.APIAccessor\nimport org.bonitasoft.engine.api.Logger\nimport org.bonitasoft.engine.api.permission.APICallContext\nimport org.bonitasoft.engine.api.permission.PermissionRule\nimport org.bonitasoft.engine.exception.NotFoundException\nimport org.bonitasoft.engine.session.APISession\n\n/**\n *\n * Let the user access and modify only himself\n *\n * can be added to\n * <ul>\n *     <li>identity/user</li>\n *     <li>identity/professionalcontactdata</li>\n *     <li>identity/personalcontactdata</li>\n * </ul>\n *\n * @author Baptiste Mesta\n */\nclass UserPermissionRule implements PermissionRule {\n\n\n    @Override\n    boolean isAllowed(APISession apiSession, APICallContext apiCallContext, APIAccessor apiAccessor, Logger logger) {\n        APISession session = apiSession;\n        long currentUserId = session.getUserId();\n        if (apiCallContext.getResourceId() != null) {\n            def resourceId = Long.valueOf(apiCallContext.getResourceId())\n            if (resourceId.equals(currentUserId)) {\n                return true\n            }\n            return false\n        } else {\n            if (apiCallContext.getQueryString().contains(\"d=professional_data\") || apiCallContext.getQueryString().contains(\"d=personnal_data\")) {\n                return false\n            }\n            def filters = apiCallContext.getFilters()\n            //search by task id for the do for\n            if (filters.containsKey(\"task_id\")) {\n                def taskId = Long.valueOf(filters.get(\"task_id\"))\n                def processAPI = apiAccessor.getProcessAPI()\n                try {\n                    def flowNodeInstance = processAPI.getFlowNodeInstance(taskId)\n                    return processAPI.isUserProcessSupervisor(flowNodeInstance.getProcessDefinitionId(), currentUserId)\n                } catch (NotFoundException e) {\n                    return true\n                }\n            }\n            if (filters.containsKey(\"process_id\")) {\n                def processId = Long.valueOf(filters.get(\"process_id\"))\n                def processAPI = apiAccessor.getProcessAPI()\n                return processAPI.isUserProcessSupervisor(processId, currentUserId)\n            }\n        }\n        return true\n    }\n}\n');
/*!40000 ALTER TABLE `configuration` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2017-11-15 18:33:18
